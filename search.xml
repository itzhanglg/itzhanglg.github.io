<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GitHub上重要的几个搜索技巧</title>
      <link href="/2020/01/08/github-sou-suo-ji-qiao/"/>
      <url>/2020/01/08/github-sou-suo-ji-qiao/</url>
      
        <content type="html"><![CDATA[<p>GitHub 作为目前广大程序员最大的游乐场,怎么在Github上搜索优秀的项目就显得尤为重要.下面是在Github上快速找到自己需要的开源项目的几个搜索技巧:</p><h3 id="一-搜热门"><a href="#一-搜热门" class="headerlink" title="一.搜热门"></a>一.搜热门</h3><p><a href="https://github.com/trending" target="_blank" rel="noopener">Github Trend</a> 页面总结了每天/每周/每月周期的热门 Repositories 和 Developers.</p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200216182738608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><a href="https://github.com/topics" target="_blank" rel="noopener">Github Topic</a> 展示了最新和最流行的讨论主题.</p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200216182810714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="二-搜开发者"><a href="#二-搜开发者" class="headerlink" title="二.搜开发者"></a>二.搜开发者</h3><p>GitHub 官方支持很多搜索条件，在 <a href="https://help.github.com/articles/about-searching-on-github/" target="_blank" rel="noopener">这里</a> 可以查看官方出品的搜索技巧.</p><table><thead><tr><th align="center">搜索条件</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">followers:</td><td align="center">followers:&gt;=1000,匹配超过1000名关注着的开发者</td></tr><tr><td align="center">language:</td><td align="center">language:java,匹配开发语言为 java 的开发者</td></tr><tr><td align="center">in:fullname</td><td align="center">jack in:fullname,匹配用户名实名为 jack 的开发者</td></tr><tr><td align="center">location:</td><td align="center">location:china,匹配用户填写的地址在 china</td></tr></tbody></table><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/2020021618285069.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="三-搜项目及工具"><a href="#三-搜项目及工具" class="headerlink" title="三.搜项目及工具"></a>三.搜项目及工具</h3><p>在GitHub上找到优秀的项目和工具可以通过关键字或设置搜索条件可以事半功倍的找到好资源.</p><table><thead><tr><th align="center">搜索条件</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">Awesome + keyword</td><td align="center">关键字 Awesome,帮忙找到优秀的工具列表</td></tr><tr><td align="center">in:name example</td><td align="center">in:name springboot,匹配项目名中包含 springboot关键词的项目</td></tr><tr><td align="center">in:readme example</td><td align="center">in:readme springboot,匹配readme中包含 springboot关键词的项目</td></tr><tr><td align="center">in:description example</td><td align="center">in:description springboot,匹配描述中包含 springboot关键词的项目</td></tr><tr><td align="center">stars:</td><td align="center">stars:&gt;=1000,匹配收藏数量超过 1000 的项目</td></tr><tr><td align="center">forks:</td><td align="center">forks:&gt;=1000,匹配分支数量超过 1000 的项目</td></tr><tr><td align="center">pushed:</td><td align="center">pushed:&gt;2019-05-06,匹配在2019年5月6号后有更新的项目</td></tr><tr><td align="center">language:</td><td align="center">language:java,匹配以 java 作为开发语言的项目</td></tr></tbody></table><h4 id="1-Awesome-keyword"><a href="#1-Awesome-keyword" class="headerlink" title="1.Awesome + keyword"></a>1.Awesome + keyword</h4><p>Awesome 几乎成为了不少 GitHub 用户命名项目的关键字之一,如要找到优秀的java相关开源项目的集合,可以尝试搜索 <code>Awesome java</code> 得到下列结果:</p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200216182912115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2-设置搜索条件"><a href="#2-设置搜索条件" class="headerlink" title="2.设置搜索条件"></a>2.设置搜索条件</h4><p>明确需要寻找某类特定的项目,如用某种语言,Stars数需要达到什么标准,在搜索框中直接输入搜索条件即可.多个搜索条件可组合使用.一般使用: <code>stars:</code> <code>language</code> <code>forks:</code> <code>in:</code> <code>pushed:</code>  ,其实就是设置项目收藏,开发语言,派生 这些搜索条件. 如 <code>stars:&gt;=1000 language:java forks:&gt;=600</code> ,结果如下:</p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20200216182925928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>也可以使用 Github 提供的 <a href="https://github.com/search/advanced" target="_blank" rel="noopener">高级搜索功能</a> .或者参考官方给出的帮助指南 <a href="https://help.github.com/articles/searching-on-github/" target="_blank" rel="noopener">Searching on GitHub</a> ，里面有更多关于项目、代码、评论、问题等搜索技巧。</p><p>下面是 Github 颇受欢迎上的项目:</p><p><a href="https://github.com/Awesome-Windows/Awesome/blob/master/README-cn.md" target="_blank" rel="noopener">Awesome</a> :Windows上优质&amp;精选的最佳应用程序及工具列表<br><a href="https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books-zh.md" target="_blank" rel="noopener">free-programming-books</a> :免费的编程相关书籍<br><a href="https://github.com/1c7/chinese-independent-developer" target="_blank" rel="noopener">chinese-independent-developer</a> :中国独立开发者项目列表<br><a href="https://github.com/timqian/chinese-independent-blogs" target="_blank" rel="noopener">chinese-independent-blogs</a> :中文独立博客列表<br><a href="https://github.com/jobbole/awesome-java-cn#ancients" target="_blank" rel="noopener">awesome-java-cn</a> :Java资源大全中文版</p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐资源</title>
      <link href="/2020/01/06/tui-jian-zi-yuan/"/>
      <url>/2020/01/06/tui-jian-zi-yuan/</url>
      
        <content type="html"><![CDATA[<h3 id="一-网站"><a href="#一-网站" class="headerlink" title="一.网站"></a>一.网站</h3><h4 id="1-论坛"><a href="#1-论坛" class="headerlink" title="1.论坛"></a>1.论坛</h4><table><thead><tr><th align="center"><a href="https://www.csdn.net/" target="_blank" rel="noopener">CSDN</a></th><th align="center"><a href="https://www.cnblogs.com/" target="_blank" rel="noopener">博客园</a></th><th align="center"><a href="https://juejin.im/timeline" target="_blank" rel="noopener">掘金</a></th><th align="center"><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a></th><th align="center"><a href="https://gitee.com/" target="_blank" rel="noopener">Gitee</a></th><th align="center"><a href="https://www.zhihu.com/" target="_blank" rel="noopener">知乎</a></th></tr></thead><tbody><tr><td align="center"><a href="https://www.jianshu.com/" target="_blank" rel="noopener">简书</a></td><td align="center"><a href="https://xiaozhuanlan.com/" target="_blank" rel="noopener">小专栏</a></td><td align="center"><a href="https://www.zsxq.com/" target="_blank" rel="noopener">知识星球</a></td><td align="center"><a href="https://www.oschina.net/blog" target="_blank" rel="noopener">OSCHINA</a></td><td align="center"><a href="https://blog.51cto.com/" target="_blank" rel="noopener">51CTO博客</a></td><td align="center"></td></tr></tbody></table><h4 id="2-社区"><a href="#2-社区" class="headerlink" title="2.社区"></a>2.社区</h4><ul><li><a href="https://segmentfault.com/" target="_blank" rel="noopener">segmentfault</a></li><li><a href="https://stackoverflow.com/" target="_blank" rel="noopener">stackoverflow</a></li><li><a href="https://www.imooc.com/article/fe" target="_blank" rel="noopener">慕课网手记</a></li><li><a href="https://www.v2ex.com/" target="_blank" rel="noopener">V2EX</a></li><li><a href="https://www.infoq.cn/" target="_blank" rel="noopener">InfoQ</a></li></ul><h4 id="3-教学网站"><a href="#3-教学网站" class="headerlink" title="3.教学网站"></a>3.教学网站</h4><table><thead><tr><th align="center"><a href="http://www.atguigu.com/" target="_blank" rel="noopener">尚硅谷</a></th><th align="center"><a href="http://yun.itheima.com/" target="_blank" rel="noopener">黑马程序员</a></th><th align="center"><a href="https://www.imooc.com/" target="_blank" rel="noopener">慕课网</a></th><th align="center"><a href="https://how2j.cn/" target="_blank" rel="noopener">HOW2J.CN</a></th><th align="center"><a href="https://www.shiyanlou.com/" target="_blank" rel="noopener">实验楼</a></th><th align="center"><a href="https://time.geekbang.org/" target="_blank" rel="noopener">极客时间</a></th></tr></thead><tbody><tr><td align="center"><a href="http://www.gulixueyuan.com/" target="_blank" rel="noopener">谷粒学院</a></td><td align="center"><a href="<https://study.163.com/">网易云课堂</a></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h4 id="4-刷题"><a href="#4-刷题" class="headerlink" title="4.刷题"></a>4.刷题</h4><ul><li><a href="https://www.nowcoder.com/" target="_blank" rel="noopener">牛客网</a></li><li><a href="https://leetcode-cn.com/" target="_blank" rel="noopener">leetcode</a></li></ul><h4 id="5-工具"><a href="#5-工具" class="headerlink" title="5.工具"></a>5.工具</h4><table><thead><tr><th align="center"><a href="http://www.ofmonkey.com/" target="_blank" rel="noopener">程序员在线工具</a></th><th align="center"><a href="http://www.bejson.com/" target="_blank" rel="noopener">在线JSON校验工具</a></th><th align="center"><a href="https://smallpdf.com/cn" target="_blank" rel="noopener">Smallpdf</a></th></tr></thead><tbody><tr><td align="center"><a href="https://www.hipdf.cn/" target="_blank" rel="noopener">hipdf</a></td><td align="center"><a href="http://c.runoob.com/" target="_blank" rel="noopener">菜鸟工具</a></td><td align="center"><a href="https://www.onlinedoctranslator.com/" target="_blank" rel="noopener">在线文档翻译器</a></td></tr><tr><td align="center"><a href="https://www.easyicon.net/" target="_blank" rel="noopener">图标下载</a></td><td align="center"><a href="https://www.weiciyun.com/" target="_blank" rel="noopener">微词云</a></td><td align="center"><a href="https://www.iloveimg.com/zh-cn" target="_blank" rel="noopener">批量编辑图片工具</a></td></tr></tbody></table><h4 id="6-在线作图"><a href="#6-在线作图" class="headerlink" title="6.在线作图"></a>6.在线作图</h4><ul><li><a href="https://www.draw.io/" target="_blank" rel="noopener">diaw.io</a></li><li><a href="https://www.processon.com/" target="_blank" rel="noopener">ProcessOn</a></li><li><a href="https://www.liuchengtu.com/" target="_blank" rel="noopener">迅捷画图</a></li><li><a href="http://topology.le5le.com/" target="_blank" rel="noopener">乐吾乐</a></li><li><a href="https://online.visual-paradigm.com/cn/diagrams/features/flowchart-tool/" target="_blank" rel="noopener">在线流程图工具</a></li></ul><h4 id="7-电子书"><a href="#7-电子书" class="headerlink" title="7.电子书"></a>7.电子书</h4><table><thead><tr><th align="center"><a href="https://www.jiumodiary.com/" target="_blank" rel="noopener">鸠摩搜索</a></th><th align="center"><a href="http://bestcbooks.com/" target="_blank" rel="noopener">计算机书籍控</a></th><th align="center"><a href="https://www.ituring.com.cn/" target="_blank" rel="noopener">图灵社区</a></th></tr></thead><tbody><tr><td align="center"><a href="http://www.allitebooks.org/" target="_blank" rel="noopener">All IT eBooks</a></td><td align="center"><a href="https://obook.cc/" target="_blank" rel="noopener">偶书</a></td><td align="center"></td></tr></tbody></table><h3 id="二-GitHub"><a href="#二-GitHub" class="headerlink" title="二.GitHub"></a>二.GitHub</h3><h4 id="1-Java学习"><a href="#1-Java学习" class="headerlink" title="1.Java学习"></a>1.Java学习</h4><ul><li><a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">JavaGuide</a>：【Java学习+面试指南】 一份涵盖大部分Java程序员所需要掌握的核心知识。</li><li><a href="https://github.com/CyC2018/CS-Notes" target="_blank" rel="noopener">CS-Notes</a> ：技术面试必备基础知识、Leetcode 题解、后端面试、Java 面试、春招、秋招、操作系统、计算机网络、系统设计。</li><li><a href="https://github.com/doocs/advanced-java" target="_blank" rel="noopener">advanced-java</a>：互联网 Java 工程师进阶知识完全扫盲：涵盖高并发、分布式、高可用、微服务等领域知识，后端同学必看，前端同学也可学习。</li><li><a href="https://github.com/crossoverJie/JCSprout" target="_blank" rel="noopener">JCSprout</a>：处于萌芽阶段的 Java 核心知识库。</li><li><a href="https://github.com/hollischuang/toBeTopJavaer" target="_blank" rel="noopener">toBeTopJavaer</a>：Java工程师成神之路。</li><li><a href="https://github.com/xingshaocheng/architect-awesome" target="_blank" rel="noopener">architect-awesome</a>：后端架构师技术图谱。</li><li><a href="https://github.com/aalansehaiyang/technology-talk" target="_blank" rel="noopener">technology-talk</a>：汇总java生态圈常用技术框架、开源中间件，系统架构、项目管理、经典架构案例、数据库、常用三方库、线上运维等知识。</li><li><a href="https://github.com/frank-lam/fullstack-tutorial" target="_blank" rel="noopener">fullstack-tutorial</a>：fullstack tutorial 2019，后台技术栈/架构师之路/全栈开发社区，春招/秋招/校招/面试。</li><li><a href="https://github.com/ZhongFuCheng3y/3y" target="_blank" rel="noopener">3y</a>： Java 知识整合。</li><li><a href="https://github.com/biezhi/java-bible" target="_blank" rel="noopener">java-bible</a>：这里记录了一些技术摘要，部分文章来自网络，本项目的目的力求分享精品技术干货，以Java为主。</li><li><a href="https://github.com/kdn251/interviews/blob/master/README-zh-cn.md" target="_blank" rel="noopener">interviews</a>：软件工程技术面试个人指南（国外的一个项目，虽然有翻译版，但是不太推荐，因为很多内容并不适用于国内）。</li><li><a href="https://github.com/sjsdfg/effective-java-3rd-chinese" target="_blank" rel="noopener">effective-java-3rd-chinese</a>：effective-java-3rd 中文版。</li></ul><h4 id="2-算法相关"><a href="#2-算法相关" class="headerlink" title="2.算法相关"></a>2.算法相关</h4><ul><li><a href="https://github.com/MisterBooo/LeetCodeAnimation" target="_blank" rel="noopener">LeetCodeAnimation</a>：Demonstrate all the questions on LeetCode in the form of animation.（用动画的形式呈现解LeetCode题目的思路）。</li><li><a href="https://github.com/TheAlgorithms/Java" target="_blank" rel="noopener">TheAlgorithms-Java</a>：All Algorithms implemented in Java。</li><li><a href="https://github.com/azl397985856/leetcode" target="_blank" rel="noopener">leetcode</a>： LeetCode Solutions: A Record of My Problem Solving Journey.( leetcode题解，记录自己的leetcode解题之路。)</li><li><a href="https://github.com/Blankj/awesome-java-leetcode" target="_blank" rel="noopener">awesome-java-leetcode</a>：LeetCode 上 Facebook 的面试题目。</li></ul><h4 id="3-实战项目"><a href="#3-实战项目" class="headerlink" title="3.实战项目"></a>3.实战项目</h4><ul><li><a href="https://github.com/Snailclimb/awesome-java" target="_blank" rel="noopener">awesome-java</a>：Collection of awesome Java project on Github(Github 上非常棒的 Java 开源项目集合)。</li><li><a href="https://github.com/lenve/VBlog" target="_blank" rel="noopener">VBlog</a>：V部落，Vue+SpringBoot实现的多用户博客管理平台。</li><li><a href="https://github.com/macrozheng/mall" target="_blank" rel="noopener">mall</a>：mall项目是一套电商系统，包括前台商城系统及后台管理系统，基于SpringBoot+MyBatis实现，采用Docker容器化部署。<a href="https://github.com/macrozheng/mall-learning" target="_blank" rel="noopener">mall-learning</a>：mall学习教程，架构、业务、技术要点全方位解析。</li><li><a href="https://github.com/lenve/vhr" target="_blank" rel="noopener">vhr</a>：微人事是一个前后端分离的人力资源管理系统，项目采用SpringBoot+Vue开发。</li><li><a href="https://github.com/wuyouzhuguli/FEBS-Shiro" target="_blank" rel="noopener">FEBS-Shiro</a>：Spring Boot 2.2.1，Shiro1.4.2 &amp; Layui 2.5.5 权限管理系统。</li><li><a href="https://github.com/linlinjava/litemall" target="_blank" rel="noopener">litemall</a>：又一个小商城。litemall = Spring Boot后端 + Vue管理员前端 + 微信小程序用户前端 + Vue用户移动端。</li><li><a href="https://github.com/elunez/eladmin" target="_blank" rel="noopener">eladmin</a>：项目基于 Spring Boot 2.1.0 、 Jpa、 Spring Security、redis、Vue的前后端分离的后台管理系统，项目采用分模块开发方式。</li><li><a href="https://github.com/wxiaoqi/Spring-Cloud-Admin" target="_blank" rel="noopener">Spring-Cloud-Admin</a>：Cloud-Admin是国内首个基于Spring Cloud微服务化开发平台，可以作为后端服务的开发脚手架，前端采用vue-element-admin组件。</li><li><a href="https://gitee.com/xiandafu/springboot-plus" target="_blank" rel="noopener">springboot-plus</a>：国内首个基于SpringBoot 2的开源管理后台系统，聚焦核心功能，提供健壮内核，支持多个数据库，容易搭建，容易修改。</li><li><a href="https://gitee.com/mumu-osc/NiceFish" target="_blank" rel="noopener">NiceFish</a>：NiceFish（美人鱼） 是一个系列项目，目标是示范前后端分离的开发模式:前端浏览器、移动端、Electron 环境中的各种开发模式。</li><li><a href="https://gitee.com/owenwangwen/open-capacity-platform" target="_blank" rel="noopener">open-capacity-platform</a>：简称ocp是基于layui+springcloud的企业级微服务框架(用户权限管理，配置中心管理，应用管理，….),其核心的设计目标是分离前后端，快速开发部署。</li><li><a href="https://gitee.com/wukongcrm/72crm-java" target="_blank" rel="noopener">72crm-java</a>：悟空CRM-基于jfinal+vue+ElementUI的前后端分离CRM系统。</li><li><a href="https://github.com/paascloud/paascloud-master" target="_blank" rel="noopener">paascloud-master</a>：spring cloud + vue + oAuth2.0全家桶实战，前后端分离模拟商城，完整的购物流程、后端运营平台，可以实现快速搭建企业级微服务项目。支持微信登录等三方登录。</li><li><a href="https://github.com/tomsun28/bootshiro" target="_blank" rel="noopener">bootshiro</a>：基于 springboot+shiro+jwt 的真正restful URL资源无状态认证权限管理(前后端分离,前端项目usthe)。</li><li><a href="https://github.com/Exrick/xmall" target="_blank" rel="noopener">xmall</a>：基于SOA架构的分布式电商购物商城 前后端分离 前台商城:Vue全家桶 后台管理系统。</li></ul><h4 id="4-后端控制面板"><a href="#4-后端控制面板" class="headerlink" title="4.后端控制面板"></a>4.后端控制面板</h4><ul><li><a href="https://github.com/ColorlibHQ/AdminLTE" target="_blank" rel="noopener">AdminLTE</a>：AdminLTE - Free admin dashboard template based on Bootstrap 4 &amp; 3。</li><li><a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noopener">vue-element-admin</a>：A magical vue admin</li><li><a href="https://github.com/tabler/tabler" target="_blank" rel="noopener">tabler</a>：Tabler is free and open-source HTML Dashboard UI Kit built on Bootstrap</li><li><a href="https://github.com/ColorlibHQ/gentelella" target="_blank" rel="noopener">gentelella</a>：Free Bootstrap 4 Admin Dashboard Template</li><li><a href="https://github.com/iview/iview-admin" target="_blank" rel="noopener">iview-admin</a>：Vue 2.0 admin management system template based on iView</li><li><a href="https://github.com/ant-design/ant-design-pro/blob/master/README.zh-CN.md" target="_blank" rel="noopener">ant-design-pro</a>：开箱即用的中台前端/设计解决方案</li><li><a href="https://github.com/fanjyy/nepadmin" target="_blank" rel="noopener">nepadmin</a>：nepadmin 单页面后台模版，基于 layui 2.4.0。</li></ul><h4 id="5-大数据"><a href="#5-大数据" class="headerlink" title="5.大数据"></a>5.大数据</h4><ul><li><a href="https://github.com/heibaiying/BigData-Notes" target="_blank" rel="noopener">BigData-Notes</a>：大数据入门指南。</li><li><a href="https://github.com/zhisheng17/flink-learning" target="_blank" rel="noopener">flink-learning</a>：含 Flink 入门、概念、原理、实战、性能调优、源码解析等内容。</li></ul><h4 id="6-电子书"><a href="#6-电子书" class="headerlink" title="6.电子书"></a>6.电子书</h4><ul><li><a href="https://github.com/justjavac/free-programming-books-zh_CN" target="_blank" rel="noopener">free-programming-books-zh_CN</a>： 免费的计算机编程类中文书籍</li><li><a href="https://github.com/jobbole/awesome-programming-books" target="_blank" rel="noopener">awesome-programming-books</a>：经典编程书籍大全</li><li><a href="https://github.com/chai2010/advanced-go-programming-book" target="_blank" rel="noopener">advanced-go-programming-book</a>：《Go语言高级编程》开源图书</li></ul><h4 id="7-其它"><a href="#7-其它" class="headerlink" title="7.其它"></a>7.其它</h4><ul><li><a href="https://github.com/zhangdaiscott/jeecg-boot" target="_blank" rel="noopener">jeecg-boot</a>：一款基于代码生成器的JAVA快速开发平台，开源界“小普元”超越传统商业企业级开发平台！</li><li><a href="https://github.com/thinkgem/jeesite" target="_blank" rel="noopener">jeesite</a>：JeeSite 是一个企业信息化开发基础平台，Java企业应用开源框架，Java EE（J2EE）快速开发框架。</li><li><a href="https://gitee.com/JeeHuangBingGui/jeeSpringCloud" target="_blank" rel="noopener">JeeSpringCloud</a>：基于SpringBoot2.0的后台权限管理系统界面简洁美观敏捷开发系统架构。</li><li><a href="https://github.com/TheBund1st/daming/wiki" target="_blank" rel="noopener">daming</a>：Sms verification component for spring boot project。</li></ul><h3 id="三-后端"><a href="#三-后端" class="headerlink" title="三.后端"></a>三.后端</h3><h4 id="1-博客"><a href="#1-博客" class="headerlink" title="1.博客"></a>1.博客</h4><ul><li><a href="https://javaguide.cn/" target="_blank" rel="noopener">JavaGuide</a>：开源项目 JavaGuide (60k+ Star) 项目作者维护。</li><li><a href="http://www.iocoder.cn/" target="_blank" rel="noopener">芋道源码</a>：纯源码解析博客。</li><li><a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>：Java、微服务、python技术博客。</li><li><a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>：Java、微服务等技术博客。</li><li><a href="https://www.fangzhipeng.com/" target="_blank" rel="noopener">方志朋的专栏</a>：Java、微服务等技术博客。</li><li><a href="https://www.hollischuang.com/" target="_blank" rel="noopener">Hollis</a>：Java、框架、分布式等技术博客。</li><li><a href="http://www.tianxiaobo.com/" target="_blank" rel="noopener">田小波</a>：Java、Java框架、中间件等源码解析。</li><li><a href="http://www.itmuch.com/" target="_blank" rel="noopener">周立</a>：Docker、微服务等技术博客。</li><li><a href="https://javadoop.com/" target="_blank" rel="noopener">Javadoop</a>：Java并发、JVM、开源框架等源码分析博客。</li><li><a href="https://mrbird.cc/" target="_blank" rel="noopener">MrBird</a>：循序渐进，学习Spring Boot、 Shiro、Spring Cloud、Spring Security 等技术博客。</li><li><a href="https://www.bysocket.com/" target="_blank" rel="noopener">泥瓦匠BYSocket</a>：spring boot 实践学习等技术博客。</li><li><a href="https://www.cnkirito.moe/" target="_blank" rel="noopener">徐靖峰</a>：中间件技术博客。</li><li><a href="http://www.javaboy.org/" target="_blank" rel="noopener">江南一点雨</a>：java等技术博客。</li><li><a href="https://github.com/timqian/chinese-independent-blogs" target="_blank" rel="noopener">中文独立博客列表</a>：按照 feedly 上的订阅数据排了个先后顺序组织博客和推荐内容。</li></ul><h4 id="2-编程规范"><a href="#2-编程规范" class="headerlink" title="2.编程规范"></a>2.编程规范</h4><ul><li><a href="https://github.com/alibaba/p3c" target="_blank" rel="noopener">p3c</a>：Alibaba Java Coding Guidelines pmd implements and IDE plugin。</li><li><a href="http://hawstein.com/2014/01/20/google-java-style/#SFBasic" target="_blank" rel="noopener">Google Java 编程风格指南</a></li><li><a href="https://xwjie.github.io/rule/" target="_blank" rel="noopener">程序员你为什么这么累</a></li></ul><h4 id="3-开发工具"><a href="#3-开发工具" class="headerlink" title="3.开发工具"></a>3.开发工具</h4><table><thead><tr><th align="center">模拟API请求</th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center"><a href="https://insomnia.rest/download/#windows" target="_blank" rel="noopener">insomnia</a></td><td align="center"><a href="https://www.getpostman.com/" target="_blank" rel="noopener">postman</a></td><td align="center"><a href="https://github.com/liyasthomas/postwoman" target="_blank" rel="noopener">postwoman</a></td><td align="center"><a href="http://yapi.demo.qunar.com/" target="_blank" rel="noopener">YAPI</a></td></tr><tr><td align="center">接口文档</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"><a href="https://swagger.io/" target="_blank" rel="noopener">swagger</a></td><td align="center"><a href="https://www.showdoc.cc/" target="_blank" rel="noopener">showdoc</a></td><td align="center"><a href="https://www.iminho.me/" target="_blank" rel="noopener">mindoc</a></td><td align="center"><a href="https://easydoc.xyz/#/" target="_blank" rel="noopener">easydoc</a></td></tr><tr><td align="center">windows优质应用程序及工具列表</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"><a href="https://github.com/Awesome-Windows/Awesome/blob/master/README-cn.md" target="_blank" rel="noopener">Awesome</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h4 id="4-技术学习"><a href="#4-技术学习" class="headerlink" title="4.技术学习"></a>4.技术学习</h4><table><thead><tr><th align="center">Linux</th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center"><a href="https://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></td><td align="center"><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/index.html" target="_blank" rel="noopener">Linux Tools</a></td><td align="center"><a href="https://github.com/judasn/Linux-Tutorial" target="_blank" rel="noopener">Linux-Tutorial</a></td></tr><tr><td align="center"></td><td align="center"><a href="https://zhuanlan.zhihu.com/p/39157806" target="_blank" rel="noopener">Linux基础知识</a></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">Git</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">git-简明指南</a></td><td align="center"><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html#diff" target="_blank" rel="noopener">图解Git</a></td><td align="center"><a href="https://backlog.com/git-tutorial/cn/" target="_blank" rel="noopener">猴子都能懂的GIT入门</a></td></tr><tr><td align="center">设计模式</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"><a href="https://github.com/iluwatar/java-design-patterns" target="_blank" rel="noopener">java-design-patterns</a></td><td align="center"><a href="https://github.com/me115/design_patterns" target="_blank" rel="noopener">design_patterns</a></td><td align="center"></td></tr><tr><td align="center">Spring Security OAuth</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"><a href="https://github.com/eugenp/tutorials" target="_blank" rel="noopener">tutorials</a></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">Spring Boot</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"><a href="https://github.com/Snailclimb/springboot-guide" target="_blank" rel="noopener">springboot-guide</a></td><td align="center"><a href="https://github.com/wuyouzhuguli/SpringAll" target="_blank" rel="noopener">SpringAll</a></td><td align="center"><a href="https://github.com/JeffLi1993/springboot-learning-example" target="_blank" rel="noopener">springboot-learning-example</a></td></tr><tr><td align="center"></td><td align="center"><a href="https://github.com/xkcoding/spring-boot-demo" target="_blank" rel="noopener">spring-boot-demo</a></td><td align="center"><a href="https://github.com/YunaiV/SpringBoot-Labs" target="_blank" rel="noopener">SpringBoot-Labs</a></td><td align="center"></td></tr><tr><td align="center">Spring Cloud</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"><a href="https://github.com/forezp/SpringCloudLearning" target="_blank" rel="noopener">SpringCloudLearning</a></td><td align="center"><a href="https://github.com/dyc87112/SpringCloud-Learning" target="_blank" rel="noopener">SpringCloud-Learning</a></td><td align="center"><a href="https://github.com/yinjihuan/spring-cloud" target="_blank" rel="noopener">spring-cloud</a></td></tr><tr><td align="center"></td><td align="center"><a href="https://github.com/ityouknow/spring-cloud-examples" target="_blank" rel="noopener">spring-cloud-examples</a></td><td align="center"><a href="https://github.com/zhoutaoo/SpringCloud" target="_blank" rel="noopener">SpringCloud</a></td><td align="center"></td></tr></tbody></table><h3 id="四-前端"><a href="#四-前端" class="headerlink" title="四.前端"></a>四.前端</h3><h4 id="1-网站"><a href="#1-网站" class="headerlink" title="1.网站"></a>1.网站</h4><table><thead><tr><th align="center"></th><th align="center"><a href="https://www.runoob.com/" target="_blank" rel="noopener">RUNOOB</a></th><th align="center"><a href="https://www.w3cschool.cn/" target="_blank" rel="noopener">W3Cschool</a></th><th align="center"><a href="https://www.awesomes.cn/" target="_blank" rel="noopener">Awesomes</a></th><th align="center"><a href="https://www.bootcdn.cn/" target="_blank" rel="noopener">BootCDN</a></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">js库</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"><a href="http://nodejs.cn/" target="_blank" rel="noopener">node</a></td><td align="center"><a href="https://www.npmjs.cn" target="_blank" rel="noopener">npm</a></td><td align="center"><a href="https://www.webpackjs.com/" target="_blank" rel="noopener">webpack</a></td><td align="center"><a href="https://yarn.bootcss.com/" target="_blank" rel="noopener">yarn</a></td><td align="center"><a href="http://caibaojian.com/es6/" target="_blank" rel="noopener">ES6</a></td><td align="center"><a href="https://cn.eslint.org/" target="_blank" rel="noopener">ESLint</a></td></tr><tr><td align="center"></td><td align="center"><a href="http://mockjs.com/" target="_blank" rel="noopener">mock</a></td><td align="center"><a href="https://www.easy-mock.com/login" target="_blank" rel="noopener">easy mock</a></td><td align="center"><a href="http://www.axios-js.com/" target="_blank" rel="noopener">axios</a></td><td align="center"><a href="https://jquery.com/" target="_blank" rel="noopener">jquery</a></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">主流</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vue</a></td><td align="center"><a href="http://react.html.cn/" target="_blank" rel="noopener">react</a></td><td align="center"><a href="https://angularjs.org/" target="_blank" rel="noopener">angular</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">UI框架</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"><a href="https://www.bootcss.com/" target="_blank" rel="noopener">bootstrap</a></td><td align="center"><a href="https://www.layui.com/" target="_blank" rel="noopener">layui</a></td><td align="center"><a href="https://element.eleme.cn/#/zh-CN" target="_blank" rel="noopener">element</a></td><td align="center"><a href="https://www.iviewui.com/" target="_blank" rel="noopener">iview</a></td><td align="center"><a href="https://www.jqueryui.org.cn/" target="_blank" rel="noopener">jQuery UI</a></td><td align="center"><a href="https://semantic-ui.com/" target="_blank" rel="noopener">Semantic UI</a></td></tr><tr><td align="center">其余</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"><a href="https://www.babeljs.cn/" target="_blank" rel="noopener">babel</a></td><td align="center"><a href="https://www.gulpjs.com.cn/" target="_blank" rel="noopener">gulp</a></td><td align="center"><a href="https://www.gruntjs.net/" target="_blank" rel="noopener">grunt</a></td><td align="center"><a href="http://lesscss.cn/" target="_blank" rel="noopener">less</a></td><td align="center"><a href="https://www.sass.hk/" target="_blank" rel="noopener">sass</a></td><td align="center"></td></tr><tr><td align="center">icon</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"><a href="https://www.iconfont.cn/?spm=a313x.7781069.1998910419.d4d0a486a" target="_blank" rel="noopener">iconfont</a></td><td align="center"><a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">Font Awesome</a></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">配色</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"><a href="https://colorhunt.co/palettes/trendy" target="_blank" rel="noopener">Color Hunt</a></td><td align="center"><a href="https://flatuicolors.com/" target="_blank" rel="noopener">flatuicolors</a></td><td align="center"><a href="https://www.materialpalette.com/indigo/light-green" target="_blank" rel="noopener">materialpalette</a></td><td align="center"><a href="https://www.bootcss.com/p/websafecolors/" target="_blank" rel="noopener">WEB安全色</a></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">图表</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"><a href="https://echarts.apache.org/zh/index.html" target="_blank" rel="noopener">echarts</a></td><td align="center"><a href="https://www.highcharts.com.cn/" target="_blank" rel="noopener">highcharts</a></td><td align="center"><a href="https://github.com/chartjs/Chart.js" target="_blank" rel="noopener">Chart.js</a></td><td align="center"><a href="https://github.com/morrisjs/morris.js" target="_blank" rel="noopener">morris.js</a></td><td align="center"><a href="https://github.com/flot/flot" target="_blank" rel="noopener">flot</a></td><td align="center"><a href="http://www.jfree.org/jfreechart/" target="_blank" rel="noopener">JFreeChart</a></td></tr></tbody></table><h4 id="2-博客"><a href="#2-博客" class="headerlink" title="2.博客"></a>2.博客</h4><ul><li><a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰的官方网站</a>：Java、Python、JS、SQL及Git等技术博客</li><li><a href="https://www.zhangxinxu.com/wordpress/" target="_blank" rel="noopener">鑫空间,鑫生活</a>：专注web前端偏前领域</li><li><a href="https://www.zouyesheng.com/" target="_blank" rel="noopener">yeshengzou</a>：前端等技术学习笔记</li><li><a href="http://blog.cssforest.org/" target="_blank" rel="noopener">cssforest.org</a>：记录关于css笔记</li><li><a href="https://www.cnblogs.com/snandy/" target="_blank" rel="noopener">snandy</a>：前端技术博客</li><li><a href="https://www.cnblogs.com/Darren_code/" target="_blank" rel="noopener">Darren</a>：关注前端技术</li></ul><h4 id="3-插件"><a href="#3-插件" class="headerlink" title="3.插件"></a>3.插件</h4><p>日期相关：</p><ul><li><a href="http://momentjs.cn/" target="_blank" rel="noopener">moment</a>：JavaScript 日期处理类库。</li><li><a href="https://github.com/smalot/bootstrap-datetimepicker" target="_blank" rel="noopener">bootstrap-datetimepicker</a>：日期插件。</li><li><a href="https://www.daterangepicker.cn/" target="_blank" rel="noopener">daterangepicker</a>：用于选择日期范围，日期和时间的JavaScript组件。</li></ul><p>下拉选：</p><ul><li><a href="https://developer.snapappointments.com/bootstrap-select/examples/" target="_blank" rel="noopener">bootstrap-select</a>：下拉选插件。</li><li><a href="https://github.com/select2/select2" target="_blank" rel="noopener">select2</a>：Select2 is a jQuery based replacement for select boxes. </li></ul><p>表格：</p><ul><li><a href="https://www.bootstrap-table.com.cn/" target="_blank" rel="noopener">bootstrap-table</a>：表格插件。</li><li><a href="https://datatables.club/" target="_blank" rel="noopener">datatables</a>：一款jquery表格插件。</li></ul><p>文件上传：</p><ul><li><a href="https://github.com/kartik-v/bootstrap-fileinput" target="_blank" rel="noopener">bootstrap-fileinput</a>：An enhanced HTML 5 file input for Bootstrap 4.x./3.x with file preview, multiple selection, and more features.</li><li><a href="http://fex.baidu.com/webuploader/getting-started.html" target="_blank" rel="noopener">webuploader</a>：以HTML5为主，FLASH为辅的现代文件上传组件</li></ul><p>单选/复选美化：</p><ul><li><a href="https://github.com/fntneves/jquery-labelauty" target="_blank" rel="noopener">jquery-labelauty</a>：单选框/复选框美化组件</li></ul><p>树形表格：</p><ul><li><a href="https://github.com/ludo/jquery-treetable" target="_blank" rel="noopener">jquery-treetable</a>：jQuery plugin to show a tree structure in a table</li><li><a href="https://gitee.com/whvse/treetable-lay/tree/master/" target="_blank" rel="noopener">treetable-lay</a>：Layui的树形表格treeTable，支持异步加载(懒加载)、复选框联动、折叠状态记忆。</li></ul><h3 id="五-网站模板"><a href="#五-网站模板" class="headerlink" title="五.网站模板"></a>五.网站模板</h3><h4 id="1-jquery库和模板"><a href="#1-jquery库和模板" class="headerlink" title="1.jquery库和模板"></a>1.jquery库和模板</h4><table><thead><tr><th align="center"><a href="http://www.jq-school.com/" target="_blank" rel="noopener">jQuery-school</a></th><th align="center"><a href="http://www.htmleaf.com/" target="_blank" rel="noopener">jQuery之家</a></th><th align="center"><a href="http://www.jq22.com/" target="_blank" rel="noopener">jQuery插件库</a></th><th align="center"><a href="http://www.ijquery.cn/" target="_blank" rel="noopener">爱上JQuery</a></th></tr></thead><tbody><tr><td align="center"><a href="https://www.17sucai.com/" target="_blank" rel="noopener">17素材</a></td><td align="center"><a href="http://www.a-ui.cn/nav/#f103" target="_blank" rel="noopener">Web前端</a></td><td align="center"><a href="https://www.sucaihuo.com/" target="_blank" rel="noopener">素材火</a></td><td align="center"></td></tr></tbody></table><h4 id="2-高清图库"><a href="#2-高清图库" class="headerlink" title="2.高清图库"></a>2.高清图库</h4><table><thead><tr><th align="center"><a href="https://pixabay.com/" target="_blank" rel="noopener">pixabay</a></th><th align="center"><a href="https://www.pexels.com/" target="_blank" rel="noopener">Pexels</a></th><th align="center"><a href="https://foter.com/" target="_blank" rel="noopener">foter</a></th></tr></thead><tbody><tr><td align="center"><a href="https://www.58pic.com/" target="_blank" rel="noopener">千图网</a></td><td align="center"><a href="http://www.lanrentuku.com/" target="_blank" rel="noopener">懒人图库</a></td><td align="center"><a href="http://www.51yuansu.com/" target="_blank" rel="noopener">觅元素</a></td></tr></tbody></table><h4 id="3-PPT模板"><a href="#3-PPT模板" class="headerlink" title="3.PPT模板"></a>3.PPT模板</h4><table><thead><tr><th align="center"><a href="http://www.pooban.com/" target="_blank" rel="noopener">扑奔网</a></th><th align="center"><a href="https://www.docer.com/?m_superkey=homepage" target="_blank" rel="noopener">稻壳儿</a></th><th align="center"><a href="http://www.tretars.com/" target="_blank" rel="noopener">比格PPT</a></th><th align="center"><a href="http://www.officeplus.cn/List.shtml?cat=PPT" target="_blank" rel="noopener">OfficePLUS.cn</a></th><th align="center"><a href="http://www.51pptmoban.com/ppt/" target="_blank" rel="noopener">51PPT模板</a></th><th align="center"><a href="http://www.pptfans.cn/" target="_blank" rel="noopener">pptfans</a></th></tr></thead><tbody><tr><td align="center"><a href="https://www.pptstore.net/case/" target="_blank" rel="noopener">pptstore</a></td><td align="center"><a href="https://www.500d.me/ppt/" target="_blank" rel="noopener">五百丁简历</a></td><td align="center"><a href="https://www.ppt20.com/" target="_blank" rel="noopener">变色龙</a></td><td align="center"><a href="https://www.ooopic.com/pptmuban/" target="_blank" rel="noopener">我图网</a></td><td align="center"></td><td align="center"></td></tr></tbody></table><h4 id="4-应用程序下载"><a href="#4-应用程序下载" class="headerlink" title="4.应用程序下载"></a>4.应用程序下载</h4><table><thead><tr><th align="center"><a href="https://www.appcgn.com/" target="_blank" rel="noopener">软件缘</a></th><th align="center"><a href="https://www.portablesoft.org/" target="_blank" rel="noopener">PortableSoft</a></th><th align="center"><a href="http://www.dayanzai.me/" target="_blank" rel="noopener">大眼仔</a></th></tr></thead><tbody><tr><td align="center"><a href="https://www.appinn.com/" target="_blank" rel="noopener">小众软件</a></td><td align="center"><a href="https://www.newasp.net/" target="_blank" rel="noopener">新云下载</a></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存区域</title>
      <link href="/2019/11/26/java-nei-cun-qu-yu/"/>
      <url>/2019/11/26/java-nei-cun-qu-yu/</url>
      
        <content type="html"><![CDATA[<p>该篇文章﻿转载于：<a href="https://snailclimb.gitee.io/javaguide/#/docs/java/jvm/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F" target="_blank" rel="noopener">Java 内存区域详解</a> , 每一小节内容最后红色字体部分为个人阅读后的笔记</p><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h3><p>因为 Java 程序员把内存控制权利交给 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将会是一个非常艰巨的任务。</p><h3 id="二-运行时数据区域"><a href="#二-运行时数据区域" class="headerlink" title="二.运行时数据区域"></a>二.运行时数据区域</h3><p>Java 虚拟机在执行 Java 程序的过程中会把它管理的<strong>内存划分成若干个不同的数据区域</strong>。JDK. 1.8 和之前的版本略有不同。</p><p><strong>JDK1.8之前：</strong></p><div align="center"><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191231192113566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></div><p><strong>JDK1.8：</strong></p><div align="center">  <p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191231192124935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></div><div style="color:red;"><ul><li>线程私有的：程序计数器、虚拟机栈、本地方法栈</li><li>线程共享的：堆、方法区、直接内存(非运行时数据区的一部分)</li><li>JDK8 将方法区从运行时数据区移到直接内存，并改名为元空间</li></ul></div><h4 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1.程序计数器"></a>1.程序计数器</h4><p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。<strong>字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。</strong></p><p>另外，<strong>为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</strong></p><p><strong>从上面的介绍中我们知道程序计数器主要有两个作用：</strong></p><ol><li>字节码解释器通过改变程序计数器来<strong>依次读取指令</strong>，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</li><li>在多线程的情况下，程序计数器<strong>用于记录当前线程执行的位置</strong>，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</li></ol><p><strong>注意：程序计数器是唯一一个不会出现 OutOfMemoryError 的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。</strong></p><p><strong>小结：</strong><div style="color:red;"></div></p><ul><li>字节码解释器通过改变程序计数器来依次读取指令，实现代码流程控制</li><li>多线程情况下，程序计数器用于记录当前线程执行的位置，知道线程切换回来运行到哪了</li></ul><h4 id="2-Java虚拟机栈"><a href="#2-Java虚拟机栈" class="headerlink" title="2.Java虚拟机栈"></a>2.Java虚拟机栈</h4><p><strong>与程序计数器一样，Java 虚拟机栈也是线程私有的，它的生命周期和线程相同，描述的是 Java 方法执行的内存模型，每次方法调用的数据都是通过栈传递的。</strong></p><p><strong>Java 内存可以粗糙的区分为堆内存（Heap）和栈内存 (Stack),其中栈就是现在说的虚拟机栈，或者说是虚拟机栈中局部变量表部分。</strong> （实际上，Java 虚拟机栈是由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。）</p><p><strong>局部变量表主要存放了编译器可知的各种数据类型</strong>（boolean、byte、char、short、int、float、long、double）、<strong>对象引用</strong>（reference 类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。</p><p><strong>Java 虚拟机栈会出现两种错误：StackOverFlowError 和 OutOfMemoryError。</strong></p><ul><li><strong>StackOverFlowError：</strong> 若 Java 虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 StackOverFlowError 错误。</li><li><strong>OutOfMemoryError：</strong> 若 Java 虚拟机栈的内存大小允许动态扩展，且当线程请求栈时内存用完了，无法再动态扩展了，此时抛出 OutOfMemoryError 错误。</li></ul><p>Java 虚拟机栈也是线程私有的，每个线程都有各自的 Java 虚拟机栈，而且随着线程的创建而创建，随着线程的死亡而死亡。</p><p><strong>扩展：那么方法/函数如何调用？</strong></p><p>Java 栈可用类比数据结构中栈，Java 栈中保存的主要内容是栈帧，每一次函数调用都会有一个对应的栈帧被压入 Java 栈，每一个函数调用结束后，都会有一个栈帧被弹出。Java 方法有两种返回方式：return语句 和 抛出异常。不管哪种返回方式都会导致栈帧被弹出。</p><p><strong>小结：</strong><div style="color:red;"></div></p><ul><li>Java 虚拟机栈描述Java 方法执行的内存模型，每次方法调用的数据都是通过栈传递的</li><li>Java 虚拟机栈是由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。平常说的栈内存也就是局部变量表，局部变量表主要存放基本数据类型，对象引用</li><li>每次函数调用都会有对应的栈帧被压入，每次函数调用结束都会有对应的栈帧被弹出</li><li>会出现 StackOverFlowError 和 OutOfMemoryError 两种错误</li></ul><h4 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3.本地方法栈"></a>3.本地方法栈</h4><p>和虚拟机栈所发挥的作用非常相似，区别是： <strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。</strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</p><p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</p><p>方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 StackOverFlowError 和 OutOfMemoryError 两种错误。</p><p><strong>小结：</strong><div style="color:red;"></div></p><ul><li>虚拟机栈为虚拟机执行 Java 方法服务，而本地方法栈则为虚拟机使用到的 Native 方法服务</li><li>其他和虚拟机栈发挥的作用相似</li></ul><h4 id="4-堆"><a href="#4-堆" class="headerlink" title="4.堆"></a>4.堆</h4><p>Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。<strong>此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。</strong></p><p>Java 堆是垃圾收集器管理的主要区域，因此也被称作<strong>GC 堆（Garbage Collected Heap）</strong>.从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以 Java 堆还可以细分为：新生代和老年代：再细致一点有：Eden 空间、From Survivor、To Survivor 空间等。<strong>进一步划分的目的是更好地回收内存，或者更快地分配内存。</strong></p><p>在 JDK 7 版本及JDK 7 版本之前，堆内存被通常被分为下面三部分：</p><ol><li>新生代内存(Young Generation)</li><li>老生代(Old Generation)</li><li>永生代(Permanent Generation)</li></ol><p><img src="/loading.gif" data-original="/2019/11/26/java-nei-cun-qu-yu/009.png" alt></p><p>JDK 8 版本之后方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是直接内存。</p><p><img src="/loading.gif" data-original="/2019/11/26/java-nei-cun-qu-yu/010.png" alt></p><p><strong>上图所示的 Eden 区、两个 Survivor 区都属于新生代（为了区分，这两个 Survivor 区域按照顺序被命名为 from 和 to），中间一层属于老年代。</strong></p><p>大部分情况，对象都会首先在 Eden 区域分配，在一次新生代垃圾回收后，如果对象还存活，则会进入 s0 或者 s1，并且对象的年龄还会加  1(Eden 区-&gt;Survivor 区后对象的初始年龄变为 1)，当它的年龄增加到一定程度（默认为 15 岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 <code>-XX:MaxTenuringThreshold</code> 来设置。</p><blockquote><p>修正（<a href="https://github.com/Snailclimb/JavaGuide/issues/552" target="_blank" rel="noopener">issue552</a>）：“Hotspot遍历所有对象时，按照年龄从小到大对其所占用的大小进行累积，当累积的某个年龄大小超过了survivor区的一半时，取这个年龄和MaxTenuringThreshold中更小的一个值，作为新的晋升年龄阈值”。</p><p><strong>动态年龄计算的代码如下</strong></p><pre class=" language-c++"><code class="language-c++">uint ageTable::compute_tenuring_threshold(size_t survivor_capacity) {    //survivor_capacity是survivor空间的大小  size_t desired_survivor_size = (size_t)((((double) survivor_capacity)*TargetSurvivorRatio)/100);  size_t total = 0;  uint age = 1;  while (age < table_size) {    total += sizes[age];//sizes数组是每个年龄段对象大小    if (total > desired_survivor_size) break;    age++;  }  uint result = age < MaxTenuringThreshold ? age : MaxTenuringThreshold;    ...}</code></pre></blockquote><p>堆这里最容易出现的就是  OutOfMemoryError 错误，并且出现这种错误之后的表现形式还会有几种，比如：</p><ol><li><strong><code>OutOfMemoryError: GC Overhead Limit Exceeded</code></strong> ： 当JVM花太多时间执行垃圾回收并且只能回收很少的堆空间时，就会发生此错误。</li><li><strong><code>java.lang.OutOfMemoryError: Java heap space</code></strong> :假如在创建新的对象时, 堆内存中的空间不足以存放新创建的对象, 就会引发<code>java.lang.OutOfMemoryError: Java heap space</code> 错误。(和本机物理内存无关，和你配置的对内存大小有关！)</li><li>……</li></ol><p>推荐阅读：<a href="http://www.cnblogs.com/paddix/p/5309550.html" target="_blank" rel="noopener">Java8内存模型—永久代(PermGen)和元空间(Metaspace)</a></p><p><strong>小结：</strong><div style="color:red;"></div></p><ul><li>几乎所有对象实例及数组都在堆里分配内存</li><li>JDK7及以前：Java 堆可分为 新生代、老年代和永久代，新生代 又可分为 Eden 空间、From Survivor、To Survivor 空间等；JDK8及之后永久代被元空间取代，元空间使用的是直接内存(永久代使用的是JVM的堆内存空间，而元空间使用的是物理内存，直接受到本机的物理内存限制)</li><li>堆容易出现 OutOfMemoryError 错误</li></ul><h4 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5.方法区"></a>5.方法区</h4><p>方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然 <strong>Java 虚拟机规范把方法区描述为堆的一个逻辑部分</strong>，但是它却有一个别名叫做 <strong>Non-Heap（非堆）</strong>，目的应该是与 Java 堆区分开来。</p><p>方法区也被称为永久代。很多人都会分不清方法区和永久代的关系，为此我也查阅了文献。</p><h5 id="2-5-1-方法区和永久代的关系"><a href="#2-5-1-方法区和永久代的关系" class="headerlink" title="2.5.1 方法区和永久代的关系"></a>2.5.1 方法区和永久代的关系</h5><blockquote><p>《Java 虚拟机规范》只是规定了有方法区这么个概念和它的作用，并没有规定如何去实现它。那么，在不同的 JVM 上方法区的实现肯定是不同的了。  <strong>方法区和永久代的关系很像 Java 中接口和类的关系，类实现了接口，而永久代就是 HotSpot 虚拟机对虚拟机规范中方法区的一种实现方式。</strong> 也就是说，永久代是 HotSpot 的概念，方法区是 Java 虚拟机规范中的定义，是一种规范，而永久代是一种实现，一个是标准一个是实现，其他的虚拟机实现并没有永久代这一说法。</p></blockquote><h5 id="2-5-2-常用参数"><a href="#2-5-2-常用参数" class="headerlink" title="2.5.2 常用参数"></a>2.5.2 常用参数</h5><p>JDK 1.8 之前永久代还没被彻底移除的时候通常通过下面这些参数来调节方法区大小</p><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>XX<span class="token operator">:</span>PermSize<span class="token operator">=</span>N <span class="token comment" spellcheck="true">//方法区 (永久代) 初始大小</span><span class="token operator">-</span>XX<span class="token operator">:</span>MaxPermSize<span class="token operator">=</span>N <span class="token comment" spellcheck="true">//方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen</span></code></pre><p>相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。</p><p>JDK 1.8 的时候，方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是直接内存。</p><p>下面是一些常用参数：</p><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>XX<span class="token operator">:</span>MetaspaceSize<span class="token operator">=</span>N <span class="token comment" spellcheck="true">//设置 Metaspace 的初始（和最小大小）</span><span class="token operator">-</span>XX<span class="token operator">:</span>MaxMetaspaceSize<span class="token operator">=</span>N <span class="token comment" spellcheck="true">//设置 Metaspace 的最大大小</span></code></pre><p>与永久代很大的不同就是，如果不指定大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。</p><h5 id="2-5-3-为什么要将永久代-PermGen-替换为元空间-MetaSpace-呢"><a href="#2-5-3-为什么要将永久代-PermGen-替换为元空间-MetaSpace-呢" class="headerlink" title="2.5.3 为什么要将永久代 (PermGen) 替换为元空间 (MetaSpace) 呢?"></a>2.5.3 为什么要将永久代 (PermGen) 替换为元空间 (MetaSpace) 呢?</h5><ol><li>整个永久代有一个 JVM 本身设置固定大小上限，无法进行调整，而元空间使用的是直接内存，受本机可用内存的限制，虽然元空间仍旧可能溢出，但是比原来出现的几率会更小。</li></ol><blockquote><p>当你元空间溢出时会得到如下错误： <code>java.lang.OutOfMemoryError: MetaSpace</code></p></blockquote><p>你可以使用 <code>-XX：MaxMetaspaceSize</code> 标志设置最大元空间大小，默认值为 unlimited，这意味着它只受系统内存的限制。<code>-XX：MetaspaceSize</code> 调整标志定义元空间的初始大小如果未指定此标志，则 Metaspace 将根据运行时的应用程序需求动态地重新调整大小。  </p><ol><li>元空间里面存放的是类的元数据，这样加载多少类的元数据就不由 <code>MaxPermSize</code> 控制了, 而由系统的实际可用空间来控制，这样能加载的类就更多了。  </li><li>在 JDK8，合并 HotSpot 和 JRockit 的代码时, JRockit 从来没有一个叫永久代的东西, 合并之后就没有必要额外的设置这么一个永久代的地方了。</li></ol><p><strong>小结：</strong><div style="color:red;"></div></p><ul><li>方法区存放已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</li><li>方法区为堆的一个逻辑部分，别名为Non-Heap(非堆)，也称为永久代。方法区是 java 虚拟机规范中的定义，是一种规范，而永久代是一种实现，其他虚拟机实现并没有永久代说法</li><li>JDK8 方法区(HotSpot 的永久代)被元空间取代，使用直接内存，这样能加载的类就更多了，存放的是类的元数据。但若不指定元空间大小，随着类的创建，虚拟机会耗尽所有可用的系统内存</li></ul><h4 id="6-运行时常量池"><a href="#6-运行时常量池" class="headerlink" title="6.运行时常量池"></a>6.运行时常量池</h4><p>运行时常量池是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池信息（用于存放编译期生成的各种字面量和符号引用）</p><p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 错误。</p><p><strong>JDK1.7 及之后版本的 JVM 已经将运行时常量池从方法区中移了出来，在 Java 堆（Heap）中开辟了一块区域存放运行时常量池。</strong> </p><p><img src="/loading.gif" data-original="/2019/11/26/java-nei-cun-qu-yu/011.png" alt><br>——图片来源：<a href="https://blog.csdn.net/wangbiao007/article/details/78545189" target="_blank" rel="noopener">https://blog.csdn.net/wangbiao007/article/details/78545189</a></p><p>推荐阅读：<a href="https://blog.csdn.net/qq_26222859/article/details/73135660" target="_blank" rel="noopener">Java 中几种常量池的区分</a></p><p><strong>小结：</strong><div style="color:red;"></div></p><ul><li>运行时常量池是方法区的一部分，存放编译期生成的各种字面量(字符串、常量、基本数据类型值、其他)和符号引用(类和结构的完全限定名、字段名和描述符、方法名和描述符)</li><li>JDK7及之后 运行时常量池从方法区移出到堆中</li></ul><h4 id="7-直接内存"><a href="#7-直接内存" class="headerlink" title="7.直接内存"></a>7.直接内存</h4><p><strong>直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 OutOfMemoryError 错误出现。</strong></p><p>JDK1.4 中新加入的 <strong>NIO(New Input/Output) 类</strong>，引入了一种基于<strong>通道（Channel）</strong> 与<strong>缓存区（Buffer）</strong> 的 I/O 方式，它可以直接使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样就能在一些场景中显著提高性能，因为<strong>避免了在 Java 堆和 Native 堆之间来回复制数据</strong>。</p><p>本机直接内存的分配不会受到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。</p><p><strong>小结：</strong><div style="color:red;"></div></p><ul><li>直接内存不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，内存分配不会受到java堆的限制，但也会受到本机内存大小以及处理器寻址空间的限制</li></ul><h3 id="三-HotSpot虚拟机对象探秘"><a href="#三-HotSpot虚拟机对象探秘" class="headerlink" title="三.HotSpot虚拟机对象探秘"></a>三.HotSpot虚拟机对象探秘</h3><p>通过上面的介绍我们大概知道了虚拟机的内存情况，下面我们来详细的了解一下 HotSpot 虚拟机在 Java 堆中对象分配、布局和访问的全过程。</p><h4 id="3-1-对象的创建"><a href="#3-1-对象的创建" class="headerlink" title="3.1 对象的创建"></a>3.1 对象的创建</h4><p>下图便是 Java 对象的创建过程，我建议最好是能默写出来，并且要掌握每一步在做什么。<br><img src="/loading.gif" data-original="/2019/11/26/java-nei-cun-qu-yu/012.png" alt></p><h5 id="Step1-类加载检查"><a href="#Step1-类加载检查" class="headerlink" title="Step1:类加载检查"></a>Step1:类加载检查</h5><p> 虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p><h5 id="Step2-分配内存"><a href="#Step2-分配内存" class="headerlink" title="Step2:分配内存"></a>Step2:分配内存</h5><p>在<strong>类加载检查</strong>通过后，接下来虚拟机将为新生对象<strong>分配内存</strong>。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。<strong>分配方式</strong>有 <strong>“指针碰撞”</strong> 和 <strong>“空闲列表”</strong> 两种，<strong>选择那种分配方式由 Java 堆是否规整决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定</strong>。</p><p><strong>内存分配的两种方式：（补充内容，需要掌握）</strong></p><p>选择以上两种方式中的哪一种，取决于 Java 堆内存是否规整。而 Java 堆内存是否规整，取决于 GC 收集器的算法是”标记-清除”，还是”标记-整理”（也称作”标记-压缩”），值得注意的是，复制算法内存也是规整的</p><p><img src="/loading.gif" data-original="/2019/11/26/java-nei-cun-qu-yu/013.png" alt></p><p><strong>内存分配并发问题（补充内容，需要掌握）</strong></p><p>在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情，作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：</p><ul><li><strong>CAS+失败重试：</strong> CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。<strong>虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。</strong></li><li><strong>TLAB：</strong> 为每一个线程预先在 Eden 区分配一块儿内存，JVM 在给线程中的对象分配内存时，首先在 TLAB 分配，当对象大于 TLAB 中的剩余内存或 TLAB 的内存已用尽时，再采用上述的 CAS 进行内存分配</li></ul><h5 id="Step3-初始化零值"><a href="#Step3-初始化零值" class="headerlink" title="Step3:初始化零值"></a>Step3:初始化零值</h5><p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。</p><h5 id="Step4-设置对象头"><a href="#Step4-设置对象头" class="headerlink" title="Step4:设置对象头"></a>Step4:设置对象头</h5><p>初始化零值完成之后，<strong>虚拟机要对对象进行必要的设置</strong>，例如这个对象是那个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 <strong>这些信息存放在对象头中。</strong> 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p><h5 id="Step5-执行-init-方法"><a href="#Step5-执行-init-方法" class="headerlink" title="Step5:执行 init 方法"></a>Step5:执行 init 方法</h5><p> 在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，<code>&lt;init&gt;</code> 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 <code>&lt;init&gt;</code> 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</p><p><strong>小结：</strong><div style="color:red;"></div></p><ul><li>类加载检查：虚拟机遇到new指令，检查常量池中是否能定位到这个类的符号引用及代表的类是否已被加载  –  <strong>比如孕妇是否在医院，若不在医院立马联系孕妇到医院</strong></li><li>分配内存：虚拟机把一块确定大小的内存从java堆中划分出来  –  <strong>比如小孩出生</strong></li><li>初始化零值：虚拟机将分配的内存空间都初始化为零值(不包括对象头)  –  <strong>比如小孩出生后的属性</strong></li><li>设置对象头：虚拟机要对对象头进行必要的设置(对象是哪个类的实例、如何找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息)  –  <strong>比如小孩出生后注册身份：出生日期，出生地址，身份证号等</strong></li><li>执行init方法：执行new指令后会接着执行<code>&lt;init&gt;</code>方法，将对象进行初始化  –  <strong>显示的赋值如小孩姓名、年龄等</strong></li></ul><h4 id="3-2-对象的内存布局"><a href="#3-2-对象的内存布局" class="headerlink" title="3.2 对象的内存布局"></a>3.2 对象的内存布局</h4><p>在 Hotspot 虚拟机中，对象在内存中的布局可以分为 3 块区域：<strong>对象头</strong>、<strong>实例数据</strong>和<strong>对齐填充</strong>。</p><p><strong>Hotspot 虚拟机的对象头包括两部分信息</strong>，<strong>第一部分用于存储对象自身的自身运行时数据</strong>（哈希码、GC 分代年龄、锁状态标志等等），<strong>另一部分是类型指针</strong>，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是那个类的实例。</p><p><strong>实例数据部分是对象真正存储的有效信息</strong>，也是在程序中所定义的各种类型的字段内容。</p><p><strong>对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。</strong> 因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，换句话说就是对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p><p><strong>小结:</strong> <div style="color:red;"></div></p><ul><li>对象在内存中的布局可分为: 对象头, 实例数据 和 对齐填充</li><li>对象头一部分信息用于存储对象自身的运行时数据,另一部分是类型指针</li><li>实例数据部分存储各种类型的字段内容</li><li>对齐填充部分不是必须的,仅仅起占位作用</li></ul><h4 id="3-3-对象的访问定位"><a href="#3-3-对象的访问定位" class="headerlink" title="3.3 对象的访问定位"></a>3.3 对象的访问定位</h4><p>建立对象就是为了使用对象，我们的 Java 程序通过栈上的 reference 数据来操作堆上的具体对象。对象的访问方式由虚拟机实现而定，目前主流的访问方式有<strong>①使用句柄</strong>和<strong>②直接指针</strong>两种：</p><ol><li><p><strong>句柄：</strong> 如果使用句柄的话，那么 Java 堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息；</p><p><img src="/loading.gif" data-original="/2019/11/26/java-nei-cun-qu-yu/014.png" alt></p></li><li><p><strong>直接指针：</strong>  如果使用直接指针访问，那么 Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而 reference 中存储的直接就是对象的地址。</p></li></ol><p><img src="/loading.gif" data-original="/2019/11/26/java-nei-cun-qu-yu/015.png" alt></p><p><strong>这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。</strong></p><p><strong>小结:</strong> <div style="color:red;"></div></p><ul><li>对象的主流访问方式有句柄和直接指针两种</li><li>句柄: reference存储对象的句柄地址,句柄中包含对象实例数据与类型数据各自具体地址</li><li>直接指针: reference直接存储对象的地址</li></ul><h3 id="四-重点补充内容"><a href="#四-重点补充内容" class="headerlink" title="四.重点补充内容"></a>四.重点补充内容</h3><h4 id="4-1-String-类和常量池"><a href="#4-1-String-类和常量池" class="headerlink" title="4.1 String 类和常量池"></a>4.1 String 类和常量池</h4><p><strong>String 对象的两种创建方式：</strong></p><pre class=" language-java"><code class="language-java">String str1 <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先检查字符串常量池中有没有"abcd"，如果字符串常量池中没有，则创建一个，然后 str1 指向字符串常量池中的对象，如果有，则直接将 str1 指向"abcd""；</span>String str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//堆中创建一个新的对象</span>String str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//堆中创建一个新的对象</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token operator">==</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token operator">==</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre><p>这两种不同的创建方法是有差别的。</p><ul><li>第一种方式是在常量池中拿对象；</li><li>第二种方式是直接在堆内存空间创建一个新的对象。</li></ul><p>记住一点：<strong>只要使用 new 方法，便需要创建新的对象。</strong></p><p>再给大家一个图应该更容易理解，图片来源：<a href="https://www.journaldev.com/797/what-is-java-string-pool" target="_blank" rel="noopener">https://www.journaldev.com/797/what-is-java-string-pool</a>：</p><p><img src="/loading.gif" data-original="/2019/11/26/java-nei-cun-qu-yu/016.png" alt></p><p><strong>String 类型的常量池比较特殊。它的主要使用方法有两种：</strong></p><ul><li>直接使用双引号声明出来的 String 对象会直接存储在常量池中。</li><li>如果不是用双引号声明的 String 对象，可以使用 String 提供的 intern 方法。String.intern() 是一个 Native 方法，它的作用是：如果运行时常量池中已经包含一个等于此 String 对象内容的字符串，则返回常量池中该字符串的引用；如果没有，JDK1.7之前（不包含1.7）的处理方式是在常量池中创建与此 String 内容相同的字符串，并返回常量池中创建的字符串的引用，JDK1.7以及之后的处理方式是在常量池中记录此字符串的引用，并返回该引用。</li></ul><pre class=" language-java"><code class="language-java">          String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"计算机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String s3 <span class="token operator">=</span> <span class="token string">"计算机"</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算机</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false，因为一个是堆内存中的 String 对象一个是常量池中的 String 对象，</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true，因为两个都是常量池中的 String 对象</span></code></pre><p><strong>字符串拼接:</strong></p><pre class=" language-java"><code class="language-java">          String str1 <span class="token operator">=</span> <span class="token string">"str"</span><span class="token punctuation">;</span>          String str2 <span class="token operator">=</span> <span class="token string">"ing"</span><span class="token punctuation">;</span>          String str3 <span class="token operator">=</span> <span class="token string">"str"</span> <span class="token operator">+</span> <span class="token string">"ing"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//常量池中的对象</span>          String str4 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在堆上创建的新的对象      </span>          String str5 <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//常量池中的对象</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4 <span class="token operator">==</span> str5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre><p><img src="/loading.gif" data-original="/2019/11/26/java-nei-cun-qu-yu/017.png" alt></p><p>尽量避免多个字符串拼接，因为这样会重新创建对象。如果需要改变字符串的话，可以使用 StringBuilder 或者 StringBuffer。</p><p><strong>小结:</strong> <div style="color:red;"></div></p><ul><li>使用双引号声明的String对象在常量池中. 只要使用new方法,便会在堆中创建新的对象</li><li>常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量</li><li>只要其中有一个是变量，结果就在堆中</li><li>如果拼接的结果或使用关键字new的String对象调用intern()方法，返回值就在常量池中</li></ul><h4 id="4-2-String-s1-new-String-“abc”-这句话创建了几个字符串对象？"><a href="#4-2-String-s1-new-String-“abc”-这句话创建了几个字符串对象？" class="headerlink" title="4.2 String s1 = new String(“abc”);这句话创建了几个字符串对象？"></a>4.2 String s1 = new String(“abc”);这句话创建了几个字符串对象？</h4><p><strong>将创建 1 或 2 个字符串。如果池中已存在字符串常量“abc”，则只会在堆空间创建一个字符串常量“abc”。如果池中没有字符串常量“abc”，那么它将首先在池中创建，然后在堆空间中创建，因此将创建总共 2 个字符串对象。</strong></p><p><strong>验证：</strong></p><pre class=" language-java"><code class="language-java">        String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 堆内存的地址值</span>        String s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出 false,因为一个是堆内存，一个是常量池的内存，故两者是不同的。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出 true</span></code></pre><p><strong>结果：</strong></p><pre><code>falsetrue</code></pre><h4 id="4-3-8-种基本类型的包装类和常量池"><a href="#4-3-8-种基本类型的包装类和常量池" class="headerlink" title="4.3 8 种基本类型的包装类和常量池"></a>4.3 8 种基本类型的包装类和常量池</h4><ul><li><strong>Java 基本类型的包装类的大部分都实现了常量池技术，即 Byte,Short,Integer,Long,Character,Boolean；这 6 种包装类默认创建了数值[-128，127] 的相应类型的缓存数据，但是超出此范围仍然会去创建新的对象。</strong> 为啥把缓存设置为[-128，127]区间？（<a href="https://github.com/Snailclimb/JavaGuide/issues/461" target="_blank" rel="noopener">参见issue/461</a>）性能和资源之间的权衡。</li><li><strong>两种浮点数类型的包装类 Float,Double 并没有实现常量池技术。</strong></li></ul><pre class=" language-java"><code class="language-java">        Integer i1 <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>        Integer i2 <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出 true</span>        Integer i11 <span class="token operator">=</span> <span class="token number">333</span><span class="token punctuation">;</span>        Integer i22 <span class="token operator">=</span> <span class="token number">333</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i11 <span class="token operator">==</span> i22<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出 false</span>        Double i3 <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span>        Double i4 <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3 <span class="token operator">==</span> i4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出 false</span></code></pre><p><strong>Integer 缓存源代码：</strong> </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***此方法将始终缓存-128 到 127（包括端点）范围内的值，并可以缓存此范围之外的其他值。*/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> IntegerCache<span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> IntegerCache<span class="token punctuation">.</span>high<span class="token punctuation">)</span>            <span class="token keyword">return</span> IntegerCache<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>IntegerCache<span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>应用场景：</strong></p><ol><li>Integer i1=40；Java 在编译的时候会直接将代码封装成 Integer i1=Integer.valueOf(40);，从而使用常量池中的对象。</li><li>Integer i1 = new Integer(40);这种情况下会创建新的对象。</li></ol><pre class=" language-java"><code class="language-java">  Integer i1 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>  Integer i2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token operator">==</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出 false</span></code></pre><p><strong>Integer 比较更丰富的一个例子:</strong></p><pre class=" language-java"><code class="language-java">  Integer i1 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>  Integer i2 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>  Integer i3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  Integer i4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Integer i5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Integer i6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i1=i2   "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i1=i2+i3   "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2 <span class="token operator">+</span> i3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i1=i4   "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i1 <span class="token operator">==</span> i4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i4=i5   "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i4 <span class="token operator">==</span> i5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i4=i5+i6   "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i4 <span class="token operator">==</span> i5 <span class="token operator">+</span> i6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"40=i5+i6   "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">==</span> i5 <span class="token operator">+</span> i6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     </code></pre><p>结果：</p><pre><code>i1=i2   truei1=i2+i3   truei1=i4   falsei4=i5   falsei4=i5+i6   true40=i5+i6   true</code></pre><p>解释：</p><p>语句 i4 == i5 + i6，因为+这个操作符不适用于 Integer 对象，首先 i5 和 i6 进行自动拆箱操作，进行数值相加，即 i4 == 40。然后 Integer 对象无法与数值进行直接比较，所以 i4 自动拆箱转为 int 值 40，最终这条语句转为 40 == 40 进行数值比较。</p><p><strong>小结:</strong> <div style="color:red;"></div></p><ul><li>基本数据类型的包装类大部分实现了常量池技术,创建了数值[-128, 127]的相应类型的缓存数据,超过该范围会在堆中创建新的对象</li><li>包装类Float, Double没有实现常量池技术</li><li>比较两包装类值是否相等,建议使用equals方法</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li>《深入理解 Java 虚拟机：JVM 高级特性与最佳实践（第二版》</li><li>《实战 java 虚拟机》</li><li><a href="https://docs.oracle.com/javase/specs/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/index.html</a></li><li><a href="http://www.pointsoftware.ch/en/under-the-hood-runtime-data-areas-javas-memory-model/" target="_blank" rel="noopener">http://www.pointsoftware.ch/en/under-the-hood-runtime-data-areas-javas-memory-model/</a></li><li><a href="https://dzone.com/articles/jvm-permgen-%E2%80%93-where-art-thou" target="_blank" rel="noopener">https://dzone.com/articles/jvm-permgen-%E2%80%93-where-art-thou</a></li><li><a href="https://stackoverflow.com/questions/9095748/method-area-and-permgen" target="_blank" rel="noopener">https://stackoverflow.com/questions/9095748/method-area-and-permgen</a></li><li><a href="https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html" target="_blank" rel="noopener">深入解析String#intern</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/2019/11/19/wang-luo-bian-cheng/"/>
      <url>/2019/11/19/wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="一-网络编程概述"><a href="#一-网络编程概述" class="headerlink" title="一:网络编程概述"></a>一:网络编程概述</h3><ol><li>Java提供的网络类库，可以实现无痛的网络连接，联网的底层细节被隐藏在 Java 的本机安装系统里，由 JVM 进行控制。并且 Java 实现了一个跨平台的网络库， <strong>程序员面对的是一个统一的网络编程环境。</strong></li><li>计算机网络: 把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、共享硬件、软件、数据信息等资源.</li><li>网络编程的目的: <strong>直接或间接地通过网络协议与其它计算机实现数据交换，进行通讯。</strong></li><li>主要问题: <ol><li><strong>如何准确地定位网络上一台或多台主机；定位主机上特定的应用.</strong></li><li><strong>找到主机后如何可靠高效地进行数据传输.</strong></li></ol></li></ol><h3 id="二-通信要素概述"><a href="#二-通信要素概述" class="headerlink" title="二:通信要素概述"></a>二:通信要素概述</h3><h4 id="1-如何实现网络中的主机互相通信"><a href="#1-如何实现网络中的主机互相通信" class="headerlink" title="1.如何实现网络中的主机互相通信"></a>1.如何实现网络中的主机互相通信</h4><ol><li><strong>通信双方地址: IP 和 端口号</strong></li><li><strong>网络通信协议: OSI参考模型 和 TCP/IP参考模型(协议)</strong></li></ol><h4 id="2-网络通信协议"><a href="#2-网络通信协议" class="headerlink" title="2.网络通信协议"></a>2.网络通信协议</h4><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191124164205713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-数据传输"><a href="#3-数据传输" class="headerlink" title="3.数据传输"></a>3.数据传输</h4><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191124164212660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="三-IP和端口号"><a href="#三-IP和端口号" class="headerlink" title="三:IP和端口号"></a>三:IP和端口号</h3><h4 id="1-IP地址-InetAddress"><a href="#1-IP地址-InetAddress" class="headerlink" title="1.IP地址: InetAddress"></a>1.IP地址: InetAddress</h4><ol><li>唯一的标识 Internet 上的计算机（通信实体）</li><li>本地回环地址(hostAddress)：127.0.0.1 主机名(hostName)：localhost</li><li>IP地址分类方式1：<strong>IPV4 和 IPV6</strong><ol><li>IPV4: 4个字节组成,4个0-255. 2011年初已经用尽.以点分十进制表示,如192.168.0.1</li><li>IPV6: 16个字节组成, 128位,写成8个无符号整数, 每个整数用四个十六进制位表示,数之间用冒号(:)分开,如3ffe:3201:1401:1280:c8ff:fe4d:db39:1984</li></ol></li><li>IP地址分类方式2： <strong>公网地址( 万维网使用)和 私有地址( 局域网使用)。192.168.开头的就是私有址址，范围即为192.168.0.0–192.168.255.255，专门为组织机构内部使用</strong></li></ol><h4 id="2-端口号"><a href="#2-端口号" class="headerlink" title="2.端口号"></a>2.端口号</h4><ol><li>标识正在计算机上运行的进程（程序）,不同的进程有不同的端口号</li><li>被规定为一个 16 位的整数 0~65535</li><li>端口分类:<ol><li><strong>公认端口：0~1023</strong>。被预先定义的服务通信占用（如：HTTP占用端口80，FTP占用端口21，Telnet占用端口23）</li><li><strong>注册端口：1024~49151</strong>。分配给用户进程或应用程序。（如：Tomcat占用端口8080，MySQL占用端口3306，Oracle占用端口1521等）</li><li><strong>动态/ 私有端口：49152~65535</strong>.</li></ol></li></ol><p><strong>IP地址与端口号的组合得出一个网络套接字：Socket。</strong></p><h4 id="3-InetAddress类"><a href="#3-InetAddress类" class="headerlink" title="3.InetAddress类"></a>3.InetAddress类</h4><ol><li><p>Internet上的主机有两种方式表示地址：</p><p><strong>域名(hostName)</strong>：<a href="http://www.zhangligong.xyz" target="_blank" rel="noopener">www.zhangligong.xyz</a><br><strong>IP 地址(hostAddress)</strong>：220.250.64.225</p></li><li><p>InetAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address。</p></li><li><p>域名容易记忆，当在连接网络时输入一个主机的域名后，<strong>域名服务器(DNS)负责将域名转化成IP地址</strong>，这样才能和主机建立连接。(先找本机hosts，是否有输入的域名地址，没有的话，再通过DNS服务器，找主机。) ——- <strong>域名解析</strong></p></li><li><p>InetAddress 类没有提供公共的构造器，而是提供了如下几个静态方法来获取InetAddress 实例</p><p><code>public static InetAddress getLocalHost()</code><br><code>public static InetAddress getByName(String host)</code></p></li><li><p>InetAddress 提供了如下几个常用的方法</p><p><strong>public String getHostAddress()</strong> ：返回 IP 地址字符串（以文本表现形式）。<br><strong>public String getHostName()</strong> ：获取此 IP 地址的主机名<br><strong>public boolean isReachable(int timeout)</strong>： ：测试是否可以达到该地址</p></li><li><p>示例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>UnknownHostException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 一、网络编程中有两个主要的问题： * 1.如何准确地定位网络上一台或多台主机；定位主机上的特定的应用 * 2.找到主机后如何可靠高效地进行数据传输 * * 二、网络编程中的两个要素： * 1.对应问题一：IP和端口号 * 2.对应问题二：提供网络通信协议：TCP/IP参考模型（应用层、传输层、网络层、物理+数据链路层） * * 三、通信要素一：IP和端口号 * 1. IP:唯一的标识 Internet 上的计算机（通信实体） * 2. 在Java中使用InetAddress类代表IP * 3. IP分类：IPv4 和 IPv6 ; 万维网 和 局域网 * 4. 域名:   www.baidu.com   www.mi.com  www.sina.com  www.jd.com *            www.vip.com * 5. 本地回路地址：127.0.0.1 对应着：localhost * 6. 如何实例化InetAddress:两个方法：getByName(String host) 、 getLocalHost() *        两个常用方法：getHostName() / getHostAddress() * 7. 端口号：正在计算机上运行的进程。 * 要求：不同的进程有不同的端口号 * 范围：被规定为一个 16 位的整数 0~65535。 * 8. 端口号与IP地址的组合得出一个网络套接字：Socket * * @author zlg * @create 2019-10-16 1:01 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InetAdressTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ipTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//根据域名返回InetAddress对象</span>            InetAddress inet <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"zhangligong.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inet<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// zhangligong.com/220.250.64.225</span>            <span class="token comment" spellcheck="true">//获取本地ip</span>            InetAddress lh <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lh<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// localhost/127.0.0.1</span>            <span class="token comment" spellcheck="true">//获取本地ip</span>            InetAddress localHost <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localHost<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// IT-Xiaobai/169.254.34.219</span>            <span class="token comment" spellcheck="true">//获取IP名</span>            String hostName <span class="token operator">=</span> localHost<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// IT-Xiaobai</span>            <span class="token comment" spellcheck="true">//获取IP地址</span>            String hostAddress <span class="token operator">=</span> localHost<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hostAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 169.254.34.219</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="四-通信协议"><a href="#四-通信协议" class="headerlink" title="四:通信协议"></a>四:通信协议</h3><p><strong>计算机网络中实现通信必须有一些约定，即通信协议，对速率、传输代码、代码结构、传输控制步骤、出错控制等制定标准。</strong></p><h4 id="1-TCP-IP协议簇"><a href="#1-TCP-IP协议簇" class="headerlink" title="1.TCP/IP协议簇"></a>1.TCP/IP协议簇</h4><ol><li>传输层协议中有两个非常重要的协议：<strong>传输控制协议TCP(Transmission Control Protocol) 和 用户数据报协议UDP(User Datagram Protocol)</strong>。</li><li><strong>TCP/IP  以其两个主要协议：传输控制协议(TCP) 和网络互联协议(IP)</strong>而得名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。</li><li>IP(Internet Protocol)协议是<strong>网络层</strong>的主要协议，支持网间互连的数据通信。</li><li>TCP/IP协议模型从更实用的角度出发，形成了高效的四层体系结构，即 <strong>物理链路层、IP 层、传输层和应用层。</strong></li></ol><h4 id="2-TCP协议"><a href="#2-TCP协议" class="headerlink" title="2.TCP协议"></a>2.TCP协议</h4><ol><li>使用TCP协议前，须先<strong>建立TCP连接，形成传输数据通道</strong></li><li>传输前，采用“ <strong>三次握手</strong>”方式，<strong>点对点通信，是可靠的</strong></li><li>TCP协议进行通信的两个应用进程：<strong>客户端、服务端</strong></li><li>在连接中可<strong>进行大数据量的传输</strong></li><li>传输完毕，需<strong>释放已建立的连接，效率低</strong></li></ol><h4 id="3-UDP协议"><a href="#3-UDP协议" class="headerlink" title="3.UDP协议"></a>3.UDP协议</h4><ol><li>将数据、源、目的封装成数据包，<strong>不需要建立连接</strong></li><li>每个数据报的大小<strong>限制在64K内</strong></li><li>发送不管对方是否准备好，接收方收到也不确认，故是<strong>不可靠的</strong></li><li>可以广播发送</li><li>发送数据结束时<strong>无需释放资源，开销小，速度快</strong></li></ol><h4 id="4-TCP三次握手"><a href="#4-TCP三次握手" class="headerlink" title="4.TCP三次握手"></a>4.TCP三次握手</h4><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191124164236346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="5-TCP四次挥手"><a href="#5-TCP四次挥手" class="headerlink" title="5.TCP四次挥手"></a>5.TCP四次挥手</h4><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191124164246341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="6-Socket套接字"><a href="#6-Socket套接字" class="headerlink" title="6.Socket套接字"></a>6.Socket套接字</h4><ol><li><p><strong>网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符套接字。</strong></p></li><li><p>通信的两端都要有Socket，是两台机器间通信的端点。网络通信其实就是Socket间的通信。</p></li><li><p>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。</p></li><li><p>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端。</p></li><li><p>Socket分类：</p><ol><li><strong>流套接字（stream socket）：使用TCP提供可依赖的字节流服务</strong></li><li><strong>数据报套接字（datagram socket）：使用UDP提供“尽力而为”的数据报服务</strong></li></ol></li><li><p>常用API</p><p><strong>Socket 类的常用构造器 ：</strong></p><ul><li><code>public Socket(InetAddress address,int port)</code>创建一个流套接字并将其连接到指定IP地址的指定端口号。</li><li><code>public Socket(String host,int port)</code>创建一个流套接字并将其连接到指定主机上的指定端口号。</li></ul><p><strong>Socket 类的常用方法：</strong></p><ul><li><code>public InputStream getInputStream()</code>返回此套接字的输入流。可以用于接收网络消息</li><li><code>public OutputStream getOutputStream()</code>返回此套接字的输出流。可以用于发送网络消息</li><li><code>public InetAddress getInetAddress()</code>此套接字连接到的远程 IP 地址；如果套接字是未连接的，则返回 null。</li><li><code>public InetAddress getLocalAddress()</code>获取套接字绑定的本地地址。 即本端的IP-地址</li><li><code>public int getPort()</code>此套接字连接到的远程端口号；如果尚未连接套接字，则返回0。</li><li><code>public int getLocalPort()</code>返回此套接字绑定到的本地端口。 如果尚未绑定套接字，则返回-1。即本端的端口号。</li><li><code>public void close()</code>关闭此套接字。套接字被关闭后，便不可在以后的网络连接中使用（即无法重新连接或重新绑定）。需要创建新的套接字对象。 关闭此套接字也将会关闭该套接字的InputStream 和OutputStream。</li><li><code>public void shutdownInput()</code>如果在套接字上调用 shutdownInput() 后从套接字输入流读取内容，则流将返回 EOF（文件结束符）。即不能在从此套接字的输入流中接收任何数据。</li><li><code>public void shutdownOutput()</code>禁用此套接字的输出流。对于 TCP 套接字，任何以前写入的数据都将被发送，并且后跟 TCP 的正常连接终止序列。 如果在套接字上调用 shutdownOutput() 后写入套接字输出流，则该流将抛出 IOException。 即不能通过此套接字的输出流发送任何数据。</li></ul></li></ol><h3 id="五-TCP网络编程"><a href="#五-TCP网络编程" class="headerlink" title="五:TCP网络编程"></a>五:TCP网络编程</h3><h4 id="1-Socket的TCP编程"><a href="#1-Socket的TCP编程" class="headerlink" title="1.Socket的TCP编程"></a>1.Socket的TCP编程</h4><p>Java语言的基于套接字编程分为服务端编程和客户端编程，其通信模型如图所示：<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191124164710921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2-客服端Socket的工作过程"><a href="#2-客服端Socket的工作过程" class="headerlink" title="2.客服端Socket的工作过程"></a>2.客服端Socket的工作过程</h4><ol><li>创建 Socket ：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。<strong>创建的同时会自动向服务器方发起连接,若服务器端响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。</strong></li><li>打开连接到 Socket  的输入/ 出流： 使用 <strong>getInputStream()</strong>方法获得输入流，使用<strong>getOutputStream()</strong>方法获得输出流，进行数据传输.</li><li>按照一定的协议对 Socket 进行读/ 写操作：通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息），通过输出流将信息写入线程。</li><li>关闭 Socket：断开客户端到服务器的连接，释放线路</li></ol><h4 id="3-服务器程序的工作过程"><a href="#3-服务器程序的工作过程" class="headerlink" title="3.服务器程序的工作过程"></a>3.服务器程序的工作过程</h4><ol><li>调用 ServerSocket(int port) ：创建一个服务器端套接字，并绑定到指定端口上。用于监听客户端的请求。<strong>服务器必须事先建立一个等待客户请求建立套接字的 连接的ServerSocket 对象</strong>。</li><li>调用 accept()：<strong>监听连接请求，如果客户端请求连接，则接受连接，返回Socket通信套接字对象。</strong></li><li>调用该Socket 类对象的 getOutputStream() 和 和 getInputStream ()：获取输出流和输入流，开始网络数据的发送和接收。</li><li>关闭ServerSocket 和Socket 对象：客户端访问结束，关闭通信套接字。</li></ol><h4 id="4-示例"><a href="#4-示例" class="headerlink" title="4.示例"></a>4.示例</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ServerSocket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 实现TCP的网络编程 * 示例：从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给客户端。 * 并关闭相应的连接。 * * @author zlg * @create 2019-10-20 15:34 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCPTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 客户端     * @throws IOException     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clientTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建Socket对象，指明服务器端的ip和端口号</span>        Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8989</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获取一个输出流，用于输出数据</span>        OutputStream os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.创建缓冲流,用于读取文件</span>        BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"beauty.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.写出数据的操作,发送文件</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//关闭数据的输出(IO流是阻塞的)</span>        <span class="token comment" spellcheck="true">//会在流末尾写入一个标记,对方才能读到-1,否则对方的读取方法会一致阻塞</span>        socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.接收来自于服务器端的数据，并显示到控制台上</span>        InputStream is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len2<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>len2 <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6.资源的关闭</span>        baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭socket, is,os意味着也关闭了</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 服务端     * @throws IOException     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serverTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建服务器端的ServerSocket，指明自己的端口号</span>        ServerSocket ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8989</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.调用accept()表示接收来自于客户端的socket</span>        <span class="token comment" spellcheck="true">//监听一个客服端的连接,该方法是个阻塞方法,若没有连接,会一直等待</span>        Socket socket <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.获取输入流</span>        InputStream is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.创建输出流,用于保存文件</span>        BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"beauty_dest.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.读取数据,保存文件到本地</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"照片已保存!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6.服务器端给予客户端反馈</span>        OutputStream os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好,美美,你发的照片已收到!"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//7.关闭资源</span>        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//不再接受任何客服端通信</span>        ss<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="六-UDP网络编程"><a href="#六-UDP网络编程" class="headerlink" title="六:UDP网络编程"></a>六:UDP网络编程</h3><h4 id="1-UDP网络通信"><a href="#1-UDP网络通信" class="headerlink" title="1.UDP网络通信"></a>1.UDP网络通信</h4><ol><li>类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序。</li><li>UDP数据报通过数据报套接字 DatagramSocket 发送和接收，<strong>系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</strong></li><li>DatagramPacket 对象封装了UDP数据报，在数据报中包含了<strong>发送端的IP地址和端口号以及接收端的IP地址和端口号。</strong></li><li>UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接。如同发快递包裹一样。</li></ol><h4 id="2-DatagramSocket类"><a href="#2-DatagramSocket类" class="headerlink" title="2.DatagramSocket类"></a>2.DatagramSocket类</h4><p><strong>常用方法</strong></p><ul><li><code>public DatagramSocket(int port)</code>创建数据报套接字并将其绑定到本地主机上的指定端口。套接字将被<br>绑定到通配符地址，IP 地址由内核来选择。</li><li><code>public DatagramSocket(int port,InetAddress laddr)</code>创建数据报套接字，将其绑定到指定的本地地址。本地端口必须在 0 到 65535 之间（包括两者）。如果 IP 地址为 0.0.0.0，套接字将被绑定到通配符地址，IP 地址由内核选择。</li><li><code>public void close()</code>关闭此数据报套接字。</li><li><code>public void send(DatagramPacket p)</code>从此套接字发送数据报包。DatagramPacket 包含的信息指示：将要发送的数据、其长度、远程主机的IP 地址和远程主机的端口号。</li><li><code>public void receive(DatagramPacket p)</code>从此套接字接收数据报包。当此方法返回时，DatagramPacket的缓冲区填充了接收的数据。数据报包也包含发送方的 IP 地址和发送方机器上的端口号。 此方法在接收到数据报前一直阻塞。数据报包对象的 length 字段包含所接收信息的长度。如果信息比包的长度长，该信息将被截短。</li><li><code>public InetAddress getLocalAddress()</code>获取套接字绑定的本地地址。</li><li><code>public int getLocalPort()</code>返回此套接字绑定的本地主机上的端口号。</li><li><code>public InetAddress getInetAddress()</code>返回此套接字连接的地址。如果套接字未连接，则返回null。</li><li><code>public int getPort()</code>返回此套接字的端口。如果套接字未连接，则返回-1。</li></ul><h4 id="3-DatagramPacket类"><a href="#3-DatagramPacket类" class="headerlink" title="3.DatagramPacket类"></a>3.DatagramPacket类</h4><p><strong>常用方法</strong></p><ul><li><code>public DatagramPacket(byte[] buf,int length)</code>构造 DatagramPacket，用来接收长度为 length 的数据包。 length 参数必须小于等于 buf.length。</li><li><code>public DatagramPacket(byte[] buf,int length,InetAddress address,int port)</code>构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。length参数必须小于等于buf.length。</li><li><code>public InetAddress getAddress()</code>返回某台机器的 IP 地址，此数据报将要发往该机器或者是从该机器接收到的。</li><li><code>public int getPort()</code>返回某台远程主机的端口号，此数据报将要发往该主机或者是从该主机接收到的。</li><li><code>public byte[] getData()</code>返回数据缓冲区。接收到的或将要发送的数据从缓冲区中的偏移量 offset 处开始，持续 length 长度。</li><li><code>public int getLength()</code>返回将要发送或接收到的数据的长度。</li></ul><h4 id="4-流程"><a href="#4-流程" class="headerlink" title="4.流程"></a>4.流程</h4><ol><li>DatagramSocket 与 DatagramPacket</li><li>建立发送端,接受端</li><li>建立数据包</li><li>调用Socket的发送,接受方法</li><li>关闭Socket</li></ol><p><strong>发送端与接收端是两个独立的运行程序.</strong></p><h4 id="5-示例"><a href="#5-示例" class="headerlink" title="5.示例"></a>5.示例</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>DatagramPacket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>DatagramSocket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetAddress<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 实现UDP协议的网络编程 * * @author zlg * @create 2019-10-20 17:10 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 发送者     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">senderTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DatagramSocket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.创建DatagramSocket对象</span>            socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.创建数据包,存储数据</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token string">"你好,我使用UDP传输数据给你了"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DatagramPacket packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">,</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8989</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.发送数据包</span>            socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 接收者     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiverTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DatagramSocket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.创建DatagramSocket对象</span>            socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">8989</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.创建数据包,接受发送过来的数据,发送多少,存储多少</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            DatagramPacket packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.接受数据,保存在packet中</span>            socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.打印输出接受到的数据</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="七-URL网络编程"><a href="#七-URL网络编程" class="headerlink" title="七:URL网络编程"></a>七:URL网络编程</h3><h4 id="1-URL类"><a href="#1-URL类" class="headerlink" title="1.URL类"></a>1.URL类</h4><ol><li><p><strong>URL(Uniform Resource Locator)：统一资源定位符，它表示 Internet 上 某一资源的地址。</strong></p></li><li><p>通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www，ftp站点。浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。</p></li><li><p>URL的基本结构由5部分组成：</p><ol><li><strong>&lt; 传输协议&gt;://&lt; 主机名&gt;:&lt; 端口号&gt;/&lt; 文件名&gt;# 片段名?参数列表</strong></li><li>片段名：即锚点，例如看小说，直接定位到章节</li><li>参数列表格式：参数名=参数值&amp;参数名=参数值….</li></ol></li><li><p>URL类构造器:</p><ol><li><code>public URL (String spec)</code>：通过一个表示URL地址的字符串可以构造一个URL对象。例<br>如：URL url = new URL (“<a href="http://www.zhangligong.xyz/&quot;" target="_blank" rel="noopener">http://www.zhangligong.xyz/&quot;</a>);</li><li><code>public URL(URL context, String spec)</code>：通过基 URL 和相对 URL 构造一个 URL 对象。<br>例如：URL downloadUrl = new URL(url, “download.html”)</li><li><code>public URL(String protocol, String host, String file)</code>; 例如：new URL(“http”,<br>“<a href="http://www.zhangligong.xyz&quot;" target="_blank" rel="noopener">www.zhangligong.xyz&quot;</a>, “download. html”);</li><li><code>public URL(String protocol, String host, int port, String file)</code>; 例如: URL gamelan = new<br>URL(“http”, “<a href="http://www.zhangligong.xyz&quot;" target="_blank" rel="noopener">www.zhangligong.xyz&quot;</a>, 80, “download.html”);</li></ol><p>URL类的构造器都声明抛出非运行时异常，必须要对这一异常进行处理，通常是用 try-catch 语句进行捕获。</p></li><li><p>URL类常用方法</p><ol><li><code>public String getProtocol( )</code> 获取该URL的协议名</li><li><code>public String getHost( )</code> 获取该URL的主机名</li><li><code>public String getPort( )</code> 获取该URL的端口号</li><li><code>public String getPath( )</code> <strong>获取该URL的文件路径</strong></li><li><code>public String getFile( )</code> 获取该URL的文件名</li><li><code>public String getQuery( )</code> <strong>获取该URL的查询名</strong></li></ol></li></ol><h4 id="2-URL类示例"><a href="#2-URL类示例" class="headerlink" title="2.URL类示例"></a>2.URL类示例</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取URL对象的相关属性信息</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/helloworld/index.html?username=jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//          1.获取该URL的协议名</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// http</span><span class="token comment" spellcheck="true">//          2.获取该URL的主机名</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// localhost</span><span class="token comment" spellcheck="true">//          3.获取该URL的端口号</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 8080</span><span class="token comment" spellcheck="true">//          4.获取该URL的文件路径</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// /helloworld/index.html</span><span class="token comment" spellcheck="true">//          5.获取该URL的文件名</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// /helloworld/index.html?username=jack</span><span class="token comment" spellcheck="true">//          6.获取该URL的查询名</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// username=jack</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedURLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h4 id="3-URLConnection类"><a href="#3-URLConnection类" class="headerlink" title="3.URLConnection类"></a>3.URLConnection类</h4><ol><li><strong>URL的方法 openStream()：能从网络上读取数据</strong></li><li>若希望输出数据，例如向服务器端的 CGI （公共网关接口-Common GatewayInterface-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一些数据，则必须先与URL建立连接，然后才能对其进行读写，此时需要使用URLConnection 。</li><li>URLConnection：<strong>表示到URL所引用的远程对象的连接。当与一个URL建立连接时，首先要在一个 URL 对象上通过方法 openConnection() 生成对应的 URLConnection对象。</strong>如果连接过程失败，将产生IOException.</li><li>通过URLConnection对象获取的<strong>输入流和输出流</strong>，即可以与现有的CGI程序进行交互。</li></ol><h4 id="4-URLConnection类示例"><a href="#4-URLConnection类示例" class="headerlink" title="4.URLConnection类示例"></a>4.URLConnection类示例</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 获取url定位的资源,保存到本地</span>        <span class="token comment" spellcheck="true">//1.创建url对象</span>        URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/helloworld/index.html?username=jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建Http协议的rulConnection对象</span>        HttpURLConnection urlConnection <span class="token operator">=</span> <span class="token punctuation">(</span>HttpURLConnection<span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.进行连接</span>        urlConnection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.获取输入流</span>        InputStream is <span class="token operator">=</span> urlConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.创建输出流</span>        BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"index_dest.html"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6.数据处理,将数据保存到本地</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"资源下载完成!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//7.关闭资源</span>        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        urlConnection<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-URI-URL-URN区别"><a href="#5-URI-URL-URN区别" class="headerlink" title="5.URI,URL,URN区别"></a>5.URI,URL,URN区别</h4><p><strong>URI，是uniform resource identifier，统一资源标识符</strong>，用来唯一的标识一个资源。而<strong>URL是uniform resource locator，统一资源定位符</strong>，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。而<strong>URN，uniform resource name，统一资源命名</strong>，是通过名字来标识资源，比如mailto:<a href="mailto:java-net@java.sun.com" target="_blank" rel="noopener">java-net@java.sun.com</a>。也就是说，<strong>URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。</strong></p><p>在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而<strong>URL类</strong>则不仅符合语义，还包含了定位该资源的信息，因此它<strong>不能是相对的</strong></p><h3 id="八-小结"><a href="#八-小结" class="headerlink" title="八:小结"></a>八:小结</h3><ol><li>计算机具有唯一的<strong>IP地址</strong>，这样不同的主机可以互相区分</li><li><strong>端口号</strong>是对一个服务的访问场所，它用于区分同一物理计算机上的多个服务。</li><li><strong>套接字</strong>用于连接客户端和服务器，客户端和服务器之间的每个通信会话使用一个不同的套接字。TCP协议用于实现面向连接的会话。</li><li>Java 用 <strong>InetAddress 对象</strong>表示 IP地址，该对象里有两个字段：主机名(String) 和 IP 地址(int)。</li><li><strong>类 Socket 和 ServerSocket</strong> 实现了基于TCP协议的客户端－服务器程序。Socket是客户端和服务器之间的一个连接，连接创建的细节被隐藏了。这个连接提供了一个<strong>安全的数据传输通道</strong>，这是因为 TCP 协议可以解决数据在传送过程中的丢失、损坏、重复、乱序以及网络拥挤等问题，它保证数据可靠的传送。</li><li><strong>类 URL 和 URLConnection</strong> 提供了最高级网络应用。URL 的网络资源的位置来同一表示Internet 上各种网络资源。通过URL对象可以创建当前应用程序和 URL 表示的网络资源之间的连接，这样当前程序就可以<strong>读取网络资源数据</strong>，或者把自己的数据传送到网络上去。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java新特性之JDK8</title>
      <link href="/2019/11/12/jdk8/"/>
      <url>/2019/11/12/jdk8/</url>
      
        <content type="html"><![CDATA[<h3 id="一-Java8新特性简介"><a href="#一-Java8新特性简介" class="headerlink" title="一.Java8新特性简介"></a>一.Java8新特性简介</h3><p>Java8 是Oracle于<strong>2014年3月</strong>发布的一个重要版本，其API在现存的接口上引入了非常多的新方法. 自从<strong>2017年9月</strong> 21日 Java9 正式发布之时，Oracle 就宣布今后会按照<strong>每六个月</strong>一次的节奏进行更新. Oracle 将以<strong>三年</strong>为周期发布长期支持版本(long term support).</p><p>这篇文章主要从以下几点介绍 Java8 新特性,其它点没有涉及到的可以阅读参考链接中的文章.</p><ul><li>面向对象：接口的增强(静态方法、默认方法)</li><li>常用类:  新的时间和日期API(LocalDataTime、Instant、DataTimeFormat等)</li><li>集合：ArrayList、HashMap实例化数组容量和底层原理等改变</li><li>函数式接口：Lambda表达式、方法引用、构造器引用</li><li>Stream API：并行流、串行流</li><li>Optional类：最大化减少空指针异常</li></ul><p>由于在<strong>面向对象, 常用类, 集合</strong> 这三篇文章中分别介绍了前三点, 这里就不再一一介绍了.这里再进行补充一下接口的默认方法与静态方法.</p><h3 id="二-接口中的默认方法与静态方法"><a href="#二-接口中的默认方法与静态方法" class="headerlink" title="二.接口中的默认方法与静态方法"></a>二.接口中的默认方法与静态方法</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><p>在Java8以前，接口中只能有<strong>抽象方法</strong>(public abstract 修饰的方法)跟<strong>全局静态常量</strong>(public static final 常量  )；但是在Java8中，允许接口中包含具有具体实现的方法，该方法称为 “默认方法”，<strong>默认方法使用 <code>default</code> 关键字修饰，其次，Java8中，接口中还允许添加静态方法。</strong></p><h4 id="2-默认方法"><a href="#2-默认方法" class="headerlink" title="2.默认方法"></a>2.默认方法</h4><p>比如:List接口中sort()方法:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...其他成员</span>    <span class="token comment" spellcheck="true">// 默认方法</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span>Comparator<span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        ListIterator<span class="token operator">&lt;</span>E<span class="token operator">></span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object e <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到，这个新增的sort方法有方法体，由default修饰符修饰，这就是接口的默认方法。默认方法不是static的,必须由接口的实例来调用.</p><p><strong>和抽象类的区别:</strong></p><ul><li>一个类只能继承一个抽象类；但是一个类可以实现多个接口。</li><li>抽象类有实例变量，而接口只能有类变量</li></ul><p><strong>解决冲突:</strong></p><p>随着默认方法在Java8中的引入，有可能出现一个类继承了多个签名一样的方法。这种情况下，类会选择使用哪一个函数呢？为解决这种多继承关系，Java8提供了下面三条规则：</p><ol><li><strong>类中的方法优先级最高</strong>，类或父类中声明的方法的优先级高于接口中任何声明为默认方法的优先级。</li><li>如果第一条无法判断，那么<strong>子接口的优先级更高</strong>：方法签名相同时，优先选择拥有最具体实现的默认方法的接口， 即如果B继承了A，那么B就比A更加具体。</li><li>最后，如果还是无法判断，<strong>继承了多个接口的类必须通过 显式覆盖 和调用期望的方法</strong>， 显式地选择使用哪一个默认方法的实现。</li></ol><p><strong>示例:</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 以下几个接口和类不在一个文件中,只是为了方便观看和书写</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello from A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// A的子接口</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello from B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// A的实现类</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">implements</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// A的实现类,覆盖了A的默认方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello from D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">E</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello from E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">F</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span> B <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// hello from B    -- 子接口优先级更高</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// C未覆盖A的默认方法,子接口优先级更高</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">G</span> <span class="token keyword">extends</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span> B <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">G</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// hello from B    -- 子接口优先级更高</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// D覆盖了A的默认方法,类优先级更高</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">H</span> <span class="token keyword">extends</span> <span class="token class-name">D</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span> B <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">H</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// hello from D    -- 类优先级更高</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//由于编译器无法识别A还是E的实现更加具体，所以会抛出编译错误</span><span class="token comment" spellcheck="true">//可以在I中覆盖hello()方法并在方法内显示的选择调用A还是B的方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">I</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span> E <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">I</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//编译报错</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//修改类I,覆盖hell()方法并显示的选择调用接口的方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">I</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span> B <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 显式地选择调用接口B中的方法</span>        <span class="token comment" spellcheck="true">// 同理，要调用接口A中的方法，可以这样：A.super.hello()</span>        B<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出 hello from B</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-静态方法"><a href="#2-静态方法" class="headerlink" title="2.静态方法"></a>2.静态方法</h4><p>静态方法使用 <code>static</code> 修饰.下面是示例:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...其它成员</span>    <span class="token comment" spellcheck="true">// 默认方法</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认方法..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态方法..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 静态方法调用方式</span>MyInterface<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 接口名.静态方法名()</span></code></pre><h3 id="三-Lambda表达式"><a href="#三-Lambda表达式" class="headerlink" title="三.Lambda表达式"></a>三.Lambda表达式</h3><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h4><p>Lambda表达式（也称为闭包）是Java 8中最大和最令人期待的语言改变。它允许我们<strong>将函数当成参数传递给某个方法，或者把代码本身当作数据处理.</strong> java8之前只能使用 <strong>匿名内部类</strong> 代替 Lambda 表达式. Lambda表达式类似于前端 <a href="https://www.cnblogs.com/itzlg/p/11854386.html#autoid-3-4-0" target="_blank" rel="noopener">ES6新特性</a> 中 <a href="https://www.cnblogs.com/itzlg/p/11300774.html" target="_blank" rel="noopener">箭头函数</a>. Lambda表达式本质是 <strong>作为函数式接口的实例</strong>. 函数式接口下文会介绍.</p><p><strong>格式:</strong>  </p><ul><li>示例：<code>(o1,o2) -&gt; Integer.compare(o1,o2);</code></li><li>-&gt; : Lambada操作符或箭头操作符</li><li>符号左边: Lambda形参列表 （其实就是接口中的抽象方法的<strong>形参列表</strong>）</li><li>符号右边: lambda体 （其实就是重写的抽象方法的<strong>方法体</strong>）</li></ul><p><strong>使用:</strong></p><ul><li>符号左边: lambda <strong>形参列表的参数类型可以省略</strong>(类型推断); 如果lambda形参列表只有<strong>一个参数</strong>, 其一对<code>()</code> 也可以省略</li><li>符号右边: lambda <strong>体应该使用一对{}包裹</strong>; 如果lambda体只有<strong>一条执行语句</strong>(可能是return语句), 省略这一对<code>{}</code> 和<code>return</code> 关键字</li></ul><p><strong>说明:</strong></p><ul><li><strong>类型推断</strong>: Lambda 表达式的类型依赖于上下文环境, 是由编译器推断出来的. 表达式中无需指定类型, 程序依然可以编译. Lambda表达式有返回值，返回值的类型也由编译器推理得出。</li><li>Lambda表达式可以引用类成员和局部变量（会将这些变量隐式得转换成<strong>final</strong>的）</li></ul><h4 id="2-作用域"><a href="#2-作用域" class="headerlink" title="2.作用域"></a>2.作用域</h4><h5 id="4-1-访问局部变量"><a href="#4-1-访问局部变量" class="headerlink" title="4.1 访问局部变量"></a>4.1 访问局部变量</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Converter<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> stringConverter <span class="token operator">=</span>        <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>stringConverter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 6</span></code></pre><p>变量num可以不用声明为final (隐性的具有final的语义), num 必须不可被后面的代码修改.</p><h5 id="4-2-访问字段和静态变量"><a href="#4-2-访问字段和静态变量" class="headerlink" title="4.2 访问字段和静态变量"></a>4.2 访问字段和静态变量</h5><p>与局部变量相比,我们对lambda表达式中的实例字段和静态变量都有读写访问权限.该行为和匿名对象是一致的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LambdaTest</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> outerStaticNum<span class="token punctuation">;</span>    <span class="token keyword">int</span> outerNum<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">testScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Converter<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> stringConverter1 <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            outerNum <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Converter<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> stringConverter2 <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            outerStaticNum <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="4-3-访问接口中默认方法"><a href="#4-3-访问接口中默认方法" class="headerlink" title="4.3 访问接口中默认方法"></a>4.3 访问接口中默认方法</h5><p>接口定义了一个默认方法，可以从包含匿名对象的每个实例访问该方法。 这不适用于lambda表达式。即<strong>无能从 lambda 表达式中访问默认方法</strong>, 会无法编译。</p><h4 id="3-示例"><a href="#3-示例" class="headerlink" title="3.示例"></a>3.示例</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Lambda表达式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 匿名内部类</span>        Runnable r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好好学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 并没有启动线程，启动线程必须调用start()方法</span>        r1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Lambda表达式：类似于前端ES6中的箭头函数</span>        Runnable r2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"天天向上"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 匿名内部类</span>        Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span> Integer o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -1</span>        <span class="token comment" spellcheck="true">// Lambda表达式：类似于前端ES6中的箭头函数</span>        Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> c2 <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>        <span class="token comment" spellcheck="true">// 方法引用</span>        Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> c3 <span class="token operator">=</span> Integer <span class="token operator">:</span><span class="token operator">:</span> compare<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//类名.静态方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span>        Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> c4 <span class="token operator">=</span> Integer <span class="token operator">:</span><span class="token operator">:</span> compareTo<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//类名(对象).非静态方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c4<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>不管是<strong>抽象类还是接口，都可以通过匿名内部类的方式访问</strong>。不能通过抽象类或者接口直接创建对象。对于上面通过匿名内部类方式访问接口，理解：<strong>一个内部类实现了接口里的抽象方法并且返回一个内部类对象，之后我们让接口的引用来指向这个对象</strong>。<strong>以前用匿名实现类表示的现在都可以用Lambda表达式来写</strong>。</p><h3 id="四-函数式-Functional-接口"><a href="#四-函数式-Functional-接口" class="headerlink" title="四.函数式(Functional)接口"></a>四.函数式(Functional)接口</h3><h4 id="1-概述-2"><a href="#1-概述-2" class="headerlink" title="1.概述"></a>1.概述</h4><p>函数接口指的是只有一个函数的接口，这样的接口可以隐式转换为Lambda表达式。<code>java.lang.Runnable</code>和<code>java.util.concurrent.Callable</code>是函数式接口的最佳例子。Java 8 提供了一个特殊的注解<strong>@FunctionalInterface</strong>进行声明,虚拟机会自动判断该接口是否为函数式接口。java8 函数式接口都在 <code>java.util.function</code> 包里。<strong>Lambda表达式就是一个函数式接口的实例</strong>。</p><p><strong>说明:</strong></p><ul><li>接口中只能有一个抽象方法</li><li>可以有静态方法和默认方法</li><li>可以使用注解 <code>@FunctionalInterface</code> 标记</li><li>默认方法可以被重写</li></ul><h4 id="2-内置函数式接口"><a href="#2-内置函数式接口" class="headerlink" title="2.内置函数式接口"></a>2.内置函数式接口</h4><p>JDK 1.8 API包含许多内置函数式接口。 其中一些接口在老版本的 Java 中是比较常见的比如： <code>Comparator</code> 或<code>Runnable</code>，这些接口都增加了<code>@FunctionalInterface</code>注解以便能用在 lambda 表达式上。四大核心函数式接口:</p><ul><li>消费型接口 <code>Consumer&lt;T&gt;     void accept(T t)</code> : 对单个输入参数执行的操作</li><li>供给型接口 <code>Supplier&lt;T&gt;     T get()</code> : 产生给定泛型类型的结果</li><li>函数型接口 <code>Function&lt;T,R&gt;   R apply(T t)</code> :接受一个参数并生成结果</li><li>断言型接口 <code>Predicate&lt;T&gt;    boolean test(T t)</code> : 接受一个传入类型,返回一个布尔值</li></ul><p><strong>Predicate源码</strong> : 包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如与，或，非）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Predicate</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 该方法是接受一个传入类型,返回一个布尔值.此方法应用于判断.</span>    <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//and方法与关系型运算符"&amp;&amp;"相似，两边都成立才返回true</span>    <span class="token keyword">default</span> Predicate<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">and</span><span class="token punctuation">(</span>Predicate<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> other<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 与关系运算符"!"相似，对判断进行取反</span>    <span class="token keyword">default</span> Predicate<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//or方法与关系型运算符"||"相似，两边只要有一个成立就返回true</span>    <span class="token keyword">default</span> Predicate<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">or</span><span class="token punctuation">(</span>Predicate<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">||</span> other<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 该方法接收一个Object对象,返回一个Predicate类型.</span>   <span class="token comment" spellcheck="true">// 此方法用于判断第一个test的方法与第二个test方法相同(equal).</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Predicate<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">isEqual</span><span class="token punctuation">(</span>Object targetRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> targetRef<span class="token punctuation">)</span>                <span class="token operator">?</span> Objects<span class="token operator">:</span><span class="token operator">:</span>isNull                <span class="token operator">:</span> object <span class="token operator">-</span><span class="token operator">></span> targetRef<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>示例:</p><pre class=" language-java"><code class="language-java">Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> predicate <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// true</span>predicate<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span>Predicate<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> nonNull <span class="token operator">=</span> Objects<span class="token operator">:</span><span class="token operator">:</span>nonNull<span class="token punctuation">;</span>Predicate<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> isNull <span class="token operator">=</span> Objects<span class="token operator">:</span><span class="token operator">:</span>isNull<span class="token punctuation">;</span>Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> isEmpty <span class="token operator">=</span> String<span class="token operator">:</span><span class="token operator">:</span>isEmpty<span class="token punctuation">;</span>Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> isNotEmpty <span class="token operator">=</span> isEmpty<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>Function源码</strong> : 默认方法可用于将多个函数链接在一起（compose, andThen）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将Function对象应用到输入的参数上，然后返回计算结果。</span>    R <span class="token function">apply</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将两个Function整合，并返回一个能够执行两个Function对象功能的Function对象。</span>    <span class="token keyword">default</span> <span class="token operator">&lt;</span>V<span class="token operator">></span> Function<span class="token operator">&lt;</span>V<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">compose</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> V<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> before<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>before<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>V v<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">apply</span><span class="token punctuation">(</span>before<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// </span>    <span class="token keyword">default</span> <span class="token operator">&lt;</span>V<span class="token operator">></span> Function<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">andThen</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> R<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> after<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Function<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> t <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>示例:</p><pre class=" language-java"><code class="language-java">Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> toInteger <span class="token operator">=</span> Integer<span class="token operator">:</span><span class="token operator">:</span>valueOf<span class="token punctuation">;</span>Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> backToString <span class="token operator">=</span> toInteger<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>valueOf<span class="token punctuation">)</span><span class="token punctuation">;</span>backToString<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// "123"</span></code></pre><h4 id="3-示例-1"><a href="#3-示例-1" class="headerlink" title="3.示例"></a>3.示例</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 函数式接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionalTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 消费money</span>        <span class="token function">spendMoney</span><span class="token punctuation">(</span><span class="token number">60.6</span><span class="token punctuation">,</span> money <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开心的购物了"</span><span class="token operator">+</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">spendMoney</span><span class="token punctuation">(</span>Double money<span class="token punctuation">,</span> Consumer<span class="token operator">&lt;</span>Double<span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> strList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">,</span><span class="token string">"ac"</span><span class="token punctuation">,</span><span class="token string">"ad"</span><span class="token punctuation">,</span><span class="token string">"bc"</span><span class="token punctuation">,</span><span class="token string">"bd"</span><span class="token punctuation">,</span><span class="token string">"cd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> <span class="token function">filterStr</span><span class="token punctuation">(</span>strList<span class="token punctuation">,</span> str <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ab, ac, ad]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据给定的规则，过滤集合中的字符串。此规则由Predicate的方法决定</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">filterStr</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">,</span> Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> arraylist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arraylist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arraylist<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="五-方法引用与构造器引用"><a href="#五-方法引用与构造器引用" class="headerlink" title="五.方法引用与构造器引用"></a>五.方法引用与构造器引用</h3><h4 id="1-方法引用"><a href="#1-方法引用" class="headerlink" title="1.方法引用"></a>1.方法引用</h4><h5 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h5><p>方法引用使得开发者可以直接引用现存的方法、Java类的构造方法或者实例对象。<strong>方法引用本质上就是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法</strong>，可以认为是Lambda表达式的一个语法糖。</p><p><strong>格式</strong>: <code>类(或对象) :: 方法名</code></p><p><strong>情况</strong>: </p><ul><li><p><code>对象::非静态方法</code> , <code>类::静态方法</code></p><p>实现接口的<strong>抽象方法</strong>的参数列表和返回值类型，必须与<strong>方法引用的方法</strong>的参数列表和返回值类型保持一致</p></li><li><p><code>类::非静态方法</code></p><p>函数式接口<strong>抽象方法</strong>的 第一个参数 是需要引用方法的<strong>调用者</strong>, 并且 第二个参数 是需要引用方法的<strong>参数</strong>( 或无参数)   </p></li></ul><h5 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方法引用</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodRefTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> c1 <span class="token operator">=</span> str <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Lambda表达式</span>        c1<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"好好学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 好好学习</span>        <span class="token comment" spellcheck="true">// Consumer中的void accept(T t)</span>        <span class="token comment" spellcheck="true">// PrintStream中的void println(T t)</span>        <span class="token comment" spellcheck="true">// 当函数接口中抽象方法形参列表与方法体中调用的方法形参列表相同时，可用方法引用</span>        Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> c2 <span class="token operator">=</span> System<span class="token punctuation">.</span>out <span class="token operator">:</span><span class="token operator">:</span> println<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对象 :: 非静态方法</span>        c2<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"天天向上"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 天天向上</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Function<span class="token operator">&lt;</span>Double<span class="token punctuation">,</span> Long<span class="token operator">></span> f1 <span class="token operator">=</span> d <span class="token operator">-</span><span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Lambda表达式</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">5.20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 5</span>        <span class="token comment" spellcheck="true">// Function中的R apply(T t)</span>        <span class="token comment" spellcheck="true">// Math中的Long round(Double d)</span>        Function<span class="token operator">&lt;</span>Double<span class="token punctuation">,</span> Long<span class="token operator">></span> f2 <span class="token operator">=</span> Math <span class="token operator">:</span><span class="token operator">:</span> round<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 类 :: 静态方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">13.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 13</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        BiPredicate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> b1 <span class="token operator">=</span> <span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Lambda表达式</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"bcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span>        <span class="token comment" spellcheck="true">// BiPredicate中的boolean test(T t1, T t2);</span>        <span class="token comment" spellcheck="true">// String中的boolean t1.equals(t2)</span>        <span class="token comment" spellcheck="true">// 当方法体中用 函数接口中抽象方法形参列表中第一个形参 调用 </span>          <span class="token comment" spellcheck="true">// 一个形参列表与函数接口中抽象方法除第一个形参以外列表相同的方法时</span>        BiPredicate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> b2 <span class="token operator">=</span> String <span class="token operator">:</span><span class="token operator">:</span> equals<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 类 :: 非静态方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"bcd"</span><span class="token punctuation">,</span> <span class="token string">"bcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-构造器引用"><a href="#2-构造器引用" class="headerlink" title="2.构造器引用"></a>2.构造器引用</h4><h5 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h5><p><strong>构造器引用</strong>: 和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致。抽象方法的返回值类型即为构造器所属的类的类型。</p><p>格式: <code>类名 :: new</code> </p><p><strong>数组引用</strong>: 可以把数组看做是一个特殊的类，则写法与构造器引用一致。</p><p>格式: <code>类名[] :: new</code></p><p><strong>要求</strong>: 构造器参数列表要与接口中抽象方法的<strong>参数列表一致</strong>且方法的<strong>返回值</strong>即为构造器对应类的对象或数组</p><h5 id="2-2-示例"><a href="#2-2-示例" class="headerlink" title="2.2 示例"></a>2.2 示例</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstructorRefTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Supplier<span class="token operator">&lt;</span>Employee<span class="token operator">></span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Employee{id=0, name='null', age=0, salary=0.0}</span>        Supplier<span class="token operator">&lt;</span>Employee<span class="token operator">></span> s2 <span class="token operator">=</span> Employee <span class="token operator">:</span><span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Employee{id=0, name='null', age=0, salary=0.0}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Employee<span class="token operator">></span> f1 <span class="token operator">=</span> id <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Employee{id=6, name='null', age=0, salary=0.0}</span>        Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Employee<span class="token operator">></span> f2 <span class="token operator">=</span> Employee <span class="token operator">:</span><span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Employee{id=8, name='null', age=0, salary=0.0}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        BiFunction<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Employee<span class="token operator">></span> f1 <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Employee{id=6, name='Jack', age=0, salary=0.0}</span>        BiFunction<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Employee<span class="token operator">></span> f2 <span class="token operator">=</span> Employee <span class="token operator">:</span><span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// Employee{id=8, name='Tom', age=0, salary=0.0}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> f1 <span class="token operator">=</span> lenght <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>lenght<span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// [null, null, null]</span>        Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> f2 <span class="token operator">=</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span><span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// [null, null, null, null, null]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Employee类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// get, set方法省略...</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Employee()....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Employee(int id)....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int id, String name....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">double</span> salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Employee{"</span> <span class="token operator">+</span> <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", salary="</span> <span class="token operator">+</span> salary <span class="token operator">+</span> <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Employee employee <span class="token operator">=</span> <span class="token punctuation">(</span>Employee<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> employee<span class="token punctuation">.</span>id<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">!=</span> employee<span class="token punctuation">.</span>age<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Double<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>salary<span class="token punctuation">,</span> salary<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name <span class="token operator">!=</span> null <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">:</span> employee<span class="token punctuation">.</span>name <span class="token operator">==</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result<span class="token punctuation">;</span>        <span class="token keyword">long</span> temp<span class="token punctuation">;</span>        result <span class="token operator">=</span> id<span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> null <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> age<span class="token punctuation">;</span>        temp <span class="token operator">=</span> Double<span class="token punctuation">.</span><span class="token function">doubleToLongBits</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>temp <span class="token operator">^</span> <span class="token punctuation">(</span>temp <span class="token operator">>>></span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="六-Stream-API"><a href="#六-Stream-API" class="headerlink" title="六.Stream API"></a>六.Stream API</h3><h4 id="1-Stream-概述"><a href="#1-Stream-概述" class="headerlink" title="1.Stream 概述"></a>1.Stream 概述</h4><p><strong>Stream 是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列</strong>。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来<strong>并行执行</strong>操作。简言之，Stream API 提供了一种高效且易于使用的<strong>处理数据</strong>的方式。</p><p>Stream 和 Collection 集合的区别：Collection 是一种静态的<strong>内存数据结构</strong>，主要<strong>面向内存</strong>，存储在内存中。而 Stream 是有关<strong>对数据的运算</strong>，主要是<strong>面向 CPU</strong>，通过 CPU 实现计算。</p><p><strong>说明：</strong></p><ul><li>Stream 自己不会存储元素。</li><li>Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</li><li>Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</li></ul><p><strong>执行流程：</strong></p><ul><li>Stream实例化：指定一个数据源(Collection子类、数组，Map不支持)，获取一个流</li><li>中间操作：一个中间操作链，对数据源的数据进行处理，返回Stream本身</li><li>终止操作：一旦执行终止操作，就执行中间操作链，返回一特定类型的计算结果。之后，不会再被使用</li></ul><h4 id="2-Stream-创建方式"><a href="#2-Stream-创建方式" class="headerlink" title="2.Stream 创建方式"></a>2.Stream 创建方式</h4><ul><li><strong>通过集合</strong> – Java8 中的 Collection 接口提供了两个获取流的方法：<ul><li><code>default Stream&lt;E&gt; stream()</code> : <strong>返回一个顺序流</strong></li><li><code>default Stream&lt;E&gt; parallelStream()</code> : 返回一个并行流</li></ul></li><li><strong>通过数组</strong> – Java8 中的 Arrays 的静态方法 stream() 可以获取数组流：<ul><li><code>static &lt;T&gt; Stream&lt;T&gt; stream(T[] array)</code> : 返回一个流</li></ul></li><li><strong>通过Stream的of()</strong> – 可以调用Stream类静态方法 of(), 通过显示值创建一个流。它可以接收任意数量的参数。<ul><li><code>public static&lt;T&gt; Stream&lt;T&gt; of(T... values)</code> : 返回一个流</li></ul></li><li><strong>创建无限流</strong> – 可以使用静态方法 Stream.iterate() 和 Stream.generate()，创建无限流。<ul><li><code>public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</code></li><li><code>public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</code></li></ul></li></ul><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通过集合：串行流</span>List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employees <span class="token operator">=</span> EmployeeData<span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>Employee<span class="token operator">></span> stream <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过集合：并行流</span>Stream<span class="token operator">&lt;</span>Employee<span class="token operator">></span> parallelStream <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>parallelStream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过数组</span>IntStream stream1 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>e<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过Stream的of()</span>Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integerStream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>integerStream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>e<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建无限流</span><span class="token comment" spellcheck="true">// 迭代</span>Stream<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> e <span class="token operator">-</span><span class="token operator">></span> e<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>e<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 生成</span>Stream<span class="token operator">&lt;</span>Double<span class="token operator">></span> generate <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>Math<span class="token operator">:</span><span class="token operator">:</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span>generate<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>e<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>EmployeeData.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeData</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">6006.36</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"Mary"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">3006.80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span> <span class="token string">"Tick"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">7686.36</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1004</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">6666.16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">6666.16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1006</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">6666.16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Employee：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造方法省略</span>    <span class="token comment" spellcheck="true">// set、get方法省略</span>    <span class="token comment" spellcheck="true">// toString方法省略</span>    <span class="token comment" spellcheck="true">// hashcode、equals方法省略</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Employee</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Employee e <span class="token operator">=</span> <span class="token punctuation">(</span>Employee<span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token keyword">int</span> compare <span class="token operator">=</span> Double<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>salary<span class="token punctuation">,</span> e<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>compare <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> compare<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"传入的数据类型不一致！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-Stream-中间操作"><a href="#3-Stream-中间操作" class="headerlink" title="3.Stream 中间操作"></a>3.Stream 中间操作</h4><p>一个中间操作链，对数据源的数据进行处理，返回Stream本身。</p><ul><li>筛选与切片<ul><li><code>filter(Predicate p)</code>：<strong>接收 Lambda ， 从流中排除某些元素</strong></li><li><code>limit(long maxSize)</code>：使其元素不超过给定数量</li><li><code>skip(long n)</code>：跳过元素，返回一个扔掉了前 n 个元素的流</li><li><code>distinct(Predicate p)</code>：通过流所生成元素的 hashCode() 和 equals() 去除重复元素</li></ul></li><li>映射<ul><li><code>map(Function f)</code>：<strong>接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应用到每个元素上，并将其映射成一个新的元素，返回的值包装在 Optional 中</strong></li><li><code>flatMap(Function f)</code>：<strong>函数作为参数，并对值调用这个函数，然后直接返回结果，返回的值是解除包装的值</strong></li></ul></li><li>排序<ul><li><code>sorted()</code>：<strong>产生一个新流，其中按自然顺序排序</strong></li><li><code>sorted(Comparator com)</code>：<strong>产生一个新流，其中按比较器顺序排序</strong></li></ul></li></ul><p>示例：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list <span class="token operator">=</span> EmployeeData<span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 薪水大于6000的员工信息</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 元素不超过3个</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 跳过元素，返回一个扔掉了前 n 个元素的流</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 根据元素的hashcode() 和 equals() 去除重复元素</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将员工信息的姓名都转为大写</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>e<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将员工按照薪水排序，再按照名称排序 -- 自然排序(Employee需要实现Comparable接口)</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将员工按照薪水排序，再按照名称排序 -- 定制排序</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> compare <span class="token operator">=</span> Double<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>compare <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> compare<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> e1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>map(Function f) 与 flatMap(Function f) 区别：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// map方法:对值应用(调用)作为参数的函数，然后将返回的值包装在 Optional 中</span>Stream<span class="token operator">&lt;</span>Stream<span class="token operator">&lt;</span>Character<span class="token operator">>></span> streamStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StreamAPITest<span class="token operator">:</span><span class="token operator">:</span>fromStringToStream<span class="token punctuation">)</span><span class="token punctuation">;</span>streamStream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 函数作为参数，并对值调用这个函数，然后直接返回结果，返回的值是解除包装的值</span>Stream<span class="token operator">&lt;</span>Character<span class="token operator">></span> characterStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>StreamAPITest<span class="token operator">:</span><span class="token operator">:</span>fromStringToStream<span class="token punctuation">)</span>；characterStream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将字符串中的多个字符构成的集合转换为对应的Stream的实例</span><span class="token keyword">public</span> <span class="token keyword">static</span> Stream<span class="token operator">&lt;</span>Character<span class="token operator">></span> <span class="token function">fromStringToStream</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//aa</span>    ArrayList<span class="token operator">&lt;</span>Character<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Character c <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="4-Stream-终止操作"><a href="#4-Stream-终止操作" class="headerlink" title="4.Stream 终止操作"></a>4.Stream 终止操作</h4><p>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void 。<strong>流进行了终止操作后，不能再次使用</strong>。</p><ul><li>匹配与查找<ul><li><code>allMatch(Predicate p)</code>：<strong>检查是否匹配所有元素</strong></li><li><code>anyMatch(Predicate p)</code>：检查是否至少匹配一个元素</li><li><code>noneMatch(Predicate p)</code>：检查是否没有匹配的元素</li><li><code>findFirst()</code>：返回第一个元素</li><li><code>count()</code>：<strong>返回流中元素的总个数</strong></li><li><code>forEach(Consumer c)</code>：<strong>内部迭代</strong></li><li><code>max(Comparator c)、max(Comparator c)</code>：返回流中最大值、最小值</li></ul></li><li>归约<ul><li><code>reduce(T iden, BinaryOperator b)</code>：可以将流中元素反复结合起来，得到一个值。返回 T</li><li><code>reduce(BinaryOperator b)</code>：<strong>可以将流中元素反复结合起来，得到一个值</strong>。返回 Optional<t></t></li><li>map 和 reduce 的连接通常称为 map-reduce 模式</li></ul></li><li>收集<ul><li><code>collect(Collector c)</code>：<strong>将流转换为其他形式</strong>。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</li></ul></li></ul><p>示例：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list <span class="token operator">=</span> EmployeeData<span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 是否所有的员工的年龄都大于18 -- 是否匹配所有元素</span><span class="token keyword">boolean</span> b <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// 是否存在员工的工资大于7000 -- 是否至少匹配一个元素</span><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">7000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 是否存在员工姓“J” -- 是否没有匹配的元素</span><span class="token keyword">boolean</span> b2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"J"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// 查找第一个元素</span>Optional<span class="token operator">&lt;</span>Employee<span class="token operator">></span> first <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Optional[Employee{id=1001, name='Jack', age=16, salary=6006.36}]</span><span class="token comment" spellcheck="true">// 流中元素总个数</span><span class="token keyword">long</span> count <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 6</span><span class="token comment" spellcheck="true">// 返回最高的工资员工信息</span>Optional<span class="token operator">&lt;</span>Employee<span class="token operator">></span> max <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Double<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Optional[Employee{id=1004, name='Tick', age=26, salary=7686.36}]</span><span class="token comment" spellcheck="true">// 返回最低的工资员工信息</span>Optional<span class="token operator">&lt;</span>Double<span class="token operator">></span> min <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Employee<span class="token operator">:</span><span class="token operator">:</span>getSalary<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Double<span class="token operator">:</span><span class="token operator">:</span>compareTo<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Optional[3006.8]</span><span class="token comment" spellcheck="true">// 内部迭代</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 集合的遍历操作 -- Collection接口实现了Iterable，Iterable扩展了forEach的默认方法</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 计算所有员工工资的总和</span>Optional<span class="token operator">&lt;</span>Double<span class="token operator">></span> reduce <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Employee<span class="token operator">:</span><span class="token operator">:</span>getSalary<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e1 <span class="token operator">+</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 36698.0</span><span class="token comment" spellcheck="true">// 查找工资大于7000的员工，结果返回为一个List或Set</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">7000</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-forEach-集合中的使用"><a href="#5-forEach-集合中的使用" class="headerlink" title="5.forEach 集合中的使用"></a>5.forEach 集合中的使用</h4><p><strong>Collection 接口实现了 Iterable 接口，而 Iterable 接口在 Java 8开始具有一个新的 API：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对 Iterable的每个元素执行给定的操作，直到所有元素都被处理或动作引发异常。</span>    <span class="token comment" spellcheck="true">// forEach形参可用Lambda表达式或方法引用</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>T t <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>任何类型Collection的可迭代 - 列表，集合，队列 等都具有使用forEach的相同语法。</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// List</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token string">"Tome"</span><span class="token punctuation">,</span> <span class="token string">"Mary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strings<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Set</span>HashSet<span class="token operator">&lt;</span>String<span class="token operator">></span> strings1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token string">"Tome"</span><span class="token punctuation">,</span> <span class="token string">"Mary"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strings1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Queue</span>Queue<span class="token operator">&lt;</span>String<span class="token operator">></span> strings2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token string">"Tome"</span><span class="token punctuation">,</span> <span class="token string">"Mary"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strings2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Map没有实现Iterable接口，但它<strong>提供了自己的forEach 变体，它接受BiConsumer</strong>。</p><pre class=" language-java"><code class="language-java">HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"Tome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"Mary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>entry <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="七-Optional类"><a href="#七-Optional类" class="headerlink" title="七.Optional类"></a>七.Optional类</h3><p>Optional<t> 类(java.util.Optional) 是一个<strong>容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在</strong>。原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。</t></p><ul><li>创建Optiona类l对象：<ul><li><code>Optional.of(T t)</code> : 创建一个 Optional 实例，t必须非空；</li><li><code>Optional.empty()</code> : 创建一个空的 Optional 实例</li><li><code>Optional.ofNullable(T t)</code> ：<strong>t可以为null</strong></li></ul></li><li>判断容器中是否包含对象：<ul><li><code>boolean isPresent()</code> : <strong>判断是否包含对象</strong></li><li><code>void ifPresent(Consumer&lt;? super T&gt; consumer)</code> ：<strong>如果有值，就执行Consumer接口的实现代码，并且该值会作为参数传给它。</strong></li></ul></li><li>获取Optional类的对象：<ul><li><code>T get()</code> : 如果调用对象包含值，返回该值，否则抛异常</li><li><code>T orElse(T other)</code> ：<strong>如果有值则将其返回，否则返回指定的other对象</strong></li><li><code>T orElseGet(Supplier&lt;? extends T&gt; other)</code> ：如果有值则将其返回，否则返回由Supplier接口实现提供的对象</li><li><code>T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</code> ：<strong>如果有值则将其返回，否则抛出由Supplier接口实现提供的异常。</strong></li></ul></li><li>中间操作：<ul><li><code>Optional&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</code>：过滤值</li><li><code>Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; mapper)</code>：转换值。<strong>接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应用到每个元素上，并将其映射成一个新的元素，返回的值包装在 Optional 中</strong></li><li><code>Optional&lt;U&gt; flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; mapper)</code>：转换值。<strong>函数作为参数，并对值调用这个函数，然后直接返回结果，返回的值是解除包装的值</strong></li></ul></li></ul><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getName</span><span class="token punctuation">(</span>User u<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> null <span class="token operator">||</span> u<span class="token punctuation">.</span>name <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"Unknown"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> u<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 改写</span><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getName</span><span class="token punctuation">(</span>User u<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Optional        <span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-</span><span class="token operator">></span> user<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"Unknown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 为空则不打印</span>string<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 检验参数的合法性</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalArgumentException <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> Optional        <span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>isNameValid<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Invalid username..."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Optional类的链式方法</span>User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String result <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getAddress<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Address<span class="token operator">:</span><span class="token operator">:</span>getCountry<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Country<span class="token operator">:</span><span class="token operator">:</span>getIsocode<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Address address<span class="token punctuation">;</span>    <span class="token keyword">public</span> Optional<span class="token operator">&lt;</span>Address<span class="token operator">></span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Country country<span class="token punctuation">;</span>    <span class="token keyword">public</span> Optional<span class="token operator">&lt;</span>Country<span class="token operator">></span> <span class="token function">getCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/What's%20New%20in%20JDK8/Java8Tutorial" target="_blank" rel="noopener">Java 8 新特性总结</a></li><li><a href="https://blog.csdn.net/yczz/article/details/50896975" target="_blank" rel="noopener">Java 8的新特性—终极版</a></li><li><a href="https://www.cnblogs.com/zhangboyu/p/7580262.html" target="_blank" rel="noopener">理解、学习与使用 JAVA 中的 OPTIONAL</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流总结</title>
      <link href="/2019/11/06/io-liu/"/>
      <url>/2019/11/06/io-liu/</url>
      
        <content type="html"><![CDATA[<h3 id="一-File类"><a href="#一-File类" class="headerlink" title="一.File类"></a>一.File类</h3><p>java.io.File类：<strong>文件和文件目录</strong>路径的抽象表示形式，与平台无关</p><ol><li>File 能<strong>新建、删除、重命名</strong>文件和目录，但 File 不能访问文件内容本身。如果需要访问文件内容本身，则需要使用输入/输出流。</li><li>想要在Java程序中表示一个真实存在的文件或目录，那么必须有一个File对象，但是Java程序中的一个File对象，可能没有一个真实存在的文件或目录。</li><li>File对象可以作为<strong>参数传递给流的构造器</strong></li></ol><h4 id="1-常用构造器"><a href="#1-常用构造器" class="headerlink" title="1.常用构造器"></a>1.常用构造器</h4><p>1.<code>public File(String pathname)</code><br>以pathname为路径创建File对象，可以是 绝对路径或者相对路径，如果pathname是相对路径，则默认的当前路径在系统属性user.dir中存储。</p><ul><li>绝对路径：是一个固定的路径,从盘符开始</li><li>相对路径：是相对于某个位置开始</li></ul><p>2.<code>public File(String parent,String child)</code><br>    以parent为父路径，child为子路径创建File对象。</p><p>3.<code>public File(File parent,String child)</code><br>    根据一个父File对象和子文件路径创建File对象</p><h4 id="2-常用方法"><a href="#2-常用方法" class="headerlink" title="2.常用方法"></a>2.常用方法</h4><h5 id="1-获取功能"><a href="#1-获取功能" class="headerlink" title="1.获取功能"></a>1.获取功能</h5><ul><li>public String getPath() ：获取路径</li><li>public String getName() ：获取名称</li><li>public String getParent()：获取上层文件目录路径。若无，返回null</li><li>public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。</li><li>public long lastModified() ：获取最后一次的修改时间，毫秒值</li><li>适用于文件目录:</li><li>public String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组</li><li>public File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组</li></ul><h5 id="2-重命名功能"><a href="#2-重命名功能" class="headerlink" title="2.重命名功能"></a>2.重命名功能</h5><ul><li>public boolean renameTo(File dest):把文件重命名为指定的文件路径(移动/重命名)</li></ul><h5 id="3-判断功能"><a href="#3-判断功能" class="headerlink" title="3.判断功能"></a>3.判断功能</h5><ul><li>public boolean isDirectory()：判断是否是文件目录</li><li>public boolean isFile() ：判断是否是文件</li><li>public boolean exists() ：判断是否存在</li><li>public boolean canRead() ：判断是否可读</li><li>public boolean canWrite() ：判断是否可写</li><li>public boolean isHidden() ：判断是否隐藏</li></ul><h5 id="4-创建功能"><a href="#4-创建功能" class="headerlink" title="4.创建功能"></a>4.创建功能</h5><ul><li>public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false</li><li>public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。</li><li>public boolean mkdirs() ：创建文件目录。如果上层文件目录不存在，一并创建<br>注意事项：如果你创建文件或者文件目录没有写盘符路径，那么， 默认在项目路径下</li></ul><h5 id="5-删除功能"><a href="#5-删除功能" class="headerlink" title="5.删除功能"></a>5.删除功能</h5><ul><li>public boolean delete()：删除文件或者文件夹<br>  删除注意事项：<pre><code>  Java中的删除不走回收站。  要删除一个文件目录，请注意该文件目录内不能包含文件或者文件目录</code></pre></li></ul><h4 id="3-File类使用示例"><a href="#3-File类使用示例" class="headerlink" title="3.File类使用示例"></a>3.File类使用示例</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cykj<span class="token punctuation">.</span>file<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 1.File类的一个对象，代表一个文件或一个文件目录 * 2.File类声明在java.io包下 * * @author zlg * @create 2019-10-06 15:19 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 常用构造器：     * 1.如何创建File类的实例     *      File(String filepath)     *      File(String parent,String child)     *      File(File parent,String child)     *     * 2.相对路径：相较于某个路径下，指明的路径     *   绝对路径：包含盘符在内的文件或文件目录的路径     * IDEA中：        如果大家开发使用JUnit中的单元测试方法测试，相对路径即为当前Module下。        如果大家使用main()测试，相对路径即为当前的Project下。       Eclipse中：        不管使用单元测试方法还是使用main()测试，相对路径都是当前的Project下。     *     * 3.路径分隔符     *      windows：\\     *      unix：/     *      通用：File.separator     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构造器1</span>        <span class="token comment" spellcheck="true">//相对于当前module</span>        File file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//绝对路径</span>        File file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\ideaworkspace\\java-high\\io\\he.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// hello.txt</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// E:\ideaworkspace\java-high\io\he.txt</span>        <span class="token comment" spellcheck="true">//构造器2</span>        File file3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\ideaworkspace"</span><span class="token punctuation">,</span> <span class="token string">"java-high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// E:\ideaworkspace\java-high</span>        <span class="token comment" spellcheck="true">//构造器3</span>        File file4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file3<span class="token punctuation">,</span> <span class="token string">"hi.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// E:\ideaworkspace\java-high\hi.txt</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 常用方法：     * 1.获取功能     public String getAbsolutePath()：获取绝对路径     public String getPath() ：获取路径     public String getName() ：获取名称     public String getParent()：获取上层文件目录路径。若无，返回null     public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。     public long lastModified() ：获取最后一次的修改时间，毫秒值     适用于文件目录:     public String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组     public File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        File file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//文件名称</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//形参为相对路径，找不到上一级</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>file1<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\ideaworkspace"</span><span class="token punctuation">,</span> <span class="token string">"java-high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String s<span class="token operator">:</span>file2<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//名称数组</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>File f<span class="token operator">:</span>file2<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//File数组</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 2.重命名功能     public boolean renameTo(File dest):把文件重命名为指定的文件路径(移动/重命名)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        File file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//目标文件不存在</span>        File file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hi.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//原文件存在</span>        <span class="token keyword">boolean</span> bool <span class="token operator">=</span> file2<span class="token punctuation">.</span><span class="token function">renameTo</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 3.判断功能     public boolean isDirectory()：判断是否是文件目录     public boolean isFile() ：判断是否是文件     public boolean exists() ：判断是否存在     public boolean canRead() ：判断是否可读     public boolean canWrite() ：判断是否可写     public boolean isHidden() ：判断是否隐藏     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//是否是文件夹</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//是否是文件</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//是否存在</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 4.创建功能     public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false     public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。     public boolean mkdirs() ：创建文件目录。如果上层文件目录不存在，一并创建     注意事项：如果你创建文件或者文件目录没有写盘符路径，那么， 默认在项目路径下     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//文件创建</span>        File file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"world.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file1<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            file1<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            file1<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 5.删除功能     public boolean delete()：删除文件或者文件夹     删除注意事项：        Java中的删除不走回收站。        要删除一个文件目录，请注意该文件目录内不能包含文件或者文件目录     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除文件或文件夹</span>        <span class="token function">deleteDirectory</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除文件或文件夹</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteDirectory</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果file是文件，直接delete</span>        <span class="token comment" spellcheck="true">// 如果file是目录，先把它的下一级干掉，然后删除自己</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            File<span class="token punctuation">[</span><span class="token punctuation">]</span> all <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 循环删除的是file的下一级</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>File f <span class="token operator">:</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// f代表file的每一个下级</span>                <span class="token function">deleteDirectory</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 删除自己</span>        file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-应用"><a href="#4-应用" class="headerlink" title="4.应用"></a>4.应用</h4><h5 id="1-查找指定文件"><a href="#1-查找指定文件" class="headerlink" title="1.查找指定文件"></a>1.查找指定文件</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 应用：判断指定目录下是否有后缀名为.jpg的文件，如果有，就输出该文件名称 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FindJPGFileTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        File srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:\\code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> fileNames <span class="token operator">=</span> srcFile<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String fileName <span class="token operator">:</span> fileNames<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        File srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:\\code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> listFiles <span class="token operator">=</span> srcFile<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>File file <span class="token operator">:</span> listFiles<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * File类提供了两个文件过滤器方法     * public String[] list(FilenameFilter filter)     * public File[] listFiles(FileFilter filter)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        File srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:\\code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> subFiles <span class="token operator">=</span> srcFile<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FilenameFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File dir<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>File file <span class="token operator">:</span> subFiles<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-遍历指定目录"><a href="#2-遍历指定目录" class="headerlink" title="2.遍历指定目录"></a>2.遍历指定目录</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 应用：遍历指定目录所有文件名称，包括子文件目录中的文件。    拓展1：并计算指定目录占用空间的大小    拓展2：删除指定文件目录及其下的所有文件 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListFilesTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 递归:文件目录</span>        <span class="token comment" spellcheck="true">/** 打印出指定目录所有文件名称，包括子文件目录中的文件 */</span>        <span class="token comment" spellcheck="true">// 1.创建目录对象</span>        File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\teach\\01_javaSE\\_尚硅谷Java编程语言\\3_软件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.打印目录的子文件</span>        <span class="token function">printSubFile</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printSubFile</span><span class="token punctuation">(</span>File dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 打印目录的子文件</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> subfiles <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>File f <span class="token operator">:</span> subfiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 文件目录</span>                <span class="token function">printSubFile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 文件</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 方式二：循环实现</span>    <span class="token comment" spellcheck="true">// 列出file目录的下级内容，仅列出一级的话</span>    <span class="token comment" spellcheck="true">// 使用File类的String[] list()比较简单</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listSubFiles</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> all <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file <span class="token operator">+</span> <span class="token string">"是文件！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 列出file目录的下级，如果它的下级还是目录，接着列出下级的下级，依次类推</span>    <span class="token comment" spellcheck="true">// 建议使用File类的File[] listFiles()</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listAllSubFiles</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            File<span class="token punctuation">[</span><span class="token punctuation">]</span> all <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果all[i]是文件，直接打印</span>            <span class="token comment" spellcheck="true">// 如果all[i]是目录，接着再获取它的下一级</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>File f <span class="token operator">:</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">listAllSubFiles</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 递归调用：自己调用自己就叫递归</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 拓展1：求指定目录所在空间的大小</span>    <span class="token comment" spellcheck="true">// 求任意一个目录的总大小</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDirectorySize</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// file是文件，那么直接返回file.length()</span>        <span class="token comment" spellcheck="true">// file是目录，把它的下一级的所有大小加起来就是它的总大小</span>        <span class="token keyword">long</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            size <span class="token operator">+=</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            File<span class="token punctuation">[</span><span class="token punctuation">]</span> all <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取file的下一级</span>            <span class="token comment" spellcheck="true">// 累加all[i]的大小</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>File f <span class="token operator">:</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>                size <span class="token operator">+=</span> <span class="token function">getDirectorySize</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// f的大小;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 拓展2：删除指定的目录</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteDirectory</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果file是文件，直接delete</span>        <span class="token comment" spellcheck="true">// 如果file是目录，先把它的下一级干掉，然后删除自己</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            File<span class="token punctuation">[</span><span class="token punctuation">]</span> all <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 循环删除的是file的下一级</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>File f <span class="token operator">:</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// f代表file的每一个下级</span>                <span class="token function">deleteDirectory</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 删除自己</span>        file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="二-IO流体系结构"><a href="#二-IO流体系结构" class="headerlink" title="二.IO流体系结构"></a>二.IO流体系结构</h3><h4 id="1-IO流原理"><a href="#1-IO流原理" class="headerlink" title="1.IO流原理"></a>1.IO流原理</h4><p> I/O是Input/Output的缩写， I/O技术是非常实用的技术，<strong>用于处理设备之间的数据传输</strong>。如读/写文件，网络通讯等。</p><ul><li><strong>输入input</strong>：读取外部数据（磁盘、光盘等存储设备的数据）到程序（内存）中。</li><li><strong>输出output</strong>：将程序（内存）数据输出到磁盘、光盘等存储设备中。</li></ul><p>Java程序中，对于数据的输入/输出操作以 <strong>流(stream)</strong>的方式进行。java.io包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过<strong>标准的方法</strong>输入或输出数据。</p><h4 id="2-IO流分类"><a href="#2-IO流分类" class="headerlink" title="2.IO流分类"></a>2.IO流分类</h4><ul><li><strong>操作单元</strong>：字节流和字符流</li><li><strong>流的流向</strong>：输入流和输出流</li><li><strong>流的角色</strong>：节点流和处理流</li></ul><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191225233530102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-IO流体系结构"><a href="#3-IO流体系结构" class="headerlink" title="3.IO流体系结构"></a>3.IO流体系结构</h4><table><thead><tr><th>抽象基本类</th><th>节点流(文件流)</th><th>缓冲流(处理流的一种)</th></tr></thead><tbody><tr><td>InputStream</td><td>FileInputStream (read(byte[] buffer))</td><td>BufferedInputStream (read(byte[] buffer))</td></tr><tr><td>OutputStream</td><td>FileOutputStream (write(byte[] buffer,0,len)</td><td>BufferedOutputStream (write(byte[] buffer,0,len) / flush()</td></tr><tr><td>Reader</td><td>FileReader (read(char[] cbuf))</td><td>BufferedReader (read(char[] cbuf) / readLine())</td></tr><tr><td>Writer</td><td>FileWriter (write(char[] cbuf,0,len)</td><td>BufferedWriter (write(char[] cbuf,0,len) / flush()</td></tr></tbody></table><h4 id="4-抽象基本类"><a href="#4-抽象基本类" class="headerlink" title="4.抽象基本类"></a>4.抽象基本类</h4><h5 id="4-1-InputStream-amp-Reader"><a href="#4-1-InputStream-amp-Reader" class="headerlink" title="4.1 InputStream &amp; Reader"></a>4.1 InputStream &amp; Reader</h5><p><strong>InputStream</strong> 和 <strong>Reader</strong> 是所有 输入流的基类。程序中打开的文件 IO 资源不属于内存里的资源，垃圾回收机制无法回收该资源，所以应该件 <strong>显式关闭文件 IO  资源</strong>。</p><p>FileInputStream 从文件系统中的某个文件中获得输入字节。FileInputStream用于读取非文本数据之类的原始字节流。要读取字符流，需要使用 FileReader.</p><p><strong>InputStream类中方法:</strong></p><ul><li><code>int read()</code> : 从输入流中读取数据的下一个字节。返回 0 到 255 范围内的 int 字节值。如果因为已经到达流末尾而没有可用的字节，则返回值 -1。</li><li><code>int read(byte[] b)</code> : 从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。如果因为已经到达流末尾而没有可用的字节，则返回值 -1。否则<strong>以整数形式返回实际读取的字节数</strong>。</li><li><code>int read(byte[] b, int off,int len)</code> : 将输入流中最多 len 个数据字节读入 byte 数组。尝试读取 len 个字节，但读取的字节也可能小于该值。以整数形式返回实际读取的字节数。如果因为流位于文件末尾而没有可用的字节，则返回值-1。</li><li><code>public void close() throws IOException</code> : 关闭此输入流并释放与该流关联的所有系统资源</li></ul><p><strong>Reader类中方法:</strong></p><ul><li><code>int read()</code>: 读取单个字符。作为整数读取的字符，范围在 0 到 65535 之间 (0x00-0xffff)（2个字节的Unicode码），如果已到达流的末尾，则返回 -1</li><li><code>int read(char[] cbuf)</code> : 将字符读入数组。如果已到达流的末尾，则返回 -1。否则返回本次读取的字符数。</li><li><code>int read(char[] cbuf,int off,int len)</code> : 将字符读入数组的某一部分。存到数组cbuf中，从off处开始存储，最多读len个字符。如果已到达流的末尾，则返回 -1。否则返回本次读取的字符数。</li><li><code>public void close() throws IOException</code> : 关闭此输入流并释放与该流关联的所有系统资源</li></ul><h5 id="4-2-OutputStream-amp-Writer"><a href="#4-2-OutputStream-amp-Writer" class="headerlink" title="4.2 OutputStream &amp; Writer"></a>4.2 OutputStream &amp; Writer</h5><ol><li><p>OutputStream 和 Writer 也非常相似：</p><p><code>void write(int b/int c);</code> : 将指定的字节或字符写入此输出流<br><code>void write(byte[] b/char[] cbuf);</code>: 写入字节或字符数组<br><code>void write(byte[] b/char[] buff, int off, int len);</code> : 将指定 byte 数组中从偏移量 off 开始的 len 个字节或字符写入此输出流<br><code>void flush();</code>: 刷新该流的缓冲，则立即将它们写入预期目标<br><code>void close();</code> 需要先刷新，再关闭此流</p></li><li><p>因为字符流直接以字符作为操作单位，所以 Writer 可以用字符串来替换字符数组，即以 String 对象作为参数</p><p><code>void write(String str);</code>: 写入字符串。<br><code>void write(String str, int off, int len);</code>: 写入字符串的某一部分。</p></li><li><p>FileOutputStream 从文件系统中的某个文件中获得输出字节。FileOutputStream用于写出非文本数据之类的原始字节流。要写出字符流，需要使用 FileWriter</p></li></ol><h4 id="5-结构图"><a href="#5-结构图" class="headerlink" title="5.结构图"></a>5.结构图</h4><h5 id="5-1-IO流体系"><a href="#5-1-IO流体系" class="headerlink" title="5.1 IO流体系"></a>5.1 IO流体系</h5><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191225233552369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="5-2-操作方式分类结构图"><a href="#5-2-操作方式分类结构图" class="headerlink" title="5.2 操作方式分类结构图"></a>5.2 操作方式分类结构图</h5><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/2019122523360525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="5-3-操作对象分类结构图"><a href="#5-3-操作对象分类结构图" class="headerlink" title="5.3 操作对象分类结构图"></a>5.3 操作对象分类结构图</h5><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191225233617745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="三-文件流-节点流"><a href="#三-文件流-节点流" class="headerlink" title="三.文件流(节点流)"></a>三.文件流(节点流)</h3><h4 id="1-FileReader-FileWriter应用"><a href="#1-FileReader-FileWriter应用" class="headerlink" title="1.FileReader/FileWriter应用"></a>1.FileReader/FileWriter应用</h4><h5 id="1-将hello-txt文件内容读入程序中，并输出到控制台"><a href="#1-将hello-txt文件内容读入程序中，并输出到控制台" class="headerlink" title="1.将hello.txt文件内容读入程序中，并输出到控制台"></a>1.将hello.txt文件内容读入程序中，并输出到控制台</h5><p>说明点：</p><ol><li><code>read()</code>的理解：返回读入的一个字符。如果达到文件末尾，返回<strong>-1</strong></li><li>异常的处理：为了保证流资源一定可以执行关闭操作。需要使用<code>try-catch-finally</code>处理</li><li>读入的文件一定要存在，否则就会报<code>FileNotFoundException</code>。</li></ol><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fileReaderTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>        FileReader fileReader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.实例化File对象</span>            File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.提供具体流</span>            fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.数据读取</span>            <span class="token comment" spellcheck="true">//read():返回读入的一个字符。如果达到文件末尾，返回-1</span>            <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>data <span class="token operator">=</span> fileReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将int类强制转化为char输出</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//4.关闭流</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fileReader <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//先判断是否为null，避免NullPointerException</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fileReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="2-对read-操作升级"><a href="#2-对read-操作升级" class="headerlink" title="2.对read()操作升级"></a>2.对read()操作升级</h5><p>使用read的重载方法 (read(char[] cbuf))</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fileReaderTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>        FileReader fileReader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.File类的实例化</span>            File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.具体流的提供</span>            fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.数据读取</span>            <span class="token comment" spellcheck="true">//read(char[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-1</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fileReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//第一种写法：</span><span class="token comment" spellcheck="true">//                for(int i =0;i&lt;len;i++){</span><span class="token comment" spellcheck="true">//                    System.out.print(cbuf[i]);</span><span class="token comment" spellcheck="true">//                }</span>                <span class="token comment" spellcheck="true">//错误写法</span><span class="token comment" spellcheck="true">//                for(int i=0;i&lt;cbuf.length;i++){</span><span class="token comment" spellcheck="true">//                    System.out.print(cbuf[i]);</span><span class="token comment" spellcheck="true">//                }</span>                <span class="token comment" spellcheck="true">//第二种写法：</span>                String data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//错误写法</span><span class="token comment" spellcheck="true">//                String data = new String(cbuf);</span><span class="token comment" spellcheck="true">//                System.out.print(data);</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fileReader<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//4.流的关闭</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fileReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="3-从内存中写出数据到硬盘的文件里"><a href="#3-从内存中写出数据到硬盘的文件里" class="headerlink" title="3.从内存中写出数据到硬盘的文件里"></a>3.从内存中写出数据到硬盘的文件里</h5><p>说明：</p><ol><li>输出操作，对应的File可以不存在的。并不会报异常</li><li>File对应的硬盘中的文件<br>如果不存在，在输出的过程中，会自动创建此文件。<br>如果存在：<br>如果流使用的构造器是：<code>FileWriter(file,false) / FileWriter(file)</code>:对原有文件的覆盖<br>如果流使用的构造器是：<code>FileWriter(file,true)</code>:不会对原有文件覆盖，而是在原有文件基础上追加内容</li></ol><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fileWriterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        FileWriter fileWriter <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.File类实例化</span>            File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.具体流实例化</span>            fileWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.数据写入</span>            fileWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"I have a dream!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fileWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"You need to have a dream!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fileWriter<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//4.关闭流</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fileWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="4-实现文本文件的复制"><a href="#4-实现文本文件的复制" class="headerlink" title="4.实现文本文件的复制"></a>4.实现文本文件的复制</h5><ol><li>源文件必须存在</li><li>目标文件可以不存在</li><li>读取时常用：<code>read(char[] cbuf)</code><br>写入时常用：<code>write(char[] cbuf,int off,int len)</code></li><li>不能使用字符流来处理图片等字节数据</li></ol><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyFileTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>        FileReader fr <span class="token operator">=</span> null<span class="token punctuation">;</span>        FileWriter fw <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//File实例化</span>            File srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            File destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//具体流实例化</span>            fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//数据读取与写入</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//每次读取5个字符并存放在数组中</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//记录每次读入到cbuf数组中的字符的个数</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//每次写出len个字符</span>                fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭流</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>fr<span class="token operator">!=</span>null<span class="token punctuation">)</span>                fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//若第一个try-catch发送异常，会进行处理，后面语句会执行</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>fw<span class="token operator">!=</span>null<span class="token punctuation">)</span>                fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="2-FileInputStream-FileOutputStream应用"><a href="#2-FileInputStream-FileOutputStream应用" class="headerlink" title="2.FileInputStream/FileOutputStream应用"></a>2.FileInputStream/FileOutputStream应用</h4><h5 id="1-处理文本文件，可能出现乱码"><a href="#1-处理文本文件，可能出现乱码" class="headerlink" title="1.处理文本文件，可能出现乱码"></a>1.处理文本文件，可能出现乱码</h5><ul><li>1.若文本没有中文，是没有乱码（英文对应的ASCII码，一个字节）</li><li>2.若有中文时，可能会主线乱码（一个中文占三个字节）</li></ul><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyDocFileTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        FileInputStream fis <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//实例化File</span>            File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//实例化Stream</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//数据操作</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> fis <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//关闭Stream</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="2-实现对图片的复制操作"><a href="#2-实现对图片的复制操作" class="headerlink" title="2.实现对图片的复制操作"></a>2.实现对图片的复制操作</h5><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyImgFileTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        FileInputStream fis <span class="token operator">=</span> null<span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//实例化File</span>            File srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"爱情与友情.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            File destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"爱情与友情dest.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//实例化Stream</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//数据操作</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭Stream</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fis <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fos <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="3-封装复制操作方法，对指定路径下文件复制"><a href="#3-封装复制操作方法，对指定路径下文件复制" class="headerlink" title="3.封装复制操作方法，对指定路径下文件复制"></a>3.封装复制操作方法，对指定路径下文件复制</h5><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyFileTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//对非文本文件复制操作</span><span class="token comment" spellcheck="true">//        String srcPath = "D:\\BaiduNetdiskDownload\\videotest.avi";</span><span class="token comment" spellcheck="true">//        String destPath = "D:\\BaiduNetdiskDownload\\videotest_dest.avi";</span>        <span class="token comment" spellcheck="true">//对文本文件复制操作</span>        String srcPath <span class="token operator">=</span> <span class="token string">"hello.txt"</span><span class="token punctuation">;</span>        String destPath <span class="token operator">=</span> <span class="token string">"hello_dest.txt"</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copyFile</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span>destPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"复制完成！耗时："</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//非文本或文本文件都可以使用字节流进行复制操作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span>String srcPath<span class="token punctuation">,</span> String destPath<span class="token punctuation">)</span><span class="token punctuation">{</span>        FileInputStream fis <span class="token operator">=</span> null<span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//实例化File</span>            File srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            File destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//实例化Stream</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//数据操作</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭Stream</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fis <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fos <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-结论"><a href="#3-结论" class="headerlink" title="3.结论"></a>3.结论</h4><ol><li>对于<strong>文本</strong>文件(.txt,.java,.c,.cpp)，使用<strong>字符流</strong>处理</li><li>对于<strong>非文本</strong>文件(.jpg,.mp3,.mp4,.avi,.doc,.ppt,.xsl,…)，使用<strong>字节流</strong>处理</li><li>对于<strong>复制</strong>操作，文本文件也可以使用<strong>字节流</strong>处理，相当于进行底层搬运；<br> 反之，非文本文件，是不可以用字符流来处理的</li></ol><h3 id="四-缓存流-处理流"><a href="#四-缓存流-处理流" class="headerlink" title="四.缓存流(处理流)"></a>四.缓存流(处理流)</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ol><li><p>为了提高数据读写的速度，Java API提供了带缓冲功能的流类，在使用这些流类时，会创建一个内部缓冲区数组，缺省使用8192个字节(8Kb)的缓冲区。<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191124162902571.png" alt="在这里插入图片描述"></p></li><li><p>缓冲流要“套接”在相应的节点流之上，根据数据操作单位可以把缓冲流分为：</p><p><code>BufferedInputStream</code> 和 和 <code>BufferedOutputStream</code><br><code>BufferedReader</code> 和 和 <code>BufferedWriter</code></p></li></ol><h4 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h4><ol><li>当读取数据时，数据按块读入缓冲区，其后的读操作则直接访问缓冲区</li><li>当使用<code>BufferedInputStream</code>读取字节文件时，<code>BufferedInputStream</code>会一次性从文件中读取8192个(8Kb)，存在缓冲区中，直到缓冲区装满了，才重新从文件读取下一个8192个字节数组。</li><li>向流中写入字节时，不会直接写到文件，先写到缓冲区中直到缓冲区写满，<code>BufferedOutputStream</code>才会把缓冲区中的数据一次性写到文件里。使用方法<code>flush()</code>可以强制将缓冲区的内容全部写入输出流</li><li>关闭流的顺序和打开流的顺序相反。只要关闭最外层流即可，关闭最外层流也会相应关闭内层节点流</li><li><code>flush()</code>方法的使用：手动将buffer中内容写入文件</li><li>如果是带缓冲区的流对象的<code>close()</code>方法，不但会关闭流，还会在关闭流之前刷新缓冲区，关闭后不能再写出<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191124162918455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><h4 id="3-示例"><a href="#3-示例" class="headerlink" title="3.示例"></a>3.示例</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 缓冲流的使用(处理流的一种) * 1.缓冲流 *  BufferedInputStream *  BufferedOutputStream *  BufferedReader *  BufferedWriter * * 2.作用：提供流的读取、写入的速度 *   提高读写速度的原因：内部提供了一个缓冲区 * * 3.处理流，就是“套接”在已有的流的基础上。 * * @author zlg * @create 2019-10-08 23:58 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedStreamTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 实现非文本文件的复制     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyFileTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String srcPath <span class="token operator">=</span> <span class="token string">"D:\\BaiduNetdiskDownload\\videotest.avi"</span><span class="token punctuation">;</span>        String destPath <span class="token operator">=</span> <span class="token string">"D:\\BaiduNetdiskDownload\\videotest_dest2.avi"</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copyFile</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span>destPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"复制完成！耗时："</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 792ms  1850ms</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//封装文件复制的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span>String srcPath<span class="token punctuation">,</span>String destPath<span class="token punctuation">)</span><span class="token punctuation">{</span>        BufferedInputStream bis <span class="token operator">=</span> null<span class="token punctuation">;</span>        BufferedOutputStream bos <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.file实例化</span>            File srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            File destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.stream实例化</span>            <span class="token comment" spellcheck="true">//2.1filestream实例化</span>            FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.2bufferedstream实例化</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>            bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.data处理</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//              bos.flush();//刷新缓冲区</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//4.stream关闭</span>            <span class="token comment" spellcheck="true">//要求：先关闭外层的流，再关闭内层的流</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bis <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bos <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span><span class="token comment" spellcheck="true">//          fos.close();</span><span class="token comment" spellcheck="true">//          fis.close();</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用BufferedReader和BufferedWriter实现文本文件的复制     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bufferedCharStreamTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        BufferedReader br <span class="token operator">=</span> null<span class="token punctuation">;</span>        BufferedWriter bw <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//stream实例化</span>            br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"dbcp.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"dbcp_dest.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//data处理</span>            <span class="token comment" spellcheck="true">//方式一：</span><span class="token comment" spellcheck="true">//            char[] cbuf = new char[1024];</span><span class="token comment" spellcheck="true">//            int len;</span><span class="token comment" spellcheck="true">//            while ( (len = br.read(cbuf)) != -1){</span><span class="token comment" spellcheck="true">//                bw.write(cbuf,0,len);</span><span class="token comment" spellcheck="true">//            }</span>            <span class="token comment" spellcheck="true">//方式二：</span>            String data<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>data <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//data中不包含换行符</span>                bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//提供换行的操作</span><span class="token comment" spellcheck="true">//                bw.write(data + "\n");//data中不包含换行符</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//stream关闭</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>br <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bw <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-应用-1"><a href="#4-应用-1" class="headerlink" title="4.应用"></a>4.应用</h4><h5 id="1-图片的加密与解密"><a href="#1-图片的加密与解密" class="headerlink" title="1.图片的加密与解密"></a>1.图片的加密与解密</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PicTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//图片的加密</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        FileInputStream fis <span class="token operator">=</span> null<span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"爱情与友情.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"爱情与友情secret.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//字节数组进行修改</span>                <span class="token comment" spellcheck="true">//错误的</span>                <span class="token comment" spellcheck="true">//            for(byte b : buffer){</span>                <span class="token comment" spellcheck="true">//                b = (byte) (b ^ 5);</span>                <span class="token comment" spellcheck="true">//            }</span>                <span class="token comment" spellcheck="true">//正确的</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fos <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//图片的解密</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        FileInputStream fis <span class="token operator">=</span> null<span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"爱情与友情secret.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"爱情与友情4.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//字节数组进行修改</span>                <span class="token comment" spellcheck="true">//错误的</span>                <span class="token comment" spellcheck="true">//            for(byte b : buffer){</span>                <span class="token comment" spellcheck="true">//                b = (byte) (b ^ 5);</span>                <span class="token comment" spellcheck="true">//            }</span>                <span class="token comment" spellcheck="true">//正确的</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fos <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-获取文本上字符出现的次数-把数据写入文件"><a href="#2-获取文本上字符出现的次数-把数据写入文件" class="headerlink" title="2.获取文本上字符出现的次数,把数据写入文件"></a>2.获取文本上字符出现的次数,把数据写入文件</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 获取文本上字符出现的次数,把数据写入文件 * * 思路： * 1.遍历文本每一个字符 * 2.字符出现的次数存在Map中 * * Map&lt;Character,Integer> map = new HashMap&lt;Character,Integer>(); * map.put('a',18); * map.put('你',2); * * 3.把map中的数据写入文件 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCount</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    说明：如果使用单元测试，文件相对路径为当前module          如果使用main()测试，文件相对路径为当前工程     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWordCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        FileReader fr <span class="token operator">=</span> null<span class="token punctuation">;</span>        BufferedWriter bw <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.创建Map集合</span>            Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.遍历每一个字符,每一个字符出现的次数放到map中</span>            fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"dbcp.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//int 还原 char</span>                <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> c<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 判断char是否在map中第一次出现</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//3.把map中数据存在文件count.txt</span>            <span class="token comment" spellcheck="true">//3.1 创建Writer</span>            bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"wordcount.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.2 遍历map,再写入数据</span>            Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">>></span> entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> entry <span class="token operator">:</span> entrySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">case</span> <span class="token string">' '</span><span class="token operator">:</span>                        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"空格="</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">'\t'</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>\t表示tab 键字符                        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"tab键="</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">'\r'</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>                        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"回车="</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">'\n'</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>                        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"换行="</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token operator">:</span>                        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//4.关流</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bw <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="五-转换流-处理流"><a href="#五-转换流-处理流" class="headerlink" title="五.转换流(处理流)"></a>五.转换流(处理流)</h3><h4 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h4><ol><li><p>转换流提供了在<strong>字节流和字符流</strong>之间的转换</p></li><li><p>javaAPI提供了两个转换流：</p><p><strong><code>InputStreamReader</code></strong>：将InputStream转换为Reader</p><p><strong><code>OutPutStreamWriter</code></strong>：将Writer转换为OutputStream</p></li><li><p>字节流中的数据都是字符时，转成字符流操作更高效</p></li><li><p>可以使用转换流来处理<strong>文件乱码</strong>问题。实现编码和解码功能</p></li></ol><h4 id="2-API介绍"><a href="#2-API介绍" class="headerlink" title="2.API介绍"></a>2.API介绍</h4><ol><li><p><code>InputStreamReader</code></p><p>实现将<strong>字节</strong>的输入流按指定<strong>字符集</strong>转换为<strong>字符</strong>的输入流</p><p>需要和 <strong>InputStream</strong> “套接”</p><p>构造器：</p><p>​    <code>public InputStreamReader(InputStream in)</code></p><p>​    <code>public InputStreamReader(InputStream in, String charsetName)</code></p><p>如：<code>Reader isr = new InputStreamReader(System.in, &quot;gbk&quot;);</code></p></li><li><p><code>OutputStreamWriter</code></p><p>实现将<strong>字符</strong>的输出流按指定<strong>字符集</strong>转换为<strong>字节</strong>的输出流</p><p>需要和 <strong>OutputStream</strong> “套接”</p><p>构造器：</p><p>​    <code>public OutputStreamWriter(OutputStream out)</code></p><p>​    <code>public OutputStreamWriter(OutputStream out, String charsetName)</code></p></li></ol><h4 id="3-图例"><a href="#3-图例" class="headerlink" title="3.图例"></a>3.图例</h4><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191124163036754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="4-示例"><a href="#4-示例" class="headerlink" title="4.示例"></a>4.示例</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 处理流之二：转换流的使用 * 1.转换流：属于字符流 *   InputStreamReader：将一个字节的输入流转换为字符的输入流 *   OutputStreamWriter：将一个字符的输出流转换为字节的输出流 * * 2.作用：提供字节流与字符流之间的转换 * * 3. 解码：字节、字节数组  --->字符数组、字符串      InputStreamReader(读取) *    编码：字符数组、字符串 ---> 字节、字节数组      OutputStreamWriter(写入) * * @author zlg * @create 2019-10-10 23:33 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransformStream</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 将utf-8编码的dbcp.txt文件复制转为gbk编码的dbcp_gbk.txt文件     * 系统(idea)默认字符集是utf-8     * 参数2指明了字符集，具体使用哪个字符集，取决于文件dbcp.txt保存时使用的字符集     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transformStreamTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        InputStreamReader isr <span class="token operator">=</span> null<span class="token punctuation">;</span>        OutputStreamWriter osr <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//stream实例化</span>            isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"dbcp.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            osr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"dbcp_gbk.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//数据处理</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>len <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                osr<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭流</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> osr <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    osr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> isr <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="六-字符编码"><a href="#六-字符编码" class="headerlink" title="六.字符编码"></a>六.字符编码</h3><h4 id="1-编码表由来"><a href="#1-编码表由来" class="headerlink" title="1.编码表由来"></a>1.编码表由来</h4><p>计算机只能识别二进制数据，早期由来是电信号。为了方便应用计算机，让它可以识别各个国家的文字。就将各个国家的文字用数字来表示，并一一对应，形成一张表。这就是编码表。</p><h4 id="2-常见编码表"><a href="#2-常见编码表" class="headerlink" title="2.常见编码表"></a>2.常见编码表</h4><p><strong>ASCII</strong>：美国标准信息交换码。用一个字节的7位可以表示。<br><strong>ISO8859-1</strong>：拉丁码表。欧洲码表。用一个字节的8位表示。<br><strong>GB2312</strong>：中国的中文编码表。最多两个字节编码所有字符<br><strong>GBK</strong>：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码<br><strong>Unicode</strong>：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。<br><strong>UTF-8</strong>：变长的编码方式，可用1-4个字节来表示一个字符。</p><h4 id="3-图例-1"><a href="#3-图例-1" class="headerlink" title="3.图例"></a>3.图例</h4><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191124163209239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>ANSI与Unicode<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191124163239366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="4-Unicode问题"><a href="#4-Unicode问题" class="headerlink" title="4.Unicode问题"></a>4.Unicode问题</h4><ol><li>Unicode不完美，这里就有三个问题，一个是，我们已经知道，英文字母只用一个字节表示就够了，第二个问题是如何才能区别Unicode和ASCII？计算机怎么知道两个字节表示一个符号，而不是分别表示两个符号呢？第三个，如果和GBK等双字节编码方式一样，用最高位是1或0表示两个字节和一个字节，就少了很多值无法用于表示字符，不够表示所有字符。Unicode在很长一段时间内无法推广，直到互联网的出现。</li><li>面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。</li><li>Unicode只是定义了一个庞大的、全球通用的字符集，并为每个字符规定了唯一确定的编号，具体存储成什么样的字节流，取决于字符编码方案。推荐的Unicode编码是UTF-8和UTF-16<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191124163352851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><h4 id="5-编码与解码"><a href="#5-编码与解码" class="headerlink" title="5.编码与解码"></a>5.编码与解码</h4><p>编码：字符数组、<strong>字符串</strong> —&gt; 字节、<strong>字节数组</strong>      <strong>OutputStreamWriter</strong>(写入)</p><p>解码：字节、<strong>字节数组</strong>  —&gt;字符数组、<strong>字符串</strong>      <strong>InputStreamReader</strong>(读取)</p><h3 id="七-其他流-处理流"><a href="#七-其他流-处理流" class="headerlink" title="七.其他流(处理流)"></a>七.其他流(处理流)</h3><h4 id="1-标准输入、输出流"><a href="#1-标准输入、输出流" class="headerlink" title="1.标准输入、输出流"></a>1.标准输入、输出流</h4><h5 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1.概念"></a>1.概念</h5><ol><li><p><strong>System.in</strong>和<strong>System.out</strong>分别代表了系统标准的输入和输出设备</p></li><li><p>默认输入设备是：键盘，输出设备是：显示器</p></li><li><p>System.in的类型是<strong>InputStream</strong></p></li><li><p>System.out的类型是<strong>PrintStream</strong>，其是OutputStream的子类FilterOutputStream 的子类</p></li><li><p>重定向：通过System类的<strong>setIn</strong>，<strong>setOut</strong>方法对默认设备进行改变。</p><p><code>public static void setIn(InputStream in)</code><br><code>public static void setOut(PrintStream out)</code></p></li></ol><h5 id="2-示例"><a href="#2-示例" class="headerlink" title="2.示例"></a>2.示例</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 1.标准的输入，输出流     * System.in:标准的输入流，默认从键盘输入     返回 InputStream       System.out:标准的输出流，默认从控制台输出   返回 PrintStream       System类的setIn(InputStream is) / setOut(PrintStream ps)方式重新指定输入和输出的流。     *     * 从键盘输入字符串，要求将读取到的整行字符串转成大写输出。然后继续进行输入操作，        直至当输入“e”或者“exit”时，退出程序。     方法一：使用Scanner实现，调用next()返回一个字符串         Scanner s = new Scanner(System.in);        s.nextInt();        s.next();     方法二：使用System.in实现。System.in  --->  转换流 ---> BufferedReader的readLine()     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BufferedReader br <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 把"标准"输入流(键盘输入)这个字节流包装成字符流,再包装成缓冲流</span>            br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入字符串："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String data <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 读取用户输入的一行数据 --> 阻塞程序</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"exit"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>               <span class="token comment" spellcheck="true">// 将读取到的整行字符串转成大写输出</span>                String str <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>br <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭过滤流时,会自动关闭它包装的底层节点流</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="2-打印流"><a href="#2-打印流" class="headerlink" title="2.打印流"></a>2.打印流</h4><h5 id="1-概念-3"><a href="#1-概念-3" class="headerlink" title="1.概念"></a>1.概念</h5><ol><li><p>实现将 <strong>基本数据类型</strong>的数据格式转化为 <strong>字符串</strong>输出</p></li><li><p>打印流：<strong><code>PrintStream</code></strong>和<strong><code>PrintWriter</code></strong>，都是输出流</p><p>提供了一系列重载的print()和println()方法，用于多种<strong>数据类型的输出</strong><br><code>PrintStream</code>和<code>PrintWriter</code>的输出<strong>不会抛出IOException异常</strong><br><code>PrintStream</code>和<code>PrintWriter</code>有<strong>自动flush功能</strong><br><code>PrintStream</code> 打印的所有字符都使用平台的默认字符编码转换为<strong>字节</strong>。<br>在需要写入<strong>字符</strong>而不是写入字节的情况下，应该使用 <code>PrintWriter</code> 类。<br>System.out返回的是<strong>PrintStream的实例</strong></p></li></ol><h5 id="2-示例-1"><a href="#2-示例-1" class="headerlink" title="2.示例"></a>2.示例</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 打印流：PrintStream 和PrintWriter ：都是输出流       提供了一系列重载的print() 和 println()     * 练习：使用打印输出流将ASCII码写入到文本中     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printStreamTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        PrintStream ps <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建打印输出流,设置为自动刷新模式(写入换行符或字节 '\n' 时都会刷新输出缓冲区)</span>            ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//重新指定打印流</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ps <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 把标准输出流(控制台输出)改成文件</span>                System<span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//循环写入ASCII</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//每50个数据一行</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ps <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-数据流"><a href="#3-数据流" class="headerlink" title="3.数据流"></a>3.数据流</h4><h5 id="1-概念-4"><a href="#1-概念-4" class="headerlink" title="1.概念"></a>1.概念</h5><ol><li><p>为了方便地操作Java语言的<strong>基本数据类型</strong>和<strong>String</strong>的数据，可以使用数据流。</p></li><li><p>数据流有两个类：(用于读取和写出基本数据类型、String类的数据）</p><p><code>**DataInputStream**</code> 和 <strong><code>DataOutputStream</code></strong><br>在 分别“套接”在 <code>InputStream</code> 和 和 <code>OutputStream</code>  子类的流 上</p></li><li><p>DataInputStream 中的方法</p><p><code>boolean readBoolean()</code>         <code>byte readByte()</code><br><code>char readChar()</code>             <code>float readFloat()</code><br><code>double readDouble()</code>         <code>short readShort()</code><br><code>long readLong()</code>             <code>int readInt()</code><br><code>String readUTF()</code>             <code>void readFully(byte[] b)</code></p></li><li><p>DataOutputStream 中的方法</p><p>将上述的方法的read改为相应的write即可。</p></li></ol><h5 id="2-示例-2"><a href="#2-示例-2" class="headerlink" title="2.示例"></a>2.示例</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 数据流     3.1 DataInputStream 和 DataOutputStream     3.2 作用：用于读取或写出基本数据类型的变量或字符串     练习：将内存中的字符串、基本数据类型的变量写出到文件中。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dataOutputStreamTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DataOutputStream dos <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 创建连接到指定文件的数据输出流对象</span>            dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 写UTF字符串</span>            dos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//刷新操作，将内存中的数据写入文件</span>            dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dos <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 数据流      将文件中存储的基本数据类型变量和字符串读取到内存中，保存在变量中。      注意点：读取不同类型的数据的顺序要与当初写入文件时，保存的数据的顺序一致！     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dataInputStreamTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DataInputStream dis <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String name <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> age <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> isMale <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", isMale="</span> <span class="token operator">+</span> isMale<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dis <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    dis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="八-对象流-处理流"><a href="#八-对象流-处理流" class="headerlink" title="八.对象流(处理流)"></a>八.对象流(处理流)</h3><h4 id="1-概念-5"><a href="#1-概念-5" class="headerlink" title="1.概念"></a>1.概念</h4><ol><li><p><code>ObjectInputStream</code>和<code>OjbectOutputSteam</code></p><p>用于存储和读取 <strong>基本数据类型</strong>数据或 <strong>对象</strong>的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</p></li><li><p><strong>序列化</strong>：用<code>ObjectOutputStream</code>类 <strong>保存</strong>基本类型数据或对象的机制 (<strong>数据转为二进制流</strong>)</p></li><li><p><strong>反序列化</strong>：用<code>ObjectInputStream</code>类 <strong>读取</strong>基本类型数据或对象的机制 (<strong>二进制流还原为数据</strong>)</p></li><li><p><code>ObjectOutputStream</code>和<code>ObjectInputStream</code>不能序列化<strong><code>static</code></strong>和<strong><code>transient</code></strong>修饰的成员变量</p></li></ol><h4 id="2-对象序列化"><a href="#2-对象序列化" class="headerlink" title="2.对象序列化"></a>2.对象序列化</h4><ol><li><p>对象序列化机制允许把内存中的<strong>Java对象</strong>转换成平台无关的<strong>二进制流</strong>，从而允许把这种二进制流持久地<strong>保存在磁盘</strong>上，或通过网络将这种二进制流<strong>传输到另一个网络节点</strong>。(反序列化)当其它程序获取了这种二进制流，就可以恢复成原来的Java对象</p></li><li><p>序列化的好处在于可将任何实现了<code>Serializable</code>接口的<strong>对象转化为 字节数据</strong>，使其在<strong>保存和传输</strong>时可被还原</p></li><li><p>序列化是 RMI（Remote Method Invoke – 远程方法调用）过程的参数和返回值都必须实现的机制，而 RMI 是 JavaEE 的基础。因此序列化机制是JavaEE 平台的基础</p></li><li><p>如果需要让某个对象支持序列化机制，则必须让对象所属的<strong>类及其属性</strong>是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一。否则，会抛出<strong><code>NotSerializableException</code></strong>异常</p><p><strong><code>Serializable</code></strong><br><code>Externalizable</code></p></li><li><p>实现了<code>Serializable</code> 接口的对象，可将它们转换成<strong>一系列字节</strong>，并可在以后完全恢复回原来的样子。 <strong>这一过程亦可通过网络进行。这意味着序列化机制能自动补偿操作系统间的差异。</strong>在 换句话说，可以先在Windows 机器上创台 建一个对象，对其序列化，然后通过网络发给一台Unix 机器，然后在那里准确无误地重新“装配”。不必关心数据在不同机器上如何表示，也不必关心字节的顺序或者其他任何细节。(序列化接口的理解)</p></li><li><p>由于大部分作为参数的类如<code>String</code> 、<code>Integer</code> 等都实现了<code>java.io.Serializable</code> 的接口，也可以利用多态的性质，作为参数使接口更灵活。(序列化接口是空方法接口)</p></li></ol><h4 id="3-序列化版本标识符"><a href="#3-序列化版本标识符" class="headerlink" title="3.序列化版本标识符"></a>3.序列化版本标识符</h4><ol><li><p>凡是实现Serializable接口的类都有一个表示<strong>序列化版本标识符的静态变量</strong>：</p><p><code>private static final long serialVersionUID</code>;<br><code>serialVersionUID</code>用来表明类的不同版本间的兼容性。 简言之，其目的是以序列化对象进行版本控制，有关各版本反序列化时是否兼容。<br>如果类没有显示定义这个静态常量，它的值是Java运行时环境根据<strong>类的内部细节自动生成</strong>的。若类的<strong>实例变量做了修改</strong>，<code>serialVersionUID</code> 可能发生变化。故建议，<strong>显式声明</strong>。</p></li><li><p>简单来说，Java的序列化机制是通过在运行时判断类的<code>serialVersionUID</code>来验证<strong>版本一致性</strong>的。在进行反序列化时，JVM会把传来的<strong>字节流</strong>中的<code>serialVersionUID</code>与<strong>本地相应实体</strong><code>serialVersionUID</code>进行比较，如果相同就认为是一致的，可以进行<strong>反序列化</strong>，否则就会出现序列化版本不一致的异常。(<code>InvalidCastException</code>)</p></li></ol><h4 id="4-应用-2"><a href="#4-应用-2" class="headerlink" title="4.应用"></a>4.应用</h4><ol><li><p>若某个类实现了 <code>Serializable</code> 接口，该类的对象就是可序列化的：</p><p>创建一个 <code>ObjectOutputStream</code><br>调用 <code>ObjectOutputStream</code>  对象的 <code>writeObject</code>( 对象)  方法输出可 序列化对象<br>注意写出一次，操作<code>flush()</code> 一次</p></li><li><p>反序列化</p><p>创建一个 <code>ObjectInputStream</code><br>调用 <code>readObject()</code>  方法读取流中的对象</p></li><li><p>强调：如果某个类的属性不是基本数据类型或 String 类型，而是另一个引用类型，那么这个引用类型必须是<strong>可序列化</strong>的，否则拥有该类型的<code>Field</code> 的类也不能序列化</p></li></ol><h4 id="5-示例"><a href="#5-示例" class="headerlink" title="5.示例"></a>5.示例</h4><h5 id="1-测试类"><a href="#1-测试类" class="headerlink" title="1.测试类"></a>1.测试类</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 对象流的使用 * 1.ObjectInputStream 和 ObjectOutputStream * 2.作用：用于存储和读取基本数据类型数据或对象的处理流。 * 它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。 * * 3.要想一个java对象是可序列化的，需要满足相应的要求。见Person.java * * 4.序列化机制： * 对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种 * 二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。 * 当其它程序获取了这种二进制流，就可以恢复成原来的Java对象。 * * @author zlg * @create 2019-10-13 23:25 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectStreamTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 序列化过程：将内存中的java对象保存到磁盘中或通过网络传输出去     * 使用ObjectOutputStream实现     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">objectOutputStreamTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ObjectOutputStream oos <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"person.dat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Card</span><span class="token punctuation">(</span>1278234L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//刷新操作</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oos <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 反序列化：将磁盘文件中的对象或网络中传输的二进制流还原为内存中的一个java对象     * 使用ObjectInputStream来实现     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">objectInputStreamTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ObjectInputStream ois <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"person.dat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Person person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ois <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-Person类"><a href="#2-Person类" class="headerlink" title="2.Person类"></a>2.Person类</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Person需要满足如下的要求，方可序列化 * 1.需要实现接口：Serializable * 2.当前类提供一个全局常量：serialVersionUID * 3.除了当前Person类需要实现Serializable接口之外，还必须保证其内部所有属性 *   也必须是可序列化的。（默认情况下，基本数据类型及包装类，String都已实现序列化） * * 注意：ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量 * static不是类所私有的，transient是修饰不用序列化的成员变量 * * @author zlg * @create 2019-10-14 0:20 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//序列化的类需要显式声明序列化版本标识符</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 12421351542L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Card card<span class="token punctuation">;</span>    <span class="token keyword">public</span> Card <span class="token function">getCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> card<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCard</span><span class="token punctuation">(</span>Card card<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>card <span class="token operator">=</span> card<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> Card card<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>card <span class="token operator">=</span> card<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"username='"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", card="</span> <span class="token operator">+</span> card <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="3-Card类"><a href="#3-Card类" class="headerlink" title="3.Card类"></a>3.Card类</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Card</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//序列化的类需要显式声明序列化版本标识符</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 54635742L<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long ID<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Card{"</span> <span class="token operator">+</span>                <span class="token string">"ID="</span> <span class="token operator">+</span> ID <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Long <span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ID<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setID</span><span class="token punctuation">(</span>Long ID<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ID <span class="token operator">=</span> ID<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Card</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Card</span><span class="token punctuation">(</span>Long ID<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ID <span class="token operator">=</span> ID<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="九-随机存取文件流"><a href="#九-随机存取文件流" class="headerlink" title="九.随机存取文件流"></a>九.随机存取文件流</h3><h4 id="1-概念-6"><a href="#1-概念-6" class="headerlink" title="1.概念"></a>1.概念</h4><ol><li>RandomAccessFile声明在<code>java.io</code>包下，但直接继承<strong>Object类</strong>。并实现了<code>DataInput，DataOutput</code>这两个接口，意味着该类既可以读也可以写。</li><li>RandomAccessFile类支持”<strong>随机访问</strong>“的方式，程序可直接跳到文件的任意位置来读，写文件。<ol><li>支持只访问文件的部分内容</li><li>可以向已存在的文件后追加内容</li></ol></li><li>RandomAccessFile对象包含一个记录指针，用以标示当前读写的位置。RandomAccessFile类对象可以自由移动记录指针：<ol><li><code>long getFilePointer()</code>：获取文件记录指针的<strong>当前位置</strong></li><li><code>void seek(long pos)</code>：将文件记录指针<strong>定位</strong>到pos位置</li></ol></li></ol><h4 id="2-构造器"><a href="#2-构造器" class="headerlink" title="2.构造器"></a>2.构造器</h4><ol><li>构造器<ol><li><code>public RandomAccessFile(File file, String mode)</code></li><li><code>public RandomAccessFile(String name, String mode)</code></li></ol></li><li>创建 RandomAccessFile 类实例需要指定一个 mode 参数，该参数指定 RandomAccessFile 的访问模式：<ol><li>r:  以<strong>只读方式</strong>打开</li><li>rw ：打开以<strong>读取和写入</strong></li><li>rwd: 打开以读取和 写入；同步文件内容的更新</li><li>rws: 打开以便读取和 写入； 同步文件内容和元数据的更新</li></ol></li><li>如果模式为<strong>只读r</strong>。则不会创建文件，而是会去读取一个已经存在的文件，如果读取的文件不存在则会出现异常。 如果模式为<strong>rw读写</strong>。如果文件不存在则会去创建文件，如果存在则不会创建。</li></ol><h4 id="3-应用"><a href="#3-应用" class="headerlink" title="3.应用"></a>3.应用</h4><h5 id="1-实现对图片的复制操作"><a href="#1-实现对图片的复制操作" class="headerlink" title="1.实现对图片的复制操作"></a>1.实现对图片的复制操作</h5><pre class=" language-java"><code class="language-java">        RandomAccessFile raf <span class="token operator">=</span> null<span class="token punctuation">;</span>        RandomAccessFile raf2 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            raf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"爱情与友情.jpg"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            raf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"爱情与友情raf.jpg"</span><span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>len <span class="token operator">=</span> raf<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                raf2<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>raf <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    raf<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>raf2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    raf2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h5 id="2-在原有内容某处进行数据插入操作"><a href="#2-在原有内容某处进行数据插入操作" class="headerlink" title="2.在原有内容某处进行数据插入操作"></a>2.在原有内容某处进行数据插入操作</h5><pre class=" language-java"><code class="language-java">        RandomAccessFile raf <span class="token operator">=</span> null<span class="token punctuation">;</span>        ByteArrayOutputStream baos <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            raf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将从4个字符开始后的内容复制</span>            raf<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 方式一</span><span class="token comment" spellcheck="true">//            保存指针3后面的所有数据到StringBuilder中</span>            <span class="token comment" spellcheck="true">/*StringBuilder sb = new StringBuilder((int)new File("hello.txt").length());            byte[] buffer = new byte[1024];            int len;            while ( (len = raf.read(buffer)) != -1){                sb.append(new String(buffer,0,len));            }*/</span>            <span class="token comment" spellcheck="true">// 方式二</span>            baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> raf<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//再次将指针调到角标为3的位置</span>            raf<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//在原有内容上进行覆盖操作，并不会覆盖原文件的所有内容</span>            raf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"xyz"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//写入复制的内容</span>            <span class="token comment" spellcheck="true">// 方式一</span>            <span class="token comment" spellcheck="true">//将StringBuilder中的数据写入到文件中</span><span class="token comment" spellcheck="true">//            raf.write(sb.toString().getBytes());</span>            <span class="token comment" spellcheck="true">// 方式二</span>            raf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>baos <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>raf <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    raf<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h3 id="十-NIO-2概念及相关类"><a href="#十-NIO-2概念及相关类" class="headerlink" title="十.NIO.2概念及相关类"></a>十.NIO.2概念及相关类</h3><h4 id="1-NIO概述"><a href="#1-NIO概述" class="headerlink" title="1.NIO概述"></a>1.NIO概述</h4><ol><li>Java NIO (New IO，Non-Blocking IO)是从Java 1.4版本开始引入的一套新的IO API，可以替代标准的Java IO API。NIO与原来的IO有同样的作用和目的，但是使用的方式完全不同，<strong>NIO支持面向缓冲区的(IO是面向流的)、基于通道的IO操作。</strong>NIO将以更加高效的方式进行文件的读写操作。</li><li>Java API中提供了两套NIO，<strong>一套是针对标准输入输出NIO，另一套就是网络编程NIO。</strong><ol><li><code>java.nio.channels.Channel</code><ol><li>FileChannel: 处理本地文件  (标准输入输出NIO)</li><li>SocketChannel: TCP网络编程的客户端的Channel</li><li>ServerSocketChannel: TCP网络编程的服务器端的Channel</li><li>DatagramChannel：UDP网络编程中发送端和接收端的Channel</li></ol></li></ol></li><li>随着 <strong>JDK 7 的发布</strong>，Java对NIO进行了极大的扩展，增强了对文件处理和文件系统特性的支持，以至于我们称他们为 NIO.2。</li></ol><h4 id="2-核心API"><a href="#2-核心API" class="headerlink" title="2.核心API"></a>2.核心API</h4><ol><li>早期java只提供了File类访问文件系统,File类功能有限,提供的性能也不高,并且<strong>大多数方法在出错时仅返回失败，并不会提供异常信息</strong>.</li><li>NIO.2为了弥补不足,引入了<strong>Path接口</strong>,代表一个平台无关的平台路径,扫描了目录结构中文件的置.<strong>Path可以看成是File类的升级版本，实际引用的资源也可以不存在。</strong></li><li>NIO.2在java.nio.file包下还提供了<strong>Files、Paths工具类</strong>，<strong>Files包含了大量静态的工具方法来操作文件；Paths则包含了两个返回Path的静态工厂方法。</strong></li><li>Paths 类提供的静态 get() 方法用来获取 Path 对象：<ol><li><code>static Path get(String first, String … more)</code> : 用于将多个字符串串连成路径</li><li><code>static Path get(URI uri)</code>: 返回指定uri对应的Path路径</li></ol></li><li>示例:<ol><li><code>import java.io.File;</code><br><code>File file = new File(&quot;index.html&quot;);</code></li><li><code>import java.nio.file.Path;</code><br><code>import java.nio.file.Paths;</code><br><code>Path path = Paths.get(&quot;index.html&quot;);</code></li></ol></li></ol><h4 id="3-Path接口"><a href="#3-Path接口" class="headerlink" title="3.Path接口"></a>3.Path接口</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Path常用方法</span>String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ： 返回调用 Path 对象的字符串表示形式<span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token operator">:</span> 判断是否以 path 路径开始<span class="token keyword">boolean</span> <span class="token function">endsWith</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token operator">:</span> 判断是否以 path 路径结束<span class="token keyword">boolean</span> <span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> 判断是否是绝对路径Path <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：返回Path对象包含整个路径，不包含 Path 对象指定的文件路径Path <span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：返回调用 Path 对象的根路径Path <span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> 返回与调用 Path 对象关联的文件名<span class="token keyword">int</span> <span class="token function">getNameCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> 返回Path 根目录后面元素的数量Path <span class="token function">getName</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token operator">:</span> 返回指定索引位置 idx 的路径名称Path <span class="token function">toAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> 作为绝对路径返回调用 Path 对象    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>Path <span class="token function">resolve</span><span class="token punctuation">(</span>Path p<span class="token punctuation">)</span> <span class="token operator">:</span>合并两个路径，返回合并后的路径对应的Path对象File <span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 将Path转化为File类的对象    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span></code></pre><h4 id="4-Files类"><a href="#4-Files类" class="headerlink" title="4.Files类"></a>4.Files类</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// java.nio.file.Files  用于操作文件或目录的工具类。</span><span class="token comment" spellcheck="true">// Files 常用方法：</span>Path <span class="token function">copy</span><span class="token punctuation">(</span>Path src<span class="token punctuation">,</span> Path dest<span class="token punctuation">,</span> CopyOption … how<span class="token punctuation">)</span> <span class="token operator">:</span> 文件的复制Path <span class="token function">createDirectory</span><span class="token punctuation">(</span>Path path<span class="token punctuation">,</span> FileAttribute<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> … attr<span class="token punctuation">)</span> <span class="token operator">:</span> 创建一个目录    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>Path <span class="token function">createFile</span><span class="token punctuation">(</span>Path path<span class="token punctuation">,</span> FileAttribute<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> … arr<span class="token punctuation">)</span> <span class="token operator">:</span> 创建一个文件    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Path path<span class="token punctuation">)</span> <span class="token operator">:</span> 删除一个文件<span class="token operator">/</span>目录，如果不存在，执行报错<span class="token keyword">void</span> <span class="token function">deleteIfExists</span><span class="token punctuation">(</span>Path path<span class="token punctuation">)</span> <span class="token operator">:</span> Path对应的文件<span class="token operator">/</span>目录如果存在，执行删除    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>Path <span class="token function">move</span><span class="token punctuation">(</span>Path src<span class="token punctuation">,</span> Path dest<span class="token punctuation">,</span> CopyOption…how<span class="token punctuation">)</span> <span class="token operator">:</span> 将 src 移动到 dest 位置<span class="token keyword">long</span> <span class="token function">size</span><span class="token punctuation">(</span>Path path<span class="token punctuation">)</span> <span class="token operator">:</span> 返回 path 指定文件的大小    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Files 常用方法：用于判断</span><span class="token keyword">boolean</span> <span class="token function">exists</span><span class="token punctuation">(</span>Path path<span class="token punctuation">,</span> LinkOption … opts<span class="token punctuation">)</span> <span class="token operator">:</span> 判断文件是否存在<span class="token keyword">boolean</span> <span class="token function">isDirectory</span><span class="token punctuation">(</span>Path path<span class="token punctuation">,</span> LinkOption … opts<span class="token punctuation">)</span> <span class="token operator">:</span> 判断是否是目录<span class="token keyword">boolean</span> <span class="token function">isRegularFile</span><span class="token punctuation">(</span>Path path<span class="token punctuation">,</span> LinkOption … opts<span class="token punctuation">)</span> <span class="token operator">:</span> 判断是否是文件<span class="token keyword">boolean</span> <span class="token function">isHidden</span><span class="token punctuation">(</span>Path path<span class="token punctuation">)</span> <span class="token operator">:</span> 判断是否是隐藏文件<span class="token keyword">boolean</span> <span class="token function">isReadable</span><span class="token punctuation">(</span>Path path<span class="token punctuation">)</span> <span class="token operator">:</span> 判断文件是否可读<span class="token keyword">boolean</span> <span class="token function">isWritable</span><span class="token punctuation">(</span>Path path<span class="token punctuation">)</span> <span class="token operator">:</span> 判断文件是否可写<span class="token keyword">boolean</span> <span class="token function">notExists</span><span class="token punctuation">(</span>Path path<span class="token punctuation">,</span> LinkOption … opts<span class="token punctuation">)</span> <span class="token operator">:</span> 判断文件是否不存在<span class="token comment" spellcheck="true">// Files 常用方法：用于操作内容</span>SeekableByteChannel <span class="token function">newByteChannel</span><span class="token punctuation">(</span>Path path<span class="token punctuation">,</span> OpenOption…how<span class="token punctuation">)</span> <span class="token operator">:</span> 获取与指定文件的连接，how 指定打开方式。DirectoryStream<span class="token operator">&lt;</span>Path<span class="token operator">></span> <span class="token function">newDirectoryStream</span><span class="token punctuation">(</span>Path path<span class="token punctuation">)</span> <span class="token operator">:</span> 打开 path 指定的目录InputStream <span class="token function">newInputStream</span><span class="token punctuation">(</span>Path path<span class="token punctuation">,</span> OpenOption…how<span class="token punctuation">)</span><span class="token operator">:</span>获取 InputStream 对象OutputStream <span class="token function">newOutputStream</span><span class="token punctuation">(</span>Path path<span class="token punctuation">,</span> OpenOption…how<span class="token punctuation">)</span> <span class="token operator">:</span> 获取 OutputStream 对象</code></pre><h4 id="5-示例-1"><a href="#5-示例-1" class="headerlink" title="5.示例"></a>5.示例</h4><h5 id="1-Path接口示例"><a href="#1-Path接口示例" class="headerlink" title="1.Path接口示例"></a>1.Path接口示例</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Path<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Paths<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 1.jdk 7.0 时，引入了 Path、Paths、Files三个类。 * 2.此三个类声明在：java.nio.file包下。 * 3.Path可以看做是java.io.File类的升级版本。也可以表示文件或文件目录，与平台无关 * 4.如何实例化Path:使用Paths. * static Path get(String first, String … more) : 用于将多个字符串串连成路径 * static Path get(URI uri): 返回指定uri对应的Path路径 * * @author zlg * @create 2019 下午 2:44 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PathTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如何使用Paths实例化Path</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Path path1 <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\nio\\hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//new File(String filepath)</span>        Path path2 <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\"</span><span class="token punctuation">,</span> <span class="token string">"nio\\hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//new File(String parent,String filename);</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Path path3 <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\"</span><span class="token punctuation">,</span> <span class="token string">"nio"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Path中的常用方法</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Path path1 <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\"</span><span class="token punctuation">,</span> <span class="token string">"nio\\nio1\\nio2\\hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Path path2 <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        String toString() ： 返回调用 Path 对象的字符串表示形式</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        boolean startsWith(String path) : 判断是否以 path 路径开始</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path1<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"d:\\nio"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        boolean endsWith(String path) : 判断是否以 path 路径结束</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path1<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        boolean isAbsolute() : 判断是否是绝对路径</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path1<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path2<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Path getParent() ：返回Path对象包含整个路径，不包含 Path 对象指定的文件路径</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path1<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path2<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Path getRoot() ：返回调用 Path 对象的根路径</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path1<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path2<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Path getFileName() : 返回与调用 Path 对象关联的文件名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path1<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path2<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        int getNameCount() : 返回Path 根目录后面元素的数量</span><span class="token comment" spellcheck="true">//        Path getName(int idx) : 返回指定索引位置 idx 的路径名称</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> path1<span class="token punctuation">.</span><span class="token function">getNameCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"*****"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        Path toAbsolutePath() : 作为绝对路径返回调用 Path 对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path1<span class="token punctuation">.</span><span class="token function">toAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path2<span class="token punctuation">.</span><span class="token function">toAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Path resolve(Path p) :合并两个路径，返回合并后的路径对应的Path对象</span>        Path path3 <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\"</span><span class="token punctuation">,</span> <span class="token string">"nio"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Path path4 <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"nioo\\hi.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path3 <span class="token operator">=</span> path3<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>path4<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        File toFile(): 将Path转化为File类的对象</span>        File file <span class="token operator">=</span> path1<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Path--->File的转换</span>        Path newPath <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//File--->Path的转换</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-Files类示例"><a href="#2-Files类示例" class="headerlink" title="2.Files类示例"></a>2.Files类示例</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SeekableByteChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Files工具类的使用：操作文件或目录的工具类 * * @author zlg * @create 2019 下午 2:44 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilesTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        Path path1 <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\nio"</span><span class="token punctuation">,</span> <span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Path path2 <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"atguigu.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Path copy(Path src, Path dest, CopyOption … how) : 文件的复制</span>        <span class="token comment" spellcheck="true">//要想复制成功，要求path1对应的物理上的文件存在。path1对应的文件没有要求。</span><span class="token comment" spellcheck="true">//        Files.copy(path1, path2, StandardCopyOption.REPLACE_EXISTING);</span><span class="token comment" spellcheck="true">//        Path createDirectory(Path path, FileAttribute&lt;?> … attr) : 创建一个目录</span>        <span class="token comment" spellcheck="true">//要想执行成功，要求path对应的物理上的文件目录不存在。一旦存在，抛出异常。</span>        Path path3 <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\nio\\nio1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Files.createDirectory(path3);</span><span class="token comment" spellcheck="true">//        Path createFile(Path path, FileAttribute&lt;?> … arr) : 创建一个文件</span>        <span class="token comment" spellcheck="true">//要想执行成功，要求path对应的物理上的文件不存在。一旦存在，抛出异常。</span>        Path path4 <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\nio\\hi.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Files.createFile(path4);</span><span class="token comment" spellcheck="true">//        void delete(Path path) : 删除一个文件/目录，如果不存在，执行报错</span><span class="token comment" spellcheck="true">//        Files.delete(path4);</span><span class="token comment" spellcheck="true">//        void deleteIfExists(Path path) : Path对应的文件/目录如果存在，执行删除.如果不存在，正常执行结束</span>        Files<span class="token punctuation">.</span><span class="token function">deleteIfExists</span><span class="token punctuation">(</span>path3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Path move(Path src, Path dest, CopyOption…how) : 将 src 移动到 dest 位置</span>        <span class="token comment" spellcheck="true">//要想执行成功，src对应的物理上的文件需要存在，dest对应的文件没有要求。</span><span class="token comment" spellcheck="true">//        Files.move(path1, path2, StandardCopyOption.ATOMIC_MOVE);</span><span class="token comment" spellcheck="true">//        long size(Path path) : 返回 path 指定文件的大小</span>        <span class="token keyword">long</span> size <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>path2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        Path path1 <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\nio"</span><span class="token punctuation">,</span> <span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Path path2 <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"atguigu.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        boolean exists(Path path, LinkOption … opts) : 判断文件是否存在</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Files<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>path2<span class="token punctuation">,</span> LinkOption<span class="token punctuation">.</span>NOFOLLOW_LINKS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        boolean isDirectory(Path path, LinkOption … opts) : 判断是否是目录</span>        <span class="token comment" spellcheck="true">//不要求此path对应的物理文件存在。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Files<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span> LinkOption<span class="token punctuation">.</span>NOFOLLOW_LINKS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        boolean isRegularFile(Path path, LinkOption … opts) : 判断是否是文件</span><span class="token comment" spellcheck="true">//        boolean isHidden(Path path) : 判断是否是隐藏文件</span>        <span class="token comment" spellcheck="true">//要求此path对应的物理上的文件需要存在。才可判断是否隐藏。否则，抛异常。</span><span class="token comment" spellcheck="true">//        System.out.println(Files.isHidden(path1));</span><span class="token comment" spellcheck="true">//        boolean isReadable(Path path) : 判断文件是否可读</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Files<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span>path1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        boolean isWritable(Path path) : 判断文件是否可写</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Files<span class="token punctuation">.</span><span class="token function">isWritable</span><span class="token punctuation">(</span>path1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        boolean notExists(Path path, LinkOption … opts) : 判断文件是否不存在</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Files<span class="token punctuation">.</span><span class="token function">notExists</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span> LinkOption<span class="token punctuation">.</span>NOFOLLOW_LINKS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * StandardOpenOption.READ:表示对应的Channel是可读的。     * StandardOpenOption.WRITE：表示对应的Channel是可写的。     * StandardOpenOption.CREATE：如果要写出的文件不存在，则创建。如果存在，忽略     * StandardOpenOption.CREATE_NEW：如果要写出的文件不存在，则创建。如果存在，抛异常     *     * @author shkstart 邮箱：shkstart@126.com     * @throws IOException     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>        Path path1 <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\nio"</span><span class="token punctuation">,</span> <span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        InputStream newInputStream(Path path, OpenOption…how):获取 InputStream 对象</span>        InputStream inputStream <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">newInputStream</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span> StandardOpenOption<span class="token punctuation">.</span>READ<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        OutputStream newOutputStream(Path path, OpenOption…how) : 获取 OutputStream 对象</span>        OutputStream outputStream <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">newOutputStream</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span> StandardOpenOption<span class="token punctuation">.</span>WRITE<span class="token punctuation">,</span>StandardOpenOption<span class="token punctuation">.</span>CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        SeekableByteChannel newByteChannel(Path path, OpenOption…how) : 获取与指定文件的连接，how 指定打开方式。</span>        SeekableByteChannel channel <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">newByteChannel</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span> StandardOpenOption<span class="token punctuation">.</span>READ<span class="token punctuation">,</span>StandardOpenOption<span class="token punctuation">.</span>WRITE<span class="token punctuation">,</span>StandardOpenOption<span class="token punctuation">.</span>CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        DirectoryStream&lt;Path>  newDirectoryStream(Path path) : 打开 path 指定的目录</span>        Path path2 <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"e:\\teach"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DirectoryStream<span class="token operator">&lt;</span>Path<span class="token operator">></span> directoryStream <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">newDirectoryStream</span><span class="token punctuation">(</span>path2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>Path<span class="token operator">></span> iterator <span class="token operator">=</span> directoryStream<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="3-使用jar包"><a href="#3-使用jar包" class="headerlink" title="3.使用jar包"></a>3.使用jar包</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 使用commons-io.jar包中的工具类FileUtils类 * * @author zlg * @create 2019 上午 11:58 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUtilsTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用FailUtils类实现非文本的复制</span>        File srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"day10\\爱情与友情.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"day10\\爱情与友情2.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            FileUtils<span class="token punctuation">.</span><span class="token function">copyFile</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">,</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程总结</title>
      <link href="/2019/11/01/xian-cheng-zong-jie/"/>
      <url>/2019/11/01/xian-cheng-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="一-基本概念"><a href="#一-基本概念" class="headerlink" title="一:基本概念"></a>一:基本概念</h2><h3 id="1-程序、进程、线程概念"><a href="#1-程序、进程、线程概念" class="headerlink" title="1.程序、进程、线程概念"></a>1.程序、进程、线程概念</h3><p><strong>程序(program)</strong>是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。</p><p><strong>进程(process)</strong>是代码在数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位。系统运行一个程序即是一个进程从创建，运行到消亡的过程。</p><p><strong>线程(thread)</strong>是进程的一个执行路径，一个进程中至少有一个线程，进程中的多个线程共享进程的堆和方法区资源，但每个线程都有自己的程序计数器、虚拟机栈和本地方法栈。线程是CPU分配的基本单位。</p><p>在windows中查看任务管理器的方式，可以看到window当前运行的进程(.exe文件的运行)：</p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191231192832930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>小结：<div style="color:red;"></div></p><ul><li>程序(program)是为完成指定任务,用某种语言编写的一组指令集合.指一段静态的代码</li><li>进程(process)是正在运行的一个程序.是一个动态的过程</li><li>线程(thread)是一个程序内部的一条执行路径</li></ul><h3 id="2-线程与进程的关系与区别"><a href="#2-线程与进程的关系与区别" class="headerlink" title="2.线程与进程的关系与区别"></a>2.线程与进程的关系与区别</h3><p>一个进程中可以有多个线程，多个线程共享进程的<strong>堆</strong>和<strong>方法区 (JDK1.8 之后的元空间)</strong>资源，但是每个线程有自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong> 和 <strong>本地方法栈</strong>。</p><p>线程 是 进程 划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。线程执行开销小，但不利于资源的管理和保护；而进程正相反</p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191231192124935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>程序计数器:</p><ul><li>字节码解释器通过改变程序计数器来依次读取指令，实现代码流程控制</li><li>多线程情况下，程序计数器用于记录当前线程执行的位置，知道线程切换回来运行到哪了</li><li>只有执行的是java代码时程序计数器记录的才是下一条指令地址. 若是native方法,记录的是undefined地址</li></ul><p>程序计数器私有主要是为了<strong>线程切换后能恢复到正确的执行位置</strong>。</p><p>虚拟机栈与本地方法栈:</p><ul><li><strong>虚拟机栈：</strong> 每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。</li><li><strong>本地方法栈：</strong> 和虚拟机栈所发挥的作用非常相似，区别是： <strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。</strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</li></ul><p>为了<strong>保证线程中的局部变量不被别的线程访问到</strong>，虚拟机栈和本地方法栈是线程私有的。</p><p>堆和方法区: </p><ul><li>堆和方法区是所有线程共享的资源，其中<strong>堆</strong>是进程中最大的一块内存，主要用于<strong>存放新创建的对象</strong> (所有对象都在这里分配内存)，<strong>方法区</strong>主要用于存放<strong>已被加载的类信息、常量、静态变量、即时编译器编译后的代码</strong>等数据。</li></ul><h3 id="3-单核CPU-多核CPU的理解"><a href="#3-单核CPU-多核CPU的理解" class="headerlink" title="3.单核CPU,多核CPU的理解"></a>3.单核CPU,多核CPU的理解</h3><ol><li>单核CPU,实质是一种假的多线程,在一个时间单元内,也只能执行一个线程的任务.</li><li>多核CPU是多线程,每个核单独执行一个线程的任务.</li><li>一个java应用程序java.exe,至少有三个线程:<strong>main()主线程,gc()垃圾回收线程,异常处理线程.</strong></li></ol><h3 id="4-并行与并发区别"><a href="#4-并行与并发区别" class="headerlink" title="4.并行与并发区别"></a>4.并行与并发区别</h3><ol><li><strong>并行:多个CPU同时执行多个任务.(多个人同时做不同的事)</strong> ; 单位时间内，多个任务同时执行。</li><li><strong>并发:一个CPU(采用时间片)同时执行多个任务.(多个人做同一件事)</strong> ; 同一时间段，多个任务都在执行 (单位时间内不一定同时执行)</li></ol><h3 id="5-使用多线程好处及可能带来的问题"><a href="#5-使用多线程好处及可能带来的问题" class="headerlink" title="5.使用多线程好处及可能带来的问题"></a>5.使用多线程好处及可能带来的问题</h3><p>从总体上来说：</p><ul><li><strong>从计算机底层来说：</strong> 线程可以比作是轻量级的进程，是程序执行的最小单位,线程间的切换和调度的成本远远小于进程。另外，多核 CPU 时代意味着多个线程可以同时运行，这减少了线程上下文切换的开销。</li><li><strong>从当代互联网发展趋势来说：</strong> 现在的系统动不动就要求百万级甚至千万级的并发量，而多线程并发编程正是开发高并发系统的基础，利用好多线程机制可以大大提高系统整体的并发能力以及性能。</li></ul><p><strong>提高应用程序的响应, 提高CPU的利用率, 改善程序结构</strong></p><p>并发编程的目的就是为了能提高程序的执行效率提高程序运行速度，但是并发编程并不总是能提高程序运行速度的，而且并发编程可能会遇到很多问题，比如：<strong>内存泄漏、上下文切换、死锁还有受限于硬件和软件的资源闲置问题</strong>。</p><h3 id="6-何时需要多线程"><a href="#6-何时需要多线程" class="headerlink" title="6.何时需要多线程"></a>6.何时需要多线程</h3><ul><li>程序需要同时执行两个或多个任务.</li><li>程序需要实现一些需要等待的任务, 如用户输入、文件读写操作、网络操作、搜索等</li><li>需要一些后台运行的程序时.</li></ul><h2 id="二-线程的创建和使用"><a href="#二-线程的创建和使用" class="headerlink" title="二:线程的创建和使用"></a>二:线程的创建和使用</h2><p>JVM允许程序运行多个线程,通过<strong>java.lang.Thread</strong>类体现.JDK1.5之前有两种方式创建线程: <strong>继承Thread类 和 实现Runnable接口</strong>. JDK5新增创建方式: <strong>实现Callable接口 和 线程池</strong></p><h3 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1.继承Thread类"></a>1.继承Thread类</h3><p><strong>Thread类特性:</strong></p><ul><li><strong>每个线程都是通过某个特定Thread对象的run()方法完成操作的</strong>,常把run()方法的主体称为<strong>线程体</strong>.</li><li><strong>通过Thread对象的start()方法启动线程</strong>,不是直接调用run()方法</li></ul><p><strong>Thread类构造器:</strong></p><ul><li><code>Thread()</code> : <strong>创建Thread对象</strong></li><li><code>Thread(String threadname)</code> : 创建线程并指定线程实例名</li><li><code>Thread(Runnable target)</code> : <strong>创出线程的目标对象,它实现了Runnable接口的run()</strong></li><li><code>Thread(Runnable target, String name)</code> : 创建新的Thread对象</li></ul><p><strong>流程:</strong></p><ul><li><strong>继承Thread</strong></li><li><strong>重写Thread中的run()</strong></li><li><strong>创建线程对象</strong></li><li><strong>调用对象的start(): 启动线程,调用run()</strong></li></ul><p><strong>注意:</strong></p><ul><li><strong>对象调用run()方法,没有启动多线程模式</strong>,</li><li>run()方法由JVM掉用,什么时候,执行过程都由CPU调度决定.</li><li><strong>启动多线程,必须调用start()方法</strong>.</li><li><strong>一个线程对象不能重复调用start()方法,否则发生 “线程状态不符” 异常</strong></li></ul><p>示例:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. 创建一个继承于Thread类的子类</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2. 重写Thread类的run()</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*public Thread() {                    init(null, null, "Thread-" + nextThreadNum(), 0);                }*/</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//3. 创建Thread类的子类的对象</span><span class="token comment" spellcheck="true">//        MyThread t1 = new MyThread();</span>        MyThread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"分线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置线程名称</span><span class="token comment" spellcheck="true">//        t1.setName("线程一");</span>        <span class="token comment" spellcheck="true">//4.通过此对象调用start():①启动当前线程 ② 调用当前线程的run()</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//问题一：我们不能通过直接调用run()的方式启动线程。</span><span class="token comment" spellcheck="true">//        t1.run();</span>        <span class="token comment" spellcheck="true">//问题二：再启动一个线程，遍历100以内的偶数。不可以还让已经start()的线程去执行。</span>        <span class="token comment" spellcheck="true">/*if (threadStatus != 0)            throw new IllegalThreadStateException();*/</span><span class="token comment" spellcheck="true">//        t1.start();       // java.lang.IllegalThreadStateException</span>        <span class="token comment" spellcheck="true">//我们需要重新创建一个线程的对象</span>        MyThread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"主线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如下操作仍然是在main线程中执行的。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-实现Runnable接口"><a href="#2-实现Runnable接口" class="headerlink" title="2.实现Runnable接口"></a>2.实现Runnable接口</h3><p><strong>流程:</strong></p><ul><li><strong>实现Runnable接口.</strong></li><li><strong>重写Runnable接口中的run()方法.</strong></li><li><strong>通过Thread(Runnable target)构造器创建线程对象.</strong></li><li><strong>调用start()方法: 开启线程,调用Runnable子类接口的run()方法.</strong></li></ul><p>示例:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. 创建一个实现了Runnable接口的类</span><span class="token keyword">class</span> <span class="token class-name">MyThread2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//2. 实现类去实现Runnable中的抽象方法：run()</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//3. 创建实现类的对象</span>        MyThread2 r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5. 通过Thread类的对象调用start():① 启动线程 ②调用当前线程的run()</span>        <span class="token comment" spellcheck="true">// -->调用了Runnable类型的target的run()</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//再启动一个线程，遍历100以内的偶数</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-继承Thread类与实现Runnable接口的联系"><a href="#3-继承Thread类与实现Runnable接口的联系" class="headerlink" title="3.继承Thread类与实现Runnable接口的联系"></a>3.继承Thread类与实现Runnable接口的联系</h3><p><code>public class Thread extends Object implements Runnable{ ... }</code></p><p>联系: <strong>都需要重写run()方法,将线程要执行的逻辑都声明在run()中</strong></p><p>实现Runnable接口方式的好处</p><ul><li><strong>避免了单继承的局限性</strong></li><li><strong>多个线程可以共享同一个接口实现类的对象,适合处理多个线程有共享数据的情况</strong></li></ul><h3 id="4-实现Callable接口"><a href="#4-实现Callable接口" class="headerlink" title="4.实现Callable接口"></a>4.实现Callable接口</h3><p><strong>流程:</strong></p><ul><li><strong>创建一个实现Callable接口的实现类</strong></li><li><strong>重写call方法</strong>，将此线程需要执行的操作声明在call()中</li><li><strong>创建Callable接口实现类的对象</strong></li><li>将此Callable接口实现类的对象作为参数传递到FutureTask构造器中，<strong>创建FutureTask的对象</strong></li><li>将FutureTask的对象作为参数传递到Thread类的构造器中，<strong>创建Thread对象</strong></li><li><strong>调用start()</strong> , 开启线程, 调用Callable实现类的call()方法</li></ul><p><strong>Callable接口相对于Runnable接口的优势:</strong></p><ul><li>call() 可以有<strong>返回值</strong></li><li>call() 可以<strong>抛出异常</strong>,被外面操作捕获,获取异常信息</li><li>Callable <strong>支持泛型</strong></li></ul><p><strong>说明:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">RunnableFuture</span><span class="token operator">&lt;</span>V<span class="token operator">></span><span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RunnableFuture</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Runnable</span><span class="token punctuation">,</span> Future<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Sets this Future to the result of its computation     * unless it has been cancelled.     */</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>FutureTask是Future接口的唯一的实现类,<strong>FutureTask 同时继承了Runnable, Future接口。它既可以作为</strong><br><strong>Runnable被线程执行，又可以作为Future得到Callable的返回值</strong>.</p><p>示例:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 实现Callable接口 * * @author zlg * @create 2019-11-16 15:21 */</span><span class="token comment" spellcheck="true">//1.创建一个实现Callable的实现类</span><span class="token keyword">class</span> <span class="token class-name">NumThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//2.实现call方法，将此线程需要执行的操作声明在call()中</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImplementTest2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//3.创建Callable接口实现类的对象</span>        NumThread numThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span>        <span class="token comment" spellcheck="true">// public interface RunnableFuture&lt;V> extends Runnable, Future&lt;V></span>        FutureTask<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integerFutureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>numThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>integerFutureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//6.获取Callable中call方法的返回值</span>            <span class="token comment" spellcheck="true">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span>            Integer integer <span class="token operator">=</span> integerFutureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出为: "</span> <span class="token operator">+</span> integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-实现Runnable接口和Callable接口的区别"><a href="#5-实现Runnable接口和Callable接口的区别" class="headerlink" title="5.实现Runnable接口和Callable接口的区别"></a>5.实现Runnable接口和Callable接口的区别</h3><p><code>Runnable</code>自Java 1.0以来一直存在，但<code>Callable</code>仅在Java 1.5中引入,目的就是为了来处理<code>Runnable</code>不支持的用例。<strong>Runnable 接口</strong>不会返回结果或抛出检查异常，但是<strong>Callable 接口</strong>可以。所以，如果任务不需要返回结果或抛出异常推荐使用 <strong>Runnable 接口</strong>，这样代码看起来会更加简洁。</p><p>工具类 <code>Executors</code> 可以实现 <code>Runnable</code> 对象和 <code>Callable</code> 对象之间的相互转换。（<code>Executors.callable（Runnable task</code>）或 <code>Executors.callable（Runnable task，Object resule）</code>）。</p><p><code>Runnable.java</code> :</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/**    * 被线程执行，没有返回值也无法抛出异常    */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>Callable</code> :</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 计算结果，或在无法这样做时抛出异常。     * @return 计算得出的结果     * @throws 如果无法计算结果，则抛出异常     */</span>    V <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="6-使用线程池"><a href="#6-使用线程池" class="headerlink" title="6.使用线程池"></a>6.使用线程池</h3><h4 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h4><p>提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。<strong>线程池</strong>提供了一种限制和管理资源（包括执行一个任务）。 每个<strong>线程池</strong>还维护一些基本统计信息，例如已完成任务的数量。</p><p>使用线程池的好处:</p><ul><li><strong>提高响应速度</strong>（当任务到达时，任务可以不需要的等到线程创建就能立即执行）</li><li><strong>降低资源消耗</strong>（通过重复利用已创建的线程降低线程创建和销毁造成的消耗）</li><li><strong>便于线程管理</strong>（线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控）<ul><li>corePoolSize：核心池的大小</li><li>maximumPoolSize：最大线程数</li><li>keepAliveTime：线程没有任务时最多保持多长时间后会终止</li></ul></li></ul><h4 id="6-2-相关API"><a href="#6-2-相关API" class="headerlink" title="6.2 相关API"></a>6.2 相关API</h4><p>ExecutorService：真正的线程池接口。常见子类<strong>ThreadPoolExecutor</strong></p><ul><li><code>void execute(Runnable command)</code>  ：执行任务/命令，没有返回值，一般用来执行Runnable对象</li><li><code>&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)</code> ：执行任务，有返回值，一般又来执行Callable对象</li><li><code>void shutdown()</code>  ：关闭连接池</li></ul><p>Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池</p><ul><li><code>Executors.newFixedThreadPool(n)</code> ： 创建一个可重用固定线程数的线程池</li><li><code>Executors.newSingleThreadExecutor()</code>  ：创建一个只有一个线程的线程池</li><li><code>Executors.newCachedThreadPool()</code> ：创建一个可根据需要创建新线程的线程池</li><li><code>Executors.newScheduledThreadPool(n)</code> ：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。</li></ul><p>示例:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用线程池 * * @author zlg * @create 2019-12-06 20:45 */</span><span class="token keyword">class</span> <span class="token class-name">NumThread2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">NumThread3</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 提供指定线程数量的线程池</span>        ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadPoolExecutor service <span class="token operator">=</span> <span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">)</span> executorService<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置线程池的属性</span><span class="token comment" spellcheck="true">//        System.out.println(executorService.getClass());</span><span class="token comment" spellcheck="true">//        service.setCorePoolSize(15);</span><span class="token comment" spellcheck="true">//        service.setKeepAliveTime();</span>        <span class="token comment" spellcheck="true">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span>        executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumThread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//适合适用于Runnable</span>        Future<span class="token operator">&lt;</span>Integer<span class="token operator">></span> submit <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumThread3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//适合使用于Callable</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>submit<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 2550</span>        <span class="token comment" spellcheck="true">//3.关闭连接池</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-3-执行execute-和submit-方法的区别"><a href="#6-3-执行execute-和submit-方法的区别" class="headerlink" title="6.3 执行execute()和submit()方法的区别"></a>6.3 执行execute()和submit()方法的区别</h4><ul><li><strong>execute()方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功与否；</strong></li><li><strong>submit()方法用于提交需要返回值的任务。线程池会返回一个 Future 类型的对象，通过这个 Future 对象可以判断任务是否执行成功</strong>，并且可以通过 <code>Future</code> 的 <code>get()</code>方法来获取返回值，<code>get()</code>方法会阻塞当前线程直到任务完成，而使用 <code>get（long timeout，TimeUnit unit）</code>方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完。</li></ul><p>以<strong>AbstractExecutorService</strong>接口中的一个 <code>submit</code> 方法为例子来看看源代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// AbstractExecutorService接口</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractExecutorService</span> <span class="token keyword">implements</span> <span class="token class-name">ExecutorService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// submit(Runnable task)</span>    <span class="token keyword">public</span> Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RunnableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ftask<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 调用的 newTaskFor 方法返回了一个 FutureTask 对象</span>    <span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> RunnableFuture<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>Runnable runnable<span class="token punctuation">,</span> T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再来看看<code>execute()</code>方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractExecutorService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractExecutorService</span> <span class="token keyword">implements</span> <span class="token class-name">ExecutorService</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ExecutorService</span> <span class="token keyword">extends</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="6-4-如何创建线程池"><a href="#6-4-如何创建线程池" class="headerlink" title="6.4 如何创建线程池"></a>6.4 如何创建线程池</h4><p>《阿里巴巴Java开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险</p><blockquote><p>  Executors 返回线程池对象的弊端如下：</p><ul><li><strong>FixedThreadPool 和 SingleThreadExecutor</strong> ： 允许请求的队列长度为 Integer.MAX_VALUE ，可能堆积大量的请求，从而导致OOM。</li><li><strong>CachedThreadPool 和 ScheduledThreadPool</strong> ： 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致OOM。</li></ul></blockquote><p><strong>方式一：通过构造方法实现</strong> </p><p><img src="/loading.gif" data-original="/2019/11/01/xian-cheng-zong-jie/022.png" alt></p><p> <strong>方式二：通过Executor 框架的工具类Executors来实现</strong> 我们可以创建三种类型的ThreadPoolExecutor：</p><ul><li><strong>FixedThreadPool</strong> ： 该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。</li><li><strong>SingleThreadExecutor：</strong> 方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。</li><li><strong>CachedThreadPool：</strong> 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。</li></ul><p>对应Executors工具类中的方法如图所示： </p><p><img src="/loading.gif" data-original="/2019/11/01/xian-cheng-zong-jie/023.png" alt></p><h2 id="三-Thread类的相关方法"><a href="#三-Thread类的相关方法" class="headerlink" title="三:Thread类的相关方法"></a>三:Thread类的相关方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>void start()</strong></td><td>启动当前线程,并执行当前线程的run()方法</td></tr><tr><td><strong>run()</strong></td><td>被CPU调度时执行的操作,将创建的线程要执行的操作声明在此方法中</td></tr><tr><td>String getName()</td><td>返回线程的名称</td></tr><tr><td>void setName(String name)</td><td>设置线程的名称</td></tr><tr><td>static Thread currentThread()</td><td>返回执行当前代码的线程. 在Thread子类中指this, 通常用于主线程和Runnable实现类</td></tr><tr><td><strong>static void yield()</strong></td><td>释放当前cpu的执行权</td></tr><tr><td><strong>join()</strong></td><td>在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态</td></tr><tr><td><strong>static void sleep(long millitime)</strong></td><td>让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态</td></tr><tr><td>boolean isAlive()</td><td>判断当前线程是否存活</td></tr><tr><td>stop()</td><td>强制线程生命周期结束,不推荐使用</td></tr></tbody></table><p>应用:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 示例：创建两个分线程，其中一个线程遍历100以内的偶数，另一个线程遍历100以内的奇数 * * @author zlg * @create 2019-10-25 1:56 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        MyThread1 m1 = new MyThread1();</span><span class="token comment" spellcheck="true">//        MyThread3 m2 = new MyThread3();</span><span class="token comment" spellcheck="true">//        m1.start();</span><span class="token comment" spellcheck="true">//        m3.start();</span>          <span class="token comment" spellcheck="true">// 方式二:采用匿名内部类</span>        <span class="token comment" spellcheck="true">//创建Thread类的匿名子类的方式:遍历偶数</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建Thread类的匿名子类的方式:遍历奇数</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式一:采用两个类分别执行不同任务</span><span class="token comment" spellcheck="true">// 遍历100以内偶数</span><span class="token keyword">class</span> <span class="token class-name">MyThread1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 遍历100以内奇数</span><span class="token keyword">class</span> <span class="token class-name">MyThread3</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="四-线程的优先级及分类"><a href="#四-线程的优先级及分类" class="headerlink" title="四:线程的优先级及分类"></a>四:线程的优先级及分类</h2><p>调用策略: <strong>时间片</strong>(单元时间内做任务切换) 或 <strong>抢占式</strong>(高优先级的线程抢占CPU)</p><p>调度方法: <strong>同优先级</strong>线程组成先进先出队列(先到先服务),使用时间片策略; 对<strong>高优先级</strong>,使用抢占式策略</p><p>线程优先级:</p><ul><li><strong>MAX_PRIORITY: 10;  MIN_PRIORITY: 1;  NORM_PRIORITY: 5;(默认优先级)</strong></li><li><strong>getPriority(): 返回线程等级值;  setPriority(int newPriority): 设置线程等级值</strong></li><li><strong>说明: 线程创建时继承父线程的优先级; 低优先级只是获得调度的概率低,并不一定在高优先级线程之后才被调用</strong></li></ul><p>线程分类:</p><ul><li>分为<strong>守护线程 和 用户线程</strong>.</li><li>守护线程是用来服务用户线程的,在<strong>start()方法前调用thread.setDaemon(true)可以把一个用户线程变为一个守护线程.</strong></li><li>java垃圾回收就是一个守护线程.<strong>若JVM中都是守护线程,当前JVM将退出</strong>.</li></ul><p>示例:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HelloThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                try {</span><span class="token comment" spellcheck="true">//                    sleep(10);</span><span class="token comment" spellcheck="true">//                } catch (InterruptedException e) {</span><span class="token comment" spellcheck="true">//                    e.printStackTrace();</span><span class="token comment" spellcheck="true">//                }</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//            if(i % 20 == 0){</span><span class="token comment" spellcheck="true">//                yield();</span><span class="token comment" spellcheck="true">//            }</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">HelloThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethodTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HelloThread h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token string">"Thread：1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        h1.setName("线程一");</span>        <span class="token comment" spellcheck="true">//设置分线程的优先级</span>        h1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        h1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给主线程命名</span>        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"主线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MIN_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//            if(i == 20){</span><span class="token comment" spellcheck="true">//                try {</span><span class="token comment" spellcheck="true">//                    h1.join();</span><span class="token comment" spellcheck="true">//                } catch (InterruptedException e) {</span><span class="token comment" spellcheck="true">//                    e.printStackTrace();</span><span class="token comment" spellcheck="true">//                }</span><span class="token comment" spellcheck="true">//            }</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        System.out.println(h1.isAlive());</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="五-线程的生命周期"><a href="#五-线程的生命周期" class="headerlink" title="五:线程的生命周期"></a>五:线程的生命周期</h2><h3 id="1-Thread-State类及生命周期"><a href="#1-Thread-State类及生命周期" class="headerlink" title="1.Thread.State类及生命周期"></a>1.Thread.State类及生命周期</h3><p>Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态,Thread.State类定义了线程的几种状态:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> State <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/**         * 初始状态,线程被构建,但是还没有调用start()方法         */</span>        NEW<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * 运行状态,Java线程将操作系统中的就绪和运行两种状态笼统称作"运行中"         * 就绪 -> 运行: Thread.start()方法后,将进入线程队列等待CPU时间片         * 运行 -> 就绪: yield()方法         */</span>        RUNNABLE<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * 阻塞状态,表示线程阻塞于锁         * 阻塞: 被人为挂起或执行输入输出操作时,让出CPU并临时终止自己的执行,进入阻塞状态         * 等待进入synchronized方法,等待进入synchronized块         * 获取到锁         */</span>        BLOCKED<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * 等待状态,表示线程进入等待状态,表示当前线程需要等待其它线程做出一些特点动作(通知或中断)         * Object.wait(),Object.join(),LockSupport.park()         * Object.notify(),Ojbect.notifyAll(),LockSupport.unpark(Thread)         */</span>        WAITING<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * 超时等待状态,该状态不同于 WAITING,它是可以在指定的时间自行返回         * Thread.sleep(long),Object.wait(long),Thread.join(long),LockSupport.parkNanos(),LockSupport.parkUntil()         * Object.notify(),Ojbect.notifyAll(),LockSupport.unpark(Thread)         */</span>        TIMED_WAITING<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * 终止状态,表示当前线程已经执行完毕(执行完run()方法)         * 死亡: 线程完成全部工作或被提前强制性终止或出现异常导致结束         */</span>        TERMINATED<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在一个完整的生命周期中通常要经历五种状态:</p><ol><li><strong>新建</strong>: 当一个Thread类或其子类的对象被声明并创建时</li><li><strong>就绪</strong>: start()方法后,将进入线程队列等待CPU时间片</li><li><strong>运行</strong>: 当就绪的线程被调度并获得CPU资源时,便进入运行状态</li><li><strong>阻塞</strong>: 被人为挂起或执行输入输出操作时,让出CPU并临时终止自己的执行,进入阻塞状态</li><li><strong>死亡</strong>: 线程完成全部工作或被提前强制性终止或出现异常导致结束</li></ol><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191124165624626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>图示中把等待(waiting),超时等待(timed_waiting)和阻塞(blocked)都放在了阻塞这一块,方便理解生命周期.</p><h3 id="2-线程状态转换图"><a href="#2-线程状态转换图" class="headerlink" title="2.线程状态转换图"></a>2.线程状态转换图</h3><p><img src="/loading.gif" data-original="/2019/11/01/xian-cheng-zong-jie/018.png" alt></p><ul><li><p>NEW –&gt; READY –&gt; RUNNING:</p><p>线程创建之后它将处于 <strong>NEW（新建）</strong> 状态，调用 <code>start()</code> 方法后开始运行，线程这时候处于 <strong>READY（可运行）</strong> 状态。可运行状态的线程获得了 CPU 时间片（timeslice）后就处于 <strong>RUNNING（运行）</strong> 状态。Java线程将操作系统中的就绪和运行两种状态笼统称作<strong>RUNNABLE(运行中)</strong> .</p></li><li><p>RUNNING –&gt; READY:</p><p>当线程调用 <code>yield()</code> 方法或失去CPU执行权后,会进入可运行状态.</p></li><li><p>RUNNING –&gt; WAITING –&gt; READY:</p><p>当线程执行 <code>wait()</code>方法之后，线程进入 <strong>WAITING（等待）</strong> 状态。进入等待状态的线程需要依靠其他线程的<strong>通知</strong>才能够返回到运行状态.</p></li><li><p>RUNNING  –&gt; TIME_WAITING –&gt; READY:</p><p>而 <strong>TIME_WAITING(超时等待)</strong> 状态相当于在等待状态的基础上增加了超时限制，比如通过 <code>sleep（long millis）</code>方法或 <code>wait（long millis）</code>方法可以将 Java 线程置于 TIMED_WAITING 状态。当超时<strong>时间到达后</strong> Java 线程将会返回到 RUNNABLE 状态。</p></li><li><p>RUNNING –&gt; BLOCKED –&gt; READY:</p><p>当线程调用同步方法时，在<strong>没有获取到锁</strong>的情况下，线程将会进入到 <strong>BLOCKED（阻塞）</strong> 状态。</p></li><li><p>RUNNING –&gt; TERMINATED:</p><p>线程在执行 Runnable 的<code>run()</code>方法之后将会进入到 <strong>TERMINATED（终止）</strong> 状态。</p></li></ul><h3 id="3-启动线程为什么不能直接调用run-方法"><a href="#3-启动线程为什么不能直接调用run-方法" class="headerlink" title="3.启动线程为什么不能直接调用run()方法"></a>3.启动线程为什么不能直接调用run()方法</h3><p>new 一个 Thread，线程进入了新建状态;调用 start() 方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。 start() 会执行线程的相应准备工作，然后自动执行 run() 方法的内容，这是真正的多线程工作。 而直接执行 run() 方法，会把 run 方法当成一个 main 线程下的普通方法去执行，并不会在某个线程中执行它，所以这并不是多线程工作。</p><p><strong>总结：</strong> <span style="color:red;">调用 start 方法方可启动线程并使线程进入就绪状态，而 run 方法只是 thread 的一个普通方法调用，还是在主线程里执行。</span></p><h3 id="4-上下文切换"><a href="#4-上下文切换" class="headerlink" title="4.上下文切换"></a>4.上下文切换</h3><p>多线程编程中一般线程的个数都大于 CPU 核心的个数，而一个 CPU 核心在任意时刻只能被一个线程使用，为了让这些线程都能得到有效执行，CPU 采取的策略是<strong>为每个线程分配时间片并轮转的形式。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。</strong></p><p>概括来说就是：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换回这个任务时，可以再加载这个任务的状态。<strong>任务从保存到再加载的过程就是一次上下文切换</strong>。</p><p>线程上下文切换时机有: 当前线程的CPU时间片使用完处于就绪状态时, 当前线程被其他线程中断时.</p><h2 id="六-线程的同步"><a href="#六-线程的同步" class="headerlink" title="六:线程的同步"></a>六:线程的同步</h2><p>多线程的安全问题</p><ul><li>问题原有: 当多条语句在操作同一个线程共享数据时,一个线程对多条语句只执行了一部分,另一个线程就参与进来执行,导致共享数据的错误.</li><li>解决办法: 对多条操作共享数据的语句,只能让一个线程都执行完,在执行过程中,其他线程不可以参与执行.</li></ul><p>线程同步的方式，解决了线程的安全问题。—好处</p><p>操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。 —局限性</p><h3 id="1-synchronized关键字"><a href="#1-synchronized关键字" class="headerlink" title="1.synchronized关键字"></a>1.synchronized关键字</h3><h4 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h4><p><span style="color:red;">synchronized关键字解决的是多个线程之间访问资源的同步性，synchronized关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。</span></p><p>synchronized关键字最主要的三种使用方式：</p><ul><li><strong>修饰实例方法:</strong> 作用于当前对象实例加锁，进入同步代码前要获得<span style="color:red;">当前对象</span>实例的锁</li><li><strong>修饰静态方法:</strong> 也就是给当前类加锁，会作用于类的<span style="color:red;">所有对象</span>实例，因为静态成员不属于任何一个实例对象，是类成员（ static 表明这是该类的一个静态资源，不管new了多少个对象，只有一份）。所以如果一个线程A调用一个实例对象的非静态 synchronized 方法，而线程B需要调用这个实例对象所属类的静态 synchronized 方法，是允许的，不会发生互斥现象，<strong>因为访问静态 synchronized 方法占用的锁是当前类的锁，而访问非静态 synchronized 方法占用的锁是当前实例对象锁</strong>。</li><li><strong>修饰代码块:</strong> 指定加锁对象，对<span style="color:red;">给定对象</span>加锁，进入同步代码库前要获得给定对象的锁。</li><li><strong>总结：</strong> <div style="color:red;"><ul><li>synchronized 关键字加到 static 静态方法和 synchronized(class)代码块上都是是给 Class 类上锁。</li><li>synchronized 关键字加到实例方法上是给对象实例上锁。</li><li>尽量不要使用 synchronized(String a) 因为JVM中，字符串常量池具有缓存功能！</li></ul></div></li></ul><p>synchronized的锁是什么:</p><ul><li>任意对象都可以作为同步锁。所有对象都自动含有单一的锁（监视器）</li><li>同步方法的锁：静态方法（类名.class）、非静态方法（this）</li><li>同步代码块：自己指定，很多时候也是指定为this或类名.class</li><li>注意:<ul><li>必须确保使用同一个资源的 <span style="color:red;">多个线程共用一把锁</span>，否则就无法保证共享资源的安全</li><li><strong>一个线程类中的所有静态方法共用同一把锁（类名.class），所有非静态方法共用同一把锁（this），同步代码块（指定需谨慎）</strong></li></ul></li></ul><p>补充：<div style="color:red;"></div></p><ul><li>在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器。<ul><li>同步代码块: <code>类名.class</code> ,    <code>Class clazz = 类名.class</code> , 类名.class只会加载一次</li><li>同步方法: 需要加上<code>static</code> ,保证是同一个对象锁.  同步监视器：<code>类名.class</code> </li></ul></li><li>在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。<ul><li>同步代码块: <code>this</code> ,唯一的类的对象</li><li>同步方法: 不需要加static, 同步监视器：<code>this</code> </li></ul></li></ul><h4 id="1-2-同步代码块"><a href="#1-2-同步代码块" class="headerlink" title="1.2 同步代码块"></a>1.2 同步代码块</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 需要被同步的代码;</span><span class="token punctuation">}</span></code></pre><p>说明：</p><ul><li>操作共享数据的代码，即为需要被同步的代码。  –&gt;不能包含代码多了，也不能包含代码少了。</li><li>共享数据：多个线程共同操作的变量。比如：ticket就是共享数据。</li><li>同步监视器，俗称：锁。任何一个类的对象，都可以充当锁。要求：<strong>多个线程必须要共用同一把锁</strong>。</li></ul><p>应用: 采用继承类的方式</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 应用:创建三个窗口卖票，总票数为100张 * 1.问题：卖票过程中，出现了重票、错票 -->出现了线程的安全问题 * 2.问题出现的原因：当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票。 * 3.如何解决：当一个线程a在操作ticket的时候，其他线程不能参与进来。直到线程a操作完ticket时，其他 *            线程才可以开始操作ticket。这种情况即使线程a出现了阻塞，也不能被改变。 */</span><span class="token comment" spellcheck="true">//方式一:采用继承类的方式</span><span class="token keyword">class</span> <span class="token class-name">Window1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 共享资源需要加上static</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//调用同步代码块</span>            <span class="token function">handleTicket1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//调用同步方法</span>            <span class="token comment" spellcheck="true">// handleTicket2();</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 方式一</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleTicket1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 同步代码块</span>        <span class="token comment" spellcheck="true">// 不能使用this,this代表w1,w2,w3</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Window1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//Class clazz = Window1.class,Window1.class只会加载一次</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//采用继承方式可省略 Thread.currentThread(),继承了getName方法</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 方式二</span>    <span class="token comment" spellcheck="true">// 同步方法: 需要加上static,保证是同一个对象锁</span>    <span class="token comment" spellcheck="true">// 方法不加static时,同步监视器：w1,w2,w3</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">handleTicket2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 同步监视器：Window1.class</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//sleep()方法属于静态方法,与对象无关</span>                <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// static方法内容不能使用this,super关键字</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>            ticket<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtendsTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Window1 w1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Window1 w2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Window1 w3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-3-同步方法"><a href="#1-3-同步方法" class="headerlink" title="1.3 同步方法"></a>1.3 同步方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">add</span> <span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。</p><ol><li>同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。</li><li><strong>非静态的同步方法，同步监视器是：this</strong></li><li><strong>静态的同步方法，同步监视器是：类名.class</strong></li></ol><p>应用: 采用实现接口的方式</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 应用:创建三个窗口卖票，总票数为100张 * 1.问题：卖票过程中，出现了重票、错票 -->出现了线程的安全问题 * 2.问题出现的原因：当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票。 * 3.如何解决：当一个线程a在操作ticket的时候，其他线程不能参与进来。直到线程a操作完ticket时，其他 *            线程才可以开始操作ticket。这种情况即使线程a出现了阻塞，也不能被改变。 */</span><span class="token comment" spellcheck="true">//方式二:采用实现接口的方式</span><span class="token keyword">class</span> <span class="token class-name">Window2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不需要加static</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//同步方法</span><span class="token comment" spellcheck="true">//            handleTicket();</span>            <span class="token comment" spellcheck="true">//同步代码块</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//此时的this:唯一的Window2的对象</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// getName()属于Thread的方法,Runnable接口中没有该方法</span>                    <span class="token comment" spellcheck="true">//采用实现方式不能省略 Thread.currentThread()</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ticket<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//同步方法: 不需要加static</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">handleTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//同步监视器：this</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>            ticket<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImplementTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Window2 w1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w1<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-4-关于是否释放锁的操作"><a href="#1-4-关于是否释放锁的操作" class="headerlink" title="1.4 关于是否释放锁的操作"></a>1.4 关于是否释放锁的操作</h4><p>释放锁的操作:</p><ul><li>当前线程的同步方法、同步代码块执行结束</li><li>当前线程在同步代码块、同步方法中遇到break、return终止了该代码块、该方法的继续执行</li><li>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致异常结束</li><li>当前线程在同步代码块、同步方法中执行了线程对象的<code>wait()</code> 方法，当前线程暂停，并释放锁</li></ul><p>不会释放锁的操作:</p><ul><li>线程执行同步代码块或同步方法时，程序调用<code>Thread.sleep()</code> 、<code>Thread.yield()</code> 方法暂停当前线程的执行</li><li>线程执行同步代码块时，其他线程调用了该线程的<code>suspend()</code> 方法将该线程挂起，该线程不会释放锁（同步监视器）, 尽量避免使用suspend()和resume()来控制线程</li></ul><h4 id="1-5-单例设计模式之懒汉式"><a href="#1-5-单例设计模式之懒汉式" class="headerlink" title="1.5 单例设计模式之懒汉式"></a>1.5 单例设计模式之懒汉式</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 双重校验锁实现对象单例（线程安全）</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//先判断对象是否已经实例过，没有实例化过才进入加锁代码</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//类对象加锁</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Singleton s1 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singleton s2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>instance采用 volatile 关键字修饰也是很有必要的， instance= new Singleton(); 这段代码其实是分为三步执行：</p><ol><li>为 instance分配内存空间</li><li>初始化 instance</li><li>将 instance指向分配的内存地址</li></ol><p>但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1-&gt;3-&gt;2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T1 执行了 1 和 3，此时 T2 调用 getInstance() 后发现 instance不为空，因此返回 instance，但此时 instance还未被初始化。</p><p><strong>使用 volatile 可以禁止 JVM 的指令重排，保证在多线程环境下也能正常运行。</strong></p><h3 id="2-线程死锁"><a href="#2-线程死锁" class="headerlink" title="2.线程死锁"></a>2.线程死锁</h3><h4 id="2-1-什么是线程死锁"><a href="#2-1-什么是线程死锁" class="headerlink" title="2.1 什么是线程死锁"></a>2.1 什么是线程死锁</h4><p><strong>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁.</strong><br><strong>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续. 使用同步时, 要避免出现死锁.</strong></p><p>如下图所示，线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对方的资源，所以这两个线程就会互相等待而进入死锁状态。</p><p><img src="/loading.gif" data-original="/2019/11/01/xian-cheng-zong-jie/019.png" alt></p><p>为什么会产生死锁呢?死锁的产生必须具备以下四个条件:</p><ul><li><strong>互斥条件</strong>: 该资源同时只由一个线程占用</li><li><strong>请求并持有条件</strong>: 一个线程已经持有了至少一个资源,又提出新的资源请求而被阻塞的同时并不释放自己已经获取的资源</li><li><strong>不可剥夺条件</strong>: 线程获取到的资源在自己使用完之前不能被其它线程抢占,只有自己使用完毕后才由自己释放该资源</li><li><strong>环路等待条件</strong>: 在发送死锁时,必然存在一个线程一资源的环形链.即若干进程之间形成一种头尾相接的循环等待资源关系</li></ul><p>下面通过一个例子来说明线程死锁:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLockTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建资源</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Object resourceA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Object resourceB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建线程A</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resourceA<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//同步监视器：Object对象:resourceA</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"get ResourceA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"waiting get ResourceB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resourceB<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//同步监视器：Object对象:resourceB</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"get ResourceB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建线程B</span>        Thread threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resourceB<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//同步监视器：Object对象:resourceB</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"get ResourceB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"waiting get ResourceA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resourceA<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//同步监视器：Object对象:resourceA</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"get ResourceA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启动线程</span>      threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果:</p><pre class=" language-java"><code class="language-java">Thread<span class="token punctuation">[</span>Thread<span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span>get ResourceAThread<span class="token punctuation">[</span>Thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span>get ResourceBThread<span class="token punctuation">[</span>Thread<span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span>waiting get ResourceBThread<span class="token punctuation">[</span>Thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span>waiting get ResourceA</code></pre><p>线程 A 通过 synchronized (resourceA) 获得 resourceA 的监视器锁，然后通过<code>Thread.sleep(1000);</code>让线程 A 休眠 1s 为的是让线程 B 得到执行然后获取到 resourceB 的监视器锁。线程 A 和线程 B 休眠结束了都开始企图请求获取对方的资源，然后这两个线程就会陷入互相等待的状态，这也就产生了死锁。</p><p>上面的例子是如何满足死锁的四个条件的:</p><ul><li>首先resourceA和resourceB都是互斥资源 – 互斥</li><li>线程A获取到resourceA的锁资源,又等待获取resourceB的锁资源 – 请求并持有</li><li>线程A获取到resourceA的锁资源后,该资源不会被线程掠夺走 – 不可剥夺</li><li>线程A持有objectA资源并等待获取ObjectB资源,而线程B持有objectB资源并等待获取ObjectA资源 – 环路等待</li></ul><h4 id="2-2-如何避免线程死锁"><a href="#2-2-如何避免线程死锁" class="headerlink" title="2.2 如何避免线程死锁"></a>2.2 如何避免线程死锁</h4><p>要想避免死锁,只需要破环掉至少一个构造死锁的必要条件即可,目前只有请求并持有和环路等待条件是可以破环的.</p><ul><li>请求并持有: 一次性申请所有的资源</li><li>环路等待: 使用资源申请的有序性原则来预防.按某一顺序申请资源,释放资源则反序释放</li></ul><p>那么什么是资源申请的有序性呢?我们对上面线程B的代码进行如下修改:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建线程B</span>Thread threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resourceA<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//同步监视器：Object对象:resourceA</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"get ResourceA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>              Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"waiting get ResourceB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resourceB<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//同步监视器：Object对象:resourceB</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"get ResourceB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出结果为:</p><pre class=" language-java"><code class="language-java">Thread<span class="token punctuation">[</span>Thread<span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span>get ResourceAThread<span class="token punctuation">[</span>Thread<span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span>waiting get ResourceBThread<span class="token punctuation">[</span>Thread<span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span>get ResourceBThread<span class="token punctuation">[</span>Thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span>get ResourceAThread<span class="token punctuation">[</span>Thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span>waiting get ResourceBThread<span class="token punctuation">[</span>Thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span>get ResourceB</code></pre><p>线程 A 首先获得到 resourceA 的监视器锁,这时候线程 B 就会被阻塞而不会再去获取资源B。然后线程 A 就可以获取到 resourceB 的监视器锁。使用后放弃对resourceB的持有,然后再释放对resourceA的持有，线程 B 从阻塞状态变为可运行状态。所以资源的有序性破环了资源的请求并持有和环路等待条件，因此避免了死锁。</p><h3 id="3-Lock接口"><a href="#3-Lock接口" class="headerlink" title="3.Lock接口"></a>3.Lock接口</h3><h4 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h4><p>从JDK 5.0开始，Java提供了更强大的线程同步机制——通过<strong>显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。</strong><code>java.util.concurrent.locks.Lock</code>接口是控制多个线程对共享资源进行访问的工具。<strong>锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。</strong></p><p><code>ReentrantLock</code> 类实现了 Lock接口 ，它拥有与 synchronized 相同的并发性和内存语义，<strong>在实现线程安全的控制中，比较常用的是ReentrantLock，可以显式加锁、释放锁。</strong>解决线程安全问题中优先使用顺序：<span style="color:red;">Lock &gt; 同步代码块（已经进入了方法体，分配了相应资源）&gt; 同步方法（在方法体之外）</span></p><p>synchronized 与 Lock的异同？<div style="color:red;"></div></p><ul><li>相同：二者都可以解决线程安全问题</li><li>不同：<ul><li>Lock是显式锁(需要手动的启动同步<code>lock()</code> ,同时结束同步也需要手动的实现<code>unlock()</code> );synchronized是隐式锁(执行完相应的同步代码后自动的释放同步监视器)</li><li>Lock只有代码块锁，synchronized有代码块锁和方法锁</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性(提供更多的子类)</li></ul></li></ul><p>示例:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1.实例化ReentrantLock</span>    <span class="token keyword">private</span> ReentrantLock reentrantLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//2.调用锁定方法lock(),每次只能有一个线程对Lock对象加锁</span>            reentrantLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//同步监视器: lock对象</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//保证线程安全的代码</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ticket<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//3.调用解锁方法：unlock(),对Lock对象解锁</span>                reentrantLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Window w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-synchronized和ReentrantLock-的区别"><a href="#3-2-synchronized和ReentrantLock-的区别" class="headerlink" title="3.2 synchronized和ReentrantLock 的区别"></a>3.2 synchronized和ReentrantLock 的区别</h4><p><strong>① 两者都是可重入锁</strong></p><p>“可重入锁”概念是：自己可以再次获取自己的内部锁。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁的时候还是可以获取的，如果不可锁重入的话，就会造成死锁。同一个线程每次获取锁，锁的计数器都自增1，所以要等到锁的计数器下降为0时才能释放锁</p><p><strong>② synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API</strong></p><p>synchronized 是依赖于 JVM 实现的，前面我们也讲到了 虚拟机团队在 JDK1.6 为 synchronized 关键字进行了很多优化，但是这些优化都是在虚拟机层面实现的，并没有直接暴露给我们。ReentrantLock 是 JDK 层面实现的（也就是 API 层面，需要 lock() 和 unlock() 方法配合 try/finally 语句块来完成），所以我们可以通过查看它的源代码，来看它是如何实现的。</p><p><strong>③ ReentrantLock 比 synchronized 增加了一些高级功能</strong></p><p>相比synchronized，ReentrantLock增加了一些高级功能。主要来说主要有三点：<strong>①等待可中断；②可实现公平锁；③可实现选择性通知（锁可以绑定多个条件）</strong></p><ul><li><strong>ReentrantLock提供了一种能够中断等待锁的线程的机制</strong>，通过lock.lockInterruptibly()来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。</li><li><strong>ReentrantLock可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。</strong> ReentrantLock默认情况是非公平的，可以通过 ReentrantLock类的<code>ReentrantLock(boolean fair)</code>构造方法来制定是否是公平的。</li><li>synchronized关键字与wait()和notify()/notifyAll()方法相结合可以实现等待/通知机制，ReentrantLock类当然也可以实现，但是需要借助于Condition接口与newCondition() 方法。Condition是JDK1.5之后才有的，它具有很好的灵活性，比如可以实现多路通知功能也就是在一个Lock对象中可以创建多个Condition实例（即对象监视器），<strong>线程对象可以注册在指定的Condition中，从而可以有选择性的进行线程通知，在调度线程上更加灵活。 在使用notify()/notifyAll()方法进行通知时，被通知的线程是由 JVM 选择的，用ReentrantLock类结合Condition实例可以实现“选择性通知”</strong> ，这个功能非常重要，而且是Condition接口默认提供的。而synchronized关键字就相当于整个Lock对象中只有一个Condition实例，所有的线程都注册在它一个身上。如果执行notifyAll()方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题，而Condition实例的signalAll()方法 只会唤醒注册在该Condition实例中的所有等待线程。</li></ul><p>如果你想使用上述功能，那么选择ReentrantLock是一个不错的选择。</p><p><strong>④ 性能已不是选择标准</strong></p><h3 id="4-volatile关键字"><a href="#4-volatile关键字" class="headerlink" title="4.volatile关键字"></a>4.volatile关键字</h3><h4 id="4-1-Java内存模型"><a href="#4-1-Java内存模型" class="headerlink" title="4.1 Java内存模型"></a>4.1 Java内存模型</h4><p>在 JDK1.2 之前，Java的内存模型实现总是从<strong>主存</strong>（即共享内存）读取变量，是不需要进行特别的注意的。而在当前的 Java 内存模型下，线程可以把变量保存<strong>本地内存</strong>（比如机器的寄存器）中，而不是直接在主存中进行读写。这就可能造成一个线程在主存中修改了一个变量的值，而另外一个线程还继续使用它在寄存器中的变量值的拷贝，造成<strong>数据的不一致</strong>。</p><p><img src="/loading.gif" data-original="/2019/11/01/xian-cheng-zong-jie/020.png" alt></p><p>要解决这个问题，就需要把变量声明为<strong>volatile</strong>，这就指示 JVM，这个变量是不稳定的，每次使用它都到主存中进行读取。</p><p>说白了， <strong>volatile</strong> 关键字的主要作用就是保证变量的可见性然后还有一个作用是防止指令重排序。</p><p><img src="/loading.gif" data-original="/2019/11/01/xian-cheng-zong-jie/021.png" alt></p><h4 id="4-2-synchronized和volatile-的区别"><a href="#4-2-synchronized和volatile-的区别" class="headerlink" title="4.2 synchronized和volatile 的区别"></a>4.2 synchronized和volatile 的区别</h4><ul><li><strong>volatile关键字</strong>是线程同步的<strong>轻量级实现</strong>，所以<strong>volatile性能肯定比synchronized关键字要好</strong>。但是<strong>volatile关键字只能用于变量而synchronized关键字可以修饰方法以及代码块</strong>。synchronized关键字在JavaSE1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其它各种优化之后执行效率有了显著提升，<strong>实际开发中使用 synchronized 关键字的场景还是更多一些</strong>。</li><li><strong>多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞</strong></li><li><strong>volatile关键字能保证数据的可见性，但不能保证数据的原子性。synchronized关键字两者都能保证。</strong></li><li><strong>volatile关键字主要用于解决变量在多个线程之间的可见性，而 synchronized关键字解决的是多个线程之间访问资源的同步性。</strong></li></ul><h2 id="七-线程的通信"><a href="#七-线程的通信" class="headerlink" title="七:线程的通信"></a>七:线程的通信</h2><h3 id="1-wait-notify-notifyAll"><a href="#1-wait-notify-notifyAll" class="headerlink" title="1.wait(),notify(),notifyAll()"></a>1.wait(),notify(),notifyAll()</h3><ul><li><code>wait()</code>: 当前线程就进入阻塞状态，并释放同步监视器</li><li><code>notify()</code>: 唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个</li><li><code>notifyAll()</code>: 唤醒所有被wait的线程</li></ul><p>注意:</p><ul><li>三个方法是定义在java.lang.Object类中</li><li>三个方法必须使用在同步代码块或同步方法中</li><li>三个方法的调用者必须是同步代码块或同步方法中的同步监视器。否则，会出现IllegalMonitorStateException异常</li></ul><p>示例:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用两个线程打印 1-100。线程1, 线程2 交替打印</span><span class="token keyword">class</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                obj<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>                    number<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//使得调用如下wait()方法的线程进入阻塞状态</span>                        obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommunicationTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Number number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-sleep-和-wait-的异同点"><a href="#2-sleep-和-wait-的异同点" class="headerlink" title="2.sleep() 和 wait()的异同点"></a>2.sleep() 和 wait()的异同点</h3><p>相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</p><p>不同点：</p><ul><li>两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</li><li>调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中</li><li>关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，<strong>sleep()不会释放锁，wait()会释放锁</strong></li><li>Wait 通常被用于线程间交互/通信，sleep 通常被用于暂停执行</li><li>wait() 方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的 notify() 或者 notifyAll() 方法。sleep() 方法执行完成后，线程会自动苏醒。使用 wait(long timeout)超时后线程也会自动苏醒</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>书籍: &lt;Java 并发编程之美&gt;</li><li><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/Multithread/JavaConcurrencyBasicsCommonInterviewQuestionsSummary" target="_blank" rel="noopener">Java 并发基础常见面试题总结</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合源码学习</title>
      <link href="/2019/10/28/ji-he-yuan-ma/"/>
      <url>/2019/10/28/ji-he-yuan-ma/</url>
      
        <content type="html"><![CDATA[<h3 id="一-ArrayList"><a href="#一-ArrayList" class="headerlink" title="一.ArrayList"></a>一.ArrayList</h3><p>ArrayList 底层是数组队列,相当于<strong>动态数组</strong>.与 Java 中的数组相比,它的容量能动态增长.线性表的顺序存储,插入删除元素的时间复杂度为<strong>O（n）</strong>,求表长以及增加元素,取第 i 元素的时间复杂度为<strong>O（1）</strong> .</p><p>它继承于 <strong>AbstractList</strong>，实现了 <strong>List</strong>, <strong>RandomAccess</strong>, <strong>Cloneable</strong>, <strong>java.io.Serializable</strong> 这些接口。</p><ul><li>ArrayList 继承了AbstractList，实现了List。它是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。</li><li>ArrayList 实现了<strong>RandomAccess 接口</strong>， RandomAccess 是一个标志接口，表明实现这个这个接口的 List 集合是支持<strong>快速随机访问</strong>的。在 ArrayList 中，我们即可以通过元素的序号快速获取元素对象，这就是快速随机访问。</li><li>ArrayList 实现了<strong>Cloneable 接口</strong>，即覆盖了函数 clone()，<strong>能被克隆</strong>。</li><li>ArrayList 实现<strong>java.io.Serializable 接口</strong>，这意味着ArrayList<strong>支持序列化</strong>，<strong>能通过序列化去传输</strong>。</li><li>和 Vector 不同，<strong>ArrayList 中的操作不是线程安全的</strong>！所以，建议在单线程中才使用 ArrayList，而在多线程中可以选择 Collections中的静态方法 <code>List&lt;T&gt; synchronizedList(List&lt;T&gt; list)</code> 将其转为线程安全的。</li></ul><h4 id="1-JDK7"><a href="#1-JDK7" class="headerlink" title="1.JDK7"></a>1.JDK7</h4><p>ArrayList是List接口的可变数组的实现。实现了所有可选列表操作，并允许包括 null 在内的所有元素。除了实现 List 接口外，此类还提供一些方法来操作内部用来存储列表的数组的大小。</p><h5 id="1-1-核心源码"><a href="#1-1-核心源码" class="headerlink" title="1.1 核心源码"></a>1.1 核心源码</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>        <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> RandomAccess<span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 1.属性    */</span>    <span class="token comment" spellcheck="true">// 底层使用数组实现    </span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 声明对象数组变量</span>    <span class="token comment" spellcheck="true">/**    * 2.构造方法    */</span>    <span class="token comment" spellcheck="true">// 构造一个默认初始容量为 10 的空列表</span>    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 构造一个指定初始容量的空列表</span>    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 10</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 分配空间10</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 构造一个包含指定 collection 的元素的列表</span>    <span class="token comment" spellcheck="true">// 这些元素按照该 collection 的迭代器返回它们的顺序排列的</span>    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        elementData <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 3.存储    */</span>    <span class="token comment" spellcheck="true">// 用指定的元素替代此列表中指定位置上的元素，并返回以前位于该位置上的元素。</span>    <span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">RangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        E oldValue <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将指定的元素添加到此列表的尾部。</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>        elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将指定的元素插入此列表中的指定位置。</span>    <span class="token comment" spellcheck="true">// 如果当前位置有元素，则向右移动当前位于该位置的元素以及所有后续元素（将其索引加 1）。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果数组长度不足，将进行扩容</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>         <span class="token comment" spellcheck="true">// 将 elementData 中从 Index 位置开始、长度为 size-index 的元素，</span>        <span class="token comment" spellcheck="true">// 拷贝到从下标为 index+1 位置开始的新的 elementData 数组中。</span>        <span class="token comment" spellcheck="true">// 即将当前位于该位置的元素以及所有后续元素右移一个位置。</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                         size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从指定的位置开始，将指定 collection 中的所有元素插入到此列表中。</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> numNew<span class="token punctuation">,</span>                             numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>        <span class="token keyword">return</span> numNew <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 4.读取    */</span>    <span class="token comment" spellcheck="true">// 返回此列表中指定位置上的元素。</span>    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 5.删除    * ArrayList 提供了根据下标或者指定对象两种方式的删除功能    */</span>    <span class="token comment" spellcheck="true">// 移除此列表中指定位置上的元素。</span>    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 快速失败的机制，通过记录 modCount 参数来实现</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>            E oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                             numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Let gc do its work</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 移除此列表中首次出现的指定元素（如果存在）。这是应为ArrayList中允许存放重复的元素。</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 由于 ArrayList 中允许存放 null，因此下面通过两种情况来分别处理。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 类似 remove(int index)，移除列表中指定位置上的元素。</span>                    <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="1-2-底层扩容"><a href="#1-2-底层扩容" class="headerlink" title="1.2 底层扩容"></a>1.2 底层扩容</h5><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 添加元素举例</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 有效长度+1</span>        elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 确认实际容量</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 当实际容量大于10时，进行扩容</span>            <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_ARRAY_SIZE <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 11</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 10</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 10 + 10/2 相当于原先默认的1.5倍</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 若扩容后比实际容量还小</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 赋值为实际容量</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 若扩容后比(Integer.MAX_VALUE-8)还大</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 赋值为Integer.MAX_VALUE</span>        <span class="token comment" spellcheck="true">// minCapacity is usually close to size, so this is a win:</span>        elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 赋值为新的数组，数组长度为扩容后的长度</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">></span> MAX_ARRAY_SIZE<span class="token punctuation">)</span> <span class="token operator">?</span>            Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span>            MAX_ARRAY_SIZE<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>数组扩容通过一个公开的方法 <code>ensureCapacity(int minCapacity)</code> 来实现。<strong>会将老数组中的元素重新拷贝一份到新的 数组中，每次数组容量的增长大约是其原容量的 1.5 倍</strong>。在实际中我们可以在<strong>构造 ArrayList 实例</strong>时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过<strong>调用 ensureCapacity 方法来手动增加 ArrayList 实例的容量</strong>, 以减少递增式再分配的数量。</p><p>ArrayList 还给我们提供了<strong>将底层数组的容量调整为当前列表保存的实际元素的大小的功能</strong>。它可以通过trimToSize 方法来实现。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trimToSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> oldCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>            elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="2-JDK8"><a href="#2-JDK8" class="headerlink" title="2.JDK8"></a>2.JDK8</h4><p> ArrayList 是一个动态数组，实现了 List 接口以及 list 相关的所有方法，它允许所有元素的插入，包括 null。另外，ArrayList 和 Vector 除了线程不同步之外，大致相等。</p><p>JDK8 : <strong>默认构造空实例，大小是 0；只有在使用到时，才会通过grow方法创建一个大小为 10 的数组</strong></p><p>JDK7 : <strong>默认构造初始容量为 10 的空列表</strong></p><p>在扩容上代码优点区别,但原理都是相同的,都是<strong>原容量的1.5倍.</strong></p><h5 id="2-1-核心源码"><a href="#2-1-核心源码" class="headerlink" title="2.1 核心源码"></a>2.1 核心源码</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// @since   1.2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>        <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> RandomAccess<span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 1.属性    * ArrayList所有的方法都是建立在 elementData 属性之上。    */</span>    <span class="token comment" spellcheck="true">// 默认容量的大小</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 空数组常量：用于空实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认的空数组常量：用于默认大小空实例的共享空数组实例。</span>    <span class="token comment" spellcheck="true">// 把它从EMPTY_ELEMENTDATA数组中区分出来，以知道在添加第一个元素时容量需要增加多少。</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 存放元素的数组，从这可以发现 ArrayList 的底层实现就是一个 Object数组</span>    <span class="token keyword">transient</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 数组中包含的元素个数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 数组的最大上限</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_ARRAY_SIZE <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * 2.构造方法    * 默认情况下，elementData 是一个大小为 0 的空数组；    * 当我们指定了初始大小的时候 elementData 的初始大小就变成了我们所指定的初始大小了    */</span>    <span class="token comment" spellcheck="true">// 实例化：按照指定大小分配空间</span>    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 分配指定长度的数组空间</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 空实例</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 实例化：空实例，大小是 0；只有在使用到时，才会通过grow方法创建一个大小为 10 的数组</span>    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 空数组实例</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 形参为Collection实现类对象：可将set对象转为list对象</span>    <span class="token keyword">public</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        elementData <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// replace with empty array.</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**   * 3.get(int index)方法   * 根据索引获取ArrayList中的元素   */</span>   <span class="token comment" spellcheck="true">// 根据索引获取集合中元素</span>   <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 判断索引是否越界</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> size<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 直接通过数组下表获取元素</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    E <span class="token function">elementData</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 4.add方法    * 在插入元素之前，先检查是否需要扩容，后把元素添加到数组中最后一个元素的后面    */</span>    <span class="token comment" spellcheck="true">// 在数组末尾添加元素,复杂度为O(1)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 在索引为index处插入元素,复杂度为O(n)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断索引是否越界或是否小于0</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用一个 native 的复制方法，把 index 位置开始的元素都往后挪一位</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                         size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 确认是否是空数组</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当 elementData 为空数组时，它会使用默认的大小(10)去扩容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">{</span>            minCapacity <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 确认是否需要扩容</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 快速失败的机制，通过记录 modCount 参数来实现</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 实际容量比默认长度大时，进行扩容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ArrayList 每次扩容都是扩 1.5 倍</span>    <span class="token comment" spellcheck="true">// 然后调用 Arrays 类的 copyOf 方法，把元素重新拷贝到一个新的数组中去</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化，赋值为新的数组，长度为10</span>        elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 比较minCapacity和 MAX_ARRAY_SIZE</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">></span> MAX_ARRAY_SIZE<span class="token punctuation">)</span> <span class="token operator">?</span>            Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span>            MAX_ARRAY_SIZE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 5.set方法    */</span>    <span class="token comment" spellcheck="true">// 把下标为index的元素替换为element,复杂度为O(1)</span>    <span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断索引是否越界</span>        E oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 6.remove方法    */</span>    <span class="token comment" spellcheck="true">// 删除索引为index处的元素,复杂度为O(n)</span>    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断索引是否越界</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        E oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 调用一个 native 的复制方法，把 index 位置开始的元素都往前挪一位</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                             numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// clear to let GC do its work</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 7.size方法    */</span>    <span class="token comment" spellcheck="true">// 返回数组中元素的个数,时间复杂度为 O(1),返回的并不是数组的实际大小</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 8.indexOf方法和lastIndexOf方法    */</span>    <span class="token comment" spellcheck="true">// 返回从前往后遍历查找第一个等于给定元素的值的下标,时间复杂度为O(n)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从前往后遍历</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 通过遍历比较数组中每个元素的值来查找的</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回从后往前遍历查找第一个等于给定元素的值的下标,时间复杂度为O(n)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 从后往前遍历</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从列表中删除所有元素。      */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把数组中所有的元素的值设为null</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组。      *返回的数组将是“安全的”，因为该列表不保留对它的引用。 （换句话说，这个方法必须分配一个新的数     组）。     *因此，调用者可以自由地修改返回的数组。 此方法充当基于阵列和基于集合的API之间的桥梁。     */</span>    <span class="token keyword">public</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回此ArrayList实例的浅拷贝。 （元素本身不被复制。）      */</span>    <span class="token keyword">public</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//Arrays.copyOf功能是实现数组的复制，返回复制后的数组。参数是被复制的数组和复制的长度</span>            v<span class="token punctuation">.</span>elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span>modCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> v<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 这不应该发生，因为我们是可以克隆的</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-2-System-arraycopy-和Arrays-copyOf"><a href="#2-2-System-arraycopy-和Arrays-copyOf" class="headerlink" title="2.2 System.arraycopy()和Arrays.copyOf()"></a>2.2 System.arraycopy()和Arrays.copyOf()</h5><p>System.arraycopty():</p><pre class=" language-java"><code class="language-java">     <span class="token comment" spellcheck="true">/**     * 在此列表中的指定位置插入指定的元素。      *先调用 rangeCheckForAdd 对index进行界限检查；     *然后调用 ensureCapacityInternal 方法保证capacity足够大；     *再将从index开始之后的所有成员后移一个位置；将element插入index位置；最后size加1。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>        <span class="token comment" spellcheck="true">//arraycopy()方法实现数组自己复制自己</span>        <span class="token comment" spellcheck="true">//elementData:源数组;index:源数组中的起始位置;</span>        <span class="token comment" spellcheck="true">//elementData：目标数组；index + 1：目标数组中的起始位置； size - index：要复制的数组元素的数量</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Arrays.copyOf():</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     *以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组。      *返回的数组将是“安全的”，因为该列表不保留对它的引用。（换句话说，这个方法必须分配一个新的数组）     *因此，调用者可以自由地修改返回的数组。 此方法充当基于阵列和基于集合的API之间的桥梁。     */</span>    <span class="token keyword">public</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//elementData：要复制的数组；size：要复制的长度</span>        <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>两个方法的源码:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Arrays类</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span>U<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyOf</span><span class="token punctuation">(</span>U<span class="token punctuation">[</span><span class="token punctuation">]</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span> newLength<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> newType<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>  T<span class="token punctuation">[</span><span class="token punctuation">]</span> copy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span>newType <span class="token operator">==</span> <span class="token punctuation">(</span>Object<span class="token punctuation">)</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 新建数组</span>    <span class="token operator">?</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newLength<span class="token punctuation">]</span>    <span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>newType<span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> copy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 拷贝</span>                   Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span>length<span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> copy<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// System类</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">arraycopy</span><span class="token punctuation">(</span>Object src<span class="token punctuation">,</span>  <span class="token keyword">int</span>  srcPos<span class="token punctuation">,</span>                                        Object dest<span class="token punctuation">,</span> <span class="token keyword">int</span> destPos<span class="token punctuation">,</span>                                        <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>联系：</strong> 看两者源代码可以发现<code>copyOf()</code>内部调用了<code>System.arraycopy()</code></p><p><strong>区别：</strong></p><ul><li>arraycopy()需要目标数组，将原数组拷贝到你自己定义的数组里，而且可以选择拷贝的起点和长度以及放入新数组中的位置</li><li>copyOf()是系统自动在内部新建一个数组，并返回该数组。</li></ul><h5 id="2-3-内部类"><a href="#2-3-内部类" class="headerlink" title="2.3 内部类"></a>2.3 内部类</h5><pre class=" language-java"><code class="language-java">    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span>      <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ListItr</span> <span class="token keyword">extends</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">ListIterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span>      <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">SubList</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">RandomAccess</span>      <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListSpliterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Spliterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span>  </code></pre><p>ArrayList有四个内部类，</p><ul><li>其中的<strong>Itr是实现了Iterator接口</strong>，同时重写了里面的<strong>hasNext()</strong>， <strong>next()</strong>， <strong>remove()</strong> 等方法；</li><li>其中的<strong>ListItr</strong> 继承 <strong>Itr</strong>，实现了<strong>ListIterator接口</strong>，同时重写了<strong>hasPrevious()</strong>， <strong>nextIndex()</strong>， <strong>previousIndex()</strong>， <strong>previous()</strong>， <strong>set(E e)</strong>， <strong>add(E e)</strong> 等方法;</li><li><strong>Iterator和ListIterator的区别:</strong> ListIterator在Iterator的基础上增加了添加对象，修改对象，逆向遍历等方法，这些是Iterator不能实现的。</li></ul><h4 id="3-Vector"><a href="#3-Vector" class="headerlink" title="3.Vector"></a>3.Vector</h4><p>Vector很多方法都跟 ArrayList 一样，只是多加了个 synchronized 来保证线程安全.部分源码:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// @since   JDK1.0</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> RandomAccess<span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 每次扩容只扩 capacityIncrement 个空间</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> capacityIncrement<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  Vector 的默认大小也是 10，而且它在初始化的时候就已经创建了数组了</span>    <span class="token keyword">public</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">int</span> capacityIncrement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacityIncrement <span class="token operator">=</span> capacityIncrement<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// newCapacity 默认情况下是两倍的 oldCapacity;</span>    <span class="token comment" spellcheck="true">// 当指定了 capacityIncrement 的值之后，newCapacity 变成了oldCapacity+capacityIncrement</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>capacityIncrement <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span>                                         capacityIncrement <span class="token operator">:</span> oldCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h4><p>JDK8 ArrayList 与 Vector 比较 :</p><ul><li>ArrayList 创建时的大小为 0；当加入第一个元素时，进行第一次扩容时，默认容量大小为 10。</li><li>ArrayList 每次扩容都以当前数组大小的 1.5 倍去扩容。</li><li>Vector 创建时的默认大小为 10。</li><li>Vector 每次扩容都以当前数组大小的 2 倍去扩容。当指定了 capacityIncrement 之后，每次扩容仅在原先基础上增加 capacityIncrement 个单位空间。</li><li>ArrayList 和 Vector 的 add、get、size 方法的复杂度都为 O(1)，remove 方法的复杂度为 O(n)。</li><li>ArrayList 是非线程安全的，Vector 是线程安全的。</li></ul><p>参考链接: <a href="https://snailclimb.gitee.io/javaguide/#/docs/java/collection/ArrayList" target="_blank" rel="noopener">ArrayList 源码学习</a></p><h3 id="二-LinkedList"><a href="#二-LinkedList" class="headerlink" title="二.LinkedList"></a>二.LinkedList</h3><p>LinkedList 是通过一个<strong>双向链表</strong>来实现的，它允许插入所有元素，包括 null，同时，它是<strong>线程不同步</strong>的。LinkedList底层的链表结构使它支持高效的<strong>插入和删除操作</strong>.如果想使LinkedList变成线程安全的，可以调用Collections中的静态方法 <code>List&lt;T&gt; synchronizedList(List&lt;T&gt; list)</code> 将其转为线程安全.</p><h4 id="1-内部结构"><a href="#1-内部结构" class="headerlink" title="1.内部结构"></a>1.内部结构</h4><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191225180751305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>双向链表每个结点除了数据域之外，还有一个前指针和后指针，分别指向<strong>前驱结点和后继结点</strong>（如果有前驱/后继的话）。另外，双向链表还有一个 first 指针，指向头节点，和 last 指针，指向尾节点。</p><p>LinkedList类中的一个<strong>内部私有类Node</strong>:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 双向链表节点: 每个节点的结构</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 内部类：只有当前类需要使用，外面类不需要使用时</span>        E item<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 泛型，obj对象数据</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 后继节点;下一个元素节点地址：指向下一个元素的指针</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 前驱节点;上一个元素节点地址：指向上一个元素的指针</span>        <span class="token comment" spellcheck="true">// 元素节点分为三部分：前驱节点，本节点的值，后继结点</span>        <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">,</span> E element<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="2-属性和构造器"><a href="#2-属性和构造器" class="headerlink" title="2.属性和构造器"></a>2.属性和构造器</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// @since 1.2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">extends</span> <span class="token class-name">AbstractSequentialList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> Deque<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//链表的节点个数//指向头节点的指针</span>    <span class="token keyword">transient</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//指向头节点的指针</span>    <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> first<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//指向尾节点的指针</span>    <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> last<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 空构造方法</span>    <span class="token keyword">public</span> <span class="token function">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 用已有的集合创建链表的构造方法</span>    <span class="token keyword">public</span> <span class="token function">LinkedList</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-加节点"><a href="#3-加节点" class="headerlink" title="3.加节点"></a>3.加节点</h4><p>在表头或表尾进行插入元素只需要 O(1) 的时间，而在指定位置插入元素则需要先遍历一下链表，所以复杂度为 O(n)。</p><h5 id="3-1-表头添加元素"><a href="#3-1-表头添加元素" class="headerlink" title="3.1 表头添加元素"></a>3.1 表头添加元素</h5><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191225180803951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>addFirst(E e), push(E e), offerFirst(E e)</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在链表头部添加元素节点</span>        <span class="token function">linkFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在链表头部添加元素节点</span>        <span class="token function">addFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offerFirst</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkFirst</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前节点的前驱指向 null，后继指针原来的头节点</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//头指针指向新的头节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//如果链表为空，last节点也指向该节点</span>            last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>    <span class="token comment" spellcheck="true">//否则，将头节点的前驱指针指向新节点，也就是指向前一个元素</span>            f<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="3-2-表尾添加元素"><a href="#3-2-表尾添加元素" class="headerlink" title="3.2 表尾添加元素"></a>3.2 表尾添加元素</h5><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191225180824621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>add(E e), addLast(E e), offer(E e), offerLast(E e)</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在链表结尾添加元素节点</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在链表结尾添加元素节点</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offerLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 加为最后节点</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 声明临时节点用来存储last节点</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 新节点指向原先last节点</span>        last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 新节点作为最后一个节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 原先last节点指向新节点(last节点)</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="3-3-指定位置添加元素"><a href="#3-3-指定位置添加元素" class="headerlink" title="3.3 指定位置添加元素"></a>3.3 指定位置添加元素</h5><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191225180836833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>add(int index, E element)</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在指定位置添加元素节点</span>        <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//检查索引是否处于[0-size]之间</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//添加在链表尾部</span>            <span class="token function">linkLast</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>    <span class="token comment" spellcheck="true">//添加在链表中间</span>            <span class="token function">linkBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//一个插入节点的值，一个指定的node</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">linkBefore</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> succ<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert succ != null;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> pred <span class="token operator">=</span> succ<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//指定节点的前驱</span>        <span class="token comment" spellcheck="true">//当前节点的前驱为指点节点的前驱，后继为指定的节点</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> succ<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//更新指定节点的前驱为当前节点</span>        succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//更新前驱节点的后继</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> null<span class="token punctuation">)</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="4-删除节点"><a href="#4-删除节点" class="headerlink" title="4.删除节点"></a>4.删除节点</h4><h5 id="4-1-删除头节点"><a href="#4-1-删除头节点" class="headerlink" title="4.1 删除头节点"></a>4.1 删除头节点</h5><p><strong>remove()</strong> ,<strong>removeFirst(), pop()</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除表头节点，返回表头元素的值</span>    <span class="token keyword">private</span> E <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert f == first &amp;&amp; f != null;</span>        <span class="token keyword">final</span> E element <span class="token operator">=</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        f<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>        f<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>        first <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//头指针指向后一个节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>            last <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">else</span>            next<span class="token punctuation">.</span>prev <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新头节点的前驱为 null</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="4-2-删除尾节点"><a href="#4-2-删除尾节点" class="headerlink" title="4.2 删除尾节点"></a>4.2 删除尾节点</h5><p><strong>removeLast(), pollLast()</strong></p><p><strong>区别</strong>: removeLast()在链表为空时将抛出NoSuchElementException，而pollLast()方法返回null。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">unlinkLast</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token function">unlinkLast</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除表尾节点，返回表尾元素的值</span>    <span class="token keyword">private</span> E <span class="token function">unlinkLast</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert l == last &amp;&amp; l != null;</span>        <span class="token keyword">final</span> E element <span class="token operator">=</span> l<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev <span class="token operator">=</span> l<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        l<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>        l<span class="token punctuation">.</span>prev <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>        last <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//尾指针指向前一个节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> null<span class="token punctuation">)</span>            first <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">else</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新尾节点的后继为 null</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="4-3-删除指定节点"><a href="#4-3-删除指定节点" class="headerlink" title="4.3 删除指定节点"></a>4.3 删除指定节点</h5><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191225180847708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>remove(Object o), remove(int index)</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 删除指定元素:只会删除一个匹配的对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果删除对象为null </span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//从头开始遍历 </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//找到元素  </span>                    <span class="token function">unlink</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从链表中移除找到的元素</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//从头开始遍历</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//找到元素  </span>                    <span class="token function">unlink</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从链表中移除找到的元素</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//删除指定位置的元素</span>        <span class="token comment" spellcheck="true">//检查index范围</span>        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将节点删除</span>        <span class="token keyword">return</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除指定节点，返回指定元素的值</span>    E <span class="token function">unlink</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert x != null;</span>        <span class="token keyword">final</span> E element <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当前节点的后继</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当前节点的前驱</span>        <span class="token comment" spellcheck="true">//删除前驱指针</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果删除的节点是头节点,令头节点指向该节点的后继节点</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//更新前驱节点的后继为当前节点的后继</span>            x<span class="token punctuation">.</span>prev <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//删除后继指针</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            last <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果删除的节点是尾节点,令尾节点指向该节点的前驱节点</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//更新后继节点的前驱为当前节点的前驱</span>            x<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        x<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="5-获取节点"><a href="#5-获取节点" class="headerlink" title="5.获取节点"></a>5.获取节点</h4><h5 id="5-1-获取头节点-index-0"><a href="#5-1-获取头节点-index-0" class="headerlink" title="5.1 获取头节点(index=0)"></a>5.1 获取头节点(index=0)</h5><p><strong>getFirst(), element(), peek(), peekFirst()</strong></p><p><strong>区别：</strong> 在于对链表为空时的处理，是抛出异常还是返回null，其中<strong>getFirst()</strong> 和<strong>element()</strong> 方法将会在链表为空时，抛出NoSuchElementException异常</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>     <span class="token punctuation">}</span></code></pre><h5 id="5-2-获取尾节点-index-1"><a href="#5-2-获取尾节点-index-1" class="headerlink" title="5.2 获取尾节点(index=-1)"></a>5.2 获取尾节点(index=-1)</h5><p><strong>getLast(), peekLast()</strong></p><p><strong>区别：</strong> <strong>getLast()</strong> 方法在链表为空时，会抛出<strong>NoSuchElementException</strong>，而<strong>peekLast()</strong> 则不会.</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> l<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> E <span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> l<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="5-3-获取指定节点"><a href="#5-3-获取指定节点" class="headerlink" title="5.3 获取指定节点"></a>5.3 获取指定节点</h5><p><strong>get(int index)</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//检查index范围是否在size之内</span>        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用Node(index)去找到index对应的node然后返回它的值</span>        <span class="token keyword">return</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取指定下标的元素</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查找index对应的node</span>        <span class="token comment" spellcheck="true">// assert isElementIndex(index);</span>      <span class="token comment" spellcheck="true">//根据下标是否超过链表长度的一半，来选择从头部开始遍历还是从尾部开始遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>                x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            <span class="token keyword">return</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="6-其它方法"><a href="#6-其它方法" class="headerlink" title="6.其它方法"></a>6.其它方法</h4><p><strong>set(int index, E element), size(), contains(Object o), indexOf(Object o), lastIndexOf(Object o)</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将此列表中指定位置的元素替换为指定的元素</span>        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        E oldVal <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//返回此列表的元素个数</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//检查对象o是否存在于链表中</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//从头遍历找该对象的索引</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//从尾遍历找该对象的索引</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>                index<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>                index<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>参考链接: <a href="https://snailclimb.gitee.io/javaguide/#/docs/java/collection/LinkedList" target="_blank" rel="noopener">LinkedList 源码学习</a></p><h3 id="三-HashMap"><a href="#三-HashMap" class="headerlink" title="三.HashMap"></a>三.HashMap</h3><p>HashMap源码学习可参考下面文章…</p><p>参考链接：<a href="https://snailclimb.gitee.io/javaguide/#/docs/java/collection/HashMap" target="_blank" rel="noopener">HashMap(JDK1.8)源码学习</a></p>]]></content>
      
      
      <categories>
          
          <category> Java高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合总结</title>
      <link href="/2019/10/26/ji-he-zong-jie/"/>
      <url>/2019/10/26/ji-he-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="一-Java集合框架概述"><a href="#一-Java集合框架概述" class="headerlink" title="一.Java集合框架概述"></a>一.Java集合框架概述</h2><p>集合、数组都是对多个数据进行存储操作的结构，简称Java容器。此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储（.txt, .jpg, .avi，数据库中）。Java 集合就像一种容器，可以动态地把多个对象的引用放入容器中。</p><p><strong>1.数组在内存存储方面的特点：</strong></p><ul><li>数组初始化以后，长度就确定了</li><li>数组声明的类型，就决定了进行元素初始化时的类型</li></ul><p><strong>2.数组在存储数据方面的弊端：</strong></p><ul><li>数组初始化以后，长度就不可变了，不便于扩展</li><li>数组中提供的属性和方法少，不便于进行添加、删除、插入等操作，且效率不高。同时无法直接获取数组中实际元素的个数</li></ul><ul><li>数组存储的数据是有序的、可以重复的。对于无序、不可重复的需求，不能满足。</li></ul><p><strong>3.Java集合分为Collection和Map两种关系：</strong></p><ul><li><strong>Collection接口</strong>：单列集合，用来存储一个一个的对象<ul><li>List：存储有序的、可重复的数据。  –&gt; “动态”数组<ul><li><code>ArrayList、LinkedList、Vector</code></li></ul></li><li>Set：存储无序的、不可重复的数据   –&gt; 高中讲的“集合”<ul><li><code>HashSet、LinkedHashSet、TreeSet</code></li></ul></li></ul></li><li><strong>Map接口</strong>：双列集合，用来存储一对(key - value)一对的数据   –&gt; 高中函数：y = f(x)<ul><li><code>HashMap、LinkedHashMap、TreeMap、Hashtable、Properties</code></li></ul></li></ul><h2 id="二-Collection接口"><a href="#二-Collection接口" class="headerlink" title="二.Collection接口"></a>二.Collection接口</h2><p>Collection 接口是 List、Set 和 Queue 接口的父接口，该接口里定义的方法。既可用于操作 Set 集合，也可用于操作 List 和 Queue 集合。</p><h3 id="1-常用的API"><a href="#1-常用的API" class="headerlink" title="1.常用的API"></a>1.常用的API</h3><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191220135919258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-抽象方法"><a href="#2-抽象方法" class="headerlink" title="2.抽象方法"></a>2.抽象方法</h3><p>删除、包含相关方法底层都是调用元素类型对象<strong>重写的equals方法(比较内容)</strong>来判断集合中是否有要删除或包含的元素。向集合中添加obj数据时，要求obj所在类要重写equals()。</p><ul><li>增：<ul><li><code>boolean add(Object o)</code>：<strong>添加元素到集合</strong></li><li><code>boolean addAll(Collection c)</code>：将指定集合中的所有元素添加到此集合</li></ul></li><li>删：<ul><li><code>boolean remove(Object o)</code>：<strong>删除找到的第一个元素(equals)</strong></li><li><code>boolean removeAll(Collection c)</code>：从当前集合中删除公共元素(equals)(差集)</li><li><code>boolean retainAll(Collection c)</code>：从当前集合中删除非公共元素(equals)(交集)</li><li><code>void clear()</code>：删除所有元素</li></ul></li><li>查：<ul><li><code>iterator()</code>：<strong>返回迭代器对象，用于遍历</strong></li><li><code>for(集合元素的类型 局部变量 : 集合对象)</code>：<strong>增强for循环，用于遍历</strong></li><li><code>int size()</code>：<strong>查询有效元素个数</strong></li><li><code>hashCode()</code>：<strong>查询当前对象的哈希值</strong></li></ul></li><li>判断：<ul><li><code>boolean contains(Object o)</code>：<strong>是否包含某个元素(equals)</strong></li><li><code>boolean containsAll(Collection c)</code>：是否包含某个集合的所有元素(equals)</li><li><code>boolean isEmpty()</code>：<strong>判断集合size==0</strong> </li><li><code>boolean equals(Object o)</code>：<strong>集合是否相等(比较集合是否相等：元素及顺序)</strong></li></ul></li><li>转换：<ul><li><code>Object[] toArray()</code>：<strong>集合 –&gt; 数组</strong></li><li><code>T[] toArray(T[] a)</code> : <strong>集合 –&gt; 数组</strong></li><li><code>(Arrays)public static List&lt;T&gt; asList(T... a)</code>：<strong>数组 –&gt; 集合</strong></li></ul></li></ul><h3 id="3-注意"><a href="#3-注意" class="headerlink" title="3.注意"></a>3.注意</h3><p><strong>获取长度的区分:</strong></p><ul><li>java 中的<strong>length属性</strong>是针对数组说的,比如说你声明了一个数组,想知道这个数组的长度则用到了 length 这个属性.</li><li>java 中的<strong>length()方法</strong>是针对字符串String说的,如果想看这个字符串的长度则用到 length()这个方法.</li><li>java 中的<strong>size()方法</strong>是针对泛型集合说的,如果想看这个泛型有多少个元素,就调用此方法来查看!</li></ul><p><strong>向Collection接口的实现类的对象中添加obj数据时，要求obj所在类要重写equals():</strong></p><ul><li>在判断时会调用obj对象所在类的equals()方法：equals方法默认比较地址，需要重写来比较内容。String、File、Date、包装类默认重写了equals方法</li><li>equals(Object obj)：要想返回true，需要当前集合和形参集合的元素都相同(包括元素的顺序)</li><li>调用Arrays类的静态方法asList()：基本数据类型数组会被当做一个对象，需要使用包装类对象数组当形参</li></ul><pre class=" language-java"><code class="language-java">Collection coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在判断时会调用obj对象所在类的equals()方法：equals方法默认比较地址，需要重写来比较内容</span><span class="token comment" spellcheck="true">// 1.contains(Object obj):判断当前集合中是否包含obj</span><span class="token keyword">boolean</span> contains <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>contains<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// String、File、Date、包装类重写了equals方法</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// Person没有重写equals方法时：false；重写了equals方法：true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// coll2集合中：元素内容与coll集合相同，但顺序不同</span>Collection coll2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.equals(Object obj):要想返回true，需要当前集合和形参集合的元素都相同(包括元素的顺序)。</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>coll1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// 3.集合 --> 数组：toArray()</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 若集合中都是相同类型的元素,若都为Integer类型</span><span class="token comment" spellcheck="true">// 第一种方式(最常用)</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> integer <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第二种方式(容易理解)</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> integer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span>arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arrayList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>integer1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 抛出异常，java不支持向下转型,讲Object数组转为Integer数组</span><span class="token comment" spellcheck="true">//Integer[] integer2 = new Integer[arrayList.size()];</span><span class="token comment" spellcheck="true">//integer2 = arrayList.toArray();</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4.数组 --> 集合:调用Arrays类的静态方法asList()</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"AA"</span><span class="token punctuation">,</span> <span class="token string">"BB"</span><span class="token punctuation">,</span> <span class="token string">"CC"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// [AA, BB, CC]</span><span class="token comment" spellcheck="true">// 当是int[]时，会当成一个int数组对象</span>List arr1 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1</span><span class="token comment" spellcheck="true">// 包装类数组时，会当成多个元素</span>List arr2 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2</span></code></pre><p>Person类：重写equals()方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Person对象重写equals方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Person person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> person<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span>                Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三-集合遍历"><a href="#三-集合遍历" class="headerlink" title="三.集合遍历"></a>三.集合遍历</h2><h3 id="1-Iterator接口"><a href="#1-Iterator接口" class="headerlink" title="1.Iterator接口"></a>1.Iterator接口</h3><p>Iterator对象称为迭代器(设计模式的一种)，主要用于<strong>遍历 Collection 集合中的元素</strong>。</p><p>Collection接口继承了java.lang.Iterable接口，该接口有一个iterator()方法，那么所有实现了Collection接口的集合类都有一个<strong>iterator()方法，用以返回一个实现了Iterator接口的对象</strong>。</p><ul><li>内部的方法：<code>hasNext()</code>：<strong>判断是否还有下一个元素</strong> 和  <code>next()</code>：<strong>指针下移并将指向的元素返回</strong></li><li>集合对象每次调用iterator()方法都得到一个<strong>全新的迭代器对象，默认游标都在集合的第一个元素之前</strong></li><li>内部定义了remove(),可以<strong>在遍历的时候，删除集合中的元素</strong>。此方法不同于集合直接调用remove()</li></ul><p>示例：</p><pre class=" language-java"><code class="language-java">Collection coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Iterator iterator <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//hasNext():判断是否还有下一个元素</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//next():1.指针下移 2.将下移以后集合位置上的元素返回</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//123 Person{name='Jerry', age=20} Tom</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//错误方式：</span><span class="token comment" spellcheck="true">//集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</span><span class="token keyword">while</span> <span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 死循环</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 123 123 123 ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//遍历过程中删除集合中"Tom"元素</span>Iterator iterator <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//iterator.remove();    //指针没有下移就remove()会报IllegalStateException</span>    Object obj <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//删除"Tom"之后再遍历集合</span>iterator <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//123 Person{name='Jerry', age=20}</span><span class="token punctuation">}</span></code></pre><h3 id="2-增强for循环"><a href="#2-增强for循环" class="headerlink" title="2.增强for循环"></a>2.增强for循环</h3><p>遍历集合：<code>for(集合元素的类型 局部变量 : 集合对象)</code></p><pre class=" language-java"><code class="language-java">Collection coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//for(集合元素的类型 局部变量 : 集合对象)</span><span class="token comment" spellcheck="true">//内部仍然调用了迭代器。</span><span class="token keyword">for</span><span class="token punctuation">(</span>Object obj <span class="token operator">:</span> coll<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>遍历数组：<code>for(数组元素的类型 局部变量 : 数组对象)</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//for(数组元素的类型 局部变量 : 数组对象)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意：数组赋值时不能使用增强for循环</p><pre class=" language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"MM"</span><span class="token punctuation">,</span><span class="token string">"MM"</span><span class="token punctuation">,</span><span class="token string">"MM"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    //方式一：普通for赋值</span><span class="token comment" spellcheck="true">//    for(int i = 0;i &lt; arr.length;i++){</span><span class="token comment" spellcheck="true">//        arr[i] = "GG";</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//方式二：增强for循环</span><span class="token keyword">for</span><span class="token punctuation">(</span>String s <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    s <span class="token operator">=</span> <span class="token string">"GG"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// s是局部变量，存储在栈中，并不是原数组的引用</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// MM MM MM</span><span class="token punctuation">}</span></code></pre><h2 id="四-List接口"><a href="#四-List接口" class="headerlink" title="四.List接口"></a>四.List接口</h2><p>List集合类中 <strong>元素有序、且可重复</strong>，集合中的每个元素都有其对应的<strong>顺序索引</strong>。</p><p>JDK API中List接口的实现类常用的有：<strong>ArrayList、LinkedList和 Vector</strong>。</p><p>LIst除了从<strong>Collection集合继承的方法</strong>外,List集合里添加了一些<strong>根据索引来操作集合元素的方法</strong>.</p><p>插:</p><ul><li><code>void add(int index, Object ele)</code> :  在 index 位置插入ele 元素</li><li><code>boolean addAll(int index, Collection eles)</code> :  从index 位置开始将eles 中的所有元素添加进来</li></ul><p>删:</p><ul><li><code>Object remove(int index)</code> : <strong>移除指定index 位置的元素，并返回此元素</strong></li></ul><p>改:</p><ul><li><code>Object set(int index, Object ele)</code> : <strong>设置指定index 位置的元素为ele</strong></li></ul><p>查:</p><ul><li><code>Object get(int index)</code> : <strong>获取指定index 位置的元素</strong></li><li><code>int indexOf(Object obj)</code>: 返回obj 在集合中首次出现的位置,如果不存在，返回-1.</li><li><code>int lastIndexOf(Object obj)</code> : 返回obj 在当前集合中末次出现的位置,如果不存在，返回-1.</li><li><code>List subList(int fromIndex, int toIndex)</code> : 返回从fromIndex 到toIndex位置的左闭右开区间的子集合</li></ul><h3 id="1-ArrayList"><a href="#1-ArrayList" class="headerlink" title="1.ArrayList"></a>1.ArrayList</h3><p>ArrayList 是 List 接口的<strong>主要实现类</strong>,本质上,ArrayList是对象引用的一个”变长”数组,容量能动态增长.</p><p>ArrayList 的JDK1.8 之前与之后的实现区别？</p><ul><li>JDK1.7：ArrayList像饿汉式，直接创建一个<strong>初始容量为10的数组</strong></li><li>JDK1.8：ArrayList像懒汉式，一开始创建一个长度为0的数组，当<strong>添加第一个元素时再创建一个初始容量为10的数组</strong></li></ul><p>区分List中remove(int index)和remove(Object obj) ?</p><pre class=" language-java"><code class="language-java">List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自动装箱</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">updateList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// [1, 3]</span><span class="token comment" spellcheck="true">// 判断list是否包含3,contains没有索引的形参</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateList</span><span class="token punctuation">(</span>List list<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// list.remove(2);    // 2代表索引,先根据索引</span>  list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2代表对象</span><span class="token punctuation">}</span></code></pre><p>更多内容详看 : 源码学习 – &gt; ArrayList</p><h3 id="2-LinkedList"><a href="#2-LinkedList" class="headerlink" title="2.LinkedList"></a>2.LinkedList</h3><p><strong>双向链表</strong>，<strong>内部没有声明数组</strong>，而是<strong>定义了Node类型的first和last，用于记录首末元素。定义内部类Node，作为LinkedList中保存数据的基本结构。</strong></p><p>Node除了保存数据，还定义了两个变量：<strong>prev变量记录前一个元素的位置; next变量记录下一个元素的位置.</strong></p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/2019122518054592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 双向链表</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 内部类：只有当前类需要使用，外面类不需要使用时</span>        E item<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 泛型，obj对象数据</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 下一个元素节点地址：指向下一个元素的指针</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 上一个元素节点地址：指向上一个元素的指针</span>        <span class="token comment" spellcheck="true">// 元素节点分为三部分：上节点地址，obj对象数据，下节点地址</span>        <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">,</span> E element<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>对于 <strong>频繁的插入或删除元素</strong>的操作，建议使用LinkedList类，效率较高.</p><p>新增方法:</p><ul><li><code>void addFirst(Object obj)</code> </li><li><code>void addLast(Object obj)</code> </li><li><code>Object getFirst()</code> </li><li><code>Object getLast()</code> </li><li><code>Object removeFirst()</code> </li><li><code>Object removeLast()</code> </li></ul><p>更多内容详看 : 源码学习 – &gt; LinkedList</p><h3 id="3-Vector"><a href="#3-Vector" class="headerlink" title="3.Vector"></a>3.Vector</h3><p>Vector 是一个古老的集合，JDK1.0就有了。大多数操作与ArrayList相同，区别之处在于Vector是线程安全的.</p><p>在各种list中，最好把<strong>ArrayList作为默认选择。当插入、删除频繁时，使用LinkedList</strong>；Vector总是比ArrayList慢，所以尽量避免使用。</p><p>更多内容详看 : 源码学习 –&gt; ArrayList –&gt; Vector</p><h3 id="4-三者联系与区别"><a href="#4-三者联系与区别" class="headerlink" title="4.三者联系与区别"></a>4.三者联系与区别</h3><p>联系:<div style="color:red;"></div></p><ul><li>都实现了List接口, 存储有序的、可重复的数据</li><li>add自定义类时,该类需要重写equals方法(contains,remove等方法以equals为标准判断的)</li></ul><p>区别:<div style="color:red;"></div></p><ul><li>ArrayList: 底层使用<strong>动态数组结构</strong>; <strong>线程不安全</strong>,效率高; 默认创建<strong>空列表</strong>,添加第一个元素时,分配10个大小的空间,每次扩容为原来的<strong>1.5倍</strong>;对于<strong>随机访问</strong>get和set操作效率高于LinkedList</li><li>LinkedList: 底层使用<strong>双向链表结构</strong>; <strong>线程不安全</strong>; 对于频繁的<strong>插入, 删除</strong>操作效率比ArrayList高</li><li>Vector: 底层使用<strong>动态数组结构</strong>; <strong>线程安全</strong>,效率低; 默认创建<strong>10个大小</strong>的数组,每次扩容为原来的<strong>2倍</strong></li></ul><h2 id="五-Set接口"><a href="#五-Set接口" class="headerlink" title="五.Set接口"></a>五.Set接口</h2><p>Set接口是Collection的子接口，set接口没有提供额外的方法，使用的都是Collection中声明过的方法。存储<strong>无序的、不可重复</strong>的数据，类似于高中数学中的”集合”。</p><p>以HashSet为例：</p><ul><li><strong>无序性</strong>：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的</li><li><strong>不可重复性</strong>：保证添加的元素按照equals()判断时，不能返回true.即：相同的元素只能添加一个</li></ul><p>向Set(主要指：HashSet、LinkedHashSet)中添加的数据，其所在的类一定要<strong>重写hashCode()和equals()</strong>，重写的hashCode()和equals()尽可能保持一致性：<strong>相等的对象必须具有相等的散列码</strong>。 Set 判断两个对象是否相同不是使用 == 运算符，而是根据 <strong>equals() 方法</strong>。</p><p>HashSet和TreeSet是Set接口的实现类，LinkedHashSet是HashSet的子类。</p><ul><li><code>HashSet</code>：作为Set接口的<strong>主要实现类；线程不安全的；可以存储null值</strong></li><li><code>LinkedHashSet</code>：作为HashSet的子类；遍历其内部数据时，可以<strong>按照添加的顺序遍历</strong>；对于频繁的<strong>遍历操作</strong>，LinkedHashSet效率高于HashSet</li><li><code>TreeSet</code>：可以按照添加<strong>对象的指定属性，进行排序</strong></li></ul><h3 id="1-HashSet"><a href="#1-HashSet" class="headerlink" title="1.HashSet"></a>1.HashSet</h3><h4 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h4><p>HashSet 是 Set接口的主要实现，<strong>HashSet 按Hash算法来存储集合中的元素</strong>，因此具有很好的存取、查找、删除性能。底层是 <strong>数组+链表结构</strong>。数组<strong>初始容量为16</strong>，当如果使用率超过0.75，（16 * 0.75=12）就会扩大容量为<strong>原来的2倍</strong>。（16扩容为32，依次为64,128….等）。</p><p>特点：不能保证元素的排列顺序、不是线程安全的、集合元素可以是null。</p><p>判断两个元素相等的标准：两个对象通过 <strong>hashCode() 方法比较相等</strong>，并且两个对象的 <strong>equals() 方法</strong>返回值也相等。</p><p>对于<strong>存放在Set容器中的对象</strong>， 对应的<strong>类一定要重写equals() 和hashCode(Object obj) 方法，以实现对象相等规则</strong> 。即： “<strong>相等的对象必须具有相等的散列码</strong>” 。</p><h4 id="1-2-添加元素过程"><a href="#1-2-添加元素过程" class="headerlink" title="1.2 添加元素过程"></a>1.2 添加元素过程</h4><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191225180604760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>向HashSet中添加元素的过程(重要)：</strong><div style="color:red;"></div></p><p>首先调用元素a所在类的hashCode()方法，计算元素a的哈希值，此哈希值接着通过某种算法计算出在HashSet<strong>底层数组中的存放位置</strong>（即为：索引位置），判断<strong>数组此位置</strong>上是否已经有元素：</p><ul><li>如果此位置上没有其他元素，则元素a添加成功；</li><li>如果此位置上有其他元素b(或以链表形式存在的多个元素），则比较元素a与元素b的<strong>hash值</strong>：<ul><li>如果hash值不相同，则元素a添加成功；</li><li>如果hash值相同，进而需要调用元素a所在类的<strong>equals()方法</strong>：<ul><li>equals()返回true,元素a添加失败；</li><li>equals()返回false,则元素a添加成功。</li></ul></li></ul></li></ul><p>元素a 与已经存在指定索引位置上数据以<strong>链表的方式存储</strong>。可以用”七上八下”来形容。</p><ul><li>JDK7：元素a放到数组中，指向原来的元素</li><li>JDK8：原来的元素在数组中，指向元素a</li></ul><p>如果两个元素的 equals() 方法返回 true，但它们的 hashCode() 返回值不相等，hashSet 将会把它们存储在不同的位置，但依然可以添加成功。</p><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//其中Person 类中重写了hashCode() 和equal() 方法</span>HashSet set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [Person{id=1002, name='BB'}, Person{id=1001, name='AA'}]</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"CC"</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 由于p1的name变化导致hash值变化了，去查找对应的存储位置是null的</span><span class="token comment" spellcheck="true">// [Person{id=1002, name='BB'}, Person{id=1001, name='CC'}]</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"CC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// p1原先的hash值是由"AA"算出来的</span><span class="token comment" spellcheck="true">// [Person{id=1002, name='BB'}, Person{id=1001, name='CC'}, </span><span class="token comment" spellcheck="true">// Person{id=1001, name='CC'}]</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hash值与p1相同，但equals时是false的</span><span class="token comment" spellcheck="true">// [Person{id=1002, name='BB'}, Person{id=1001, name='CC'}, </span><span class="token comment" spellcheck="true">// Person{id=1001, name='CC'}, Person{id=1001, name='AA'}]</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>图示：</p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191225180620804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="1-3-重写方法原则"><a href="#1-3-重写方法原则" class="headerlink" title="1.3 重写方法原则"></a>1.3 重写方法原则</h4><p>一般用idea自动生成的重写方法hashCode和equals方法就可以了，复写的hashCode方法有31这个数字。</p><p>重写hashCode方法：</p><ul><li>同一个对象多次调用 hashCode() 方法应该返回相同的值</li><li>当两个对象的 equals() 方法比较返回 true 时，这两个对象的 hashCode()方法的返回值也应相等</li><li>对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值</li></ul><p>重写equals方法：</p><ul><li>当改写equals方法时，总要改写hashCode方法；</li><li>相等的对象必须具有相等的散列码</li><li>参与计算hashCode 的对象的属性也应该参与到equals() 中进行计算</li></ul><h4 id="1-4-示例"><a href="#1-4-示例" class="headerlink" title="1.4 示例"></a>1.4 示例</h4><pre class=" language-java"><code class="language-java">Set set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"CC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">129</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 若不重写hashCode方法，则用父类Object的hashCode方法，hash值是随机生成的</span><span class="token comment" spellcheck="true">// 先判断hash值，hash值不同，两个user对象都会添加到集合中</span>Iterator iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// AA    CC    129    456    123    User{name='Tom', age=12}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Person类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User equals()...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">!=</span> user<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name <span class="token operator">!=</span> null <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">:</span> user<span class="token punctuation">.</span>name <span class="token operator">==</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//return name.hashCode() + age;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> name <span class="token operator">!=</span> null <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> age<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//按照姓名从大到小排列,年龄从小到大排列</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>o<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            return -this.name.compareTo(user.name);</span>            <span class="token keyword">int</span> compare <span class="token operator">=</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>compare <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> compare<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>user<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入的类型不匹配"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用HashSet去除List重复数字值：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List <span class="token function">duplicateList</span><span class="token punctuation">(</span>List list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    HashSet set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-LinkedHashSet"><a href="#2-LinkedHashSet" class="headerlink" title="2.LinkedHashSet"></a>2.LinkedHashSet</h3><p>LinkedHashSet 是 HashSet 的子类。根据<strong>元素的 hashCode 值来决定元素的存储位置</strong>，在添加数据的同时，每个数据还维护了<strong>两个引用，记录此数据前一个数据和后一个数据</strong>。对于<strong>频繁的遍历操作，效率高于HashSet</strong>。</p><p>底层结构：</p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191225180638165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>示例：</p><pre class=" language-java"><code class="language-java">Set set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"CC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">129</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印输出看似有序，是由于每个数据还维护了两个引用</span><span class="token comment" spellcheck="true">// 存储位置是由hash值决定的</span>Iterator iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//456    123    AA    CC    User{name='Tom', age=12}    129    </span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-TreeSet"><a href="#3-TreeSet" class="headerlink" title="3.TreeSet"></a>3.TreeSet</h3><p>TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保<strong>集合元素处于排序状态</strong>。TreeSet底层使用 <strong>红黑树结构</strong>存储数据。有序，查询速度比List快。向TreeSet中<strong>添加的数据</strong>，要求是<strong>相同类的对象</strong>。</p><p>红黑树介绍：<a href="https://www.cnblogs.com/yangecnu/p/Introduce-Red-Black-Tree.html" target="_blank" rel="noopener">平衡查找树之红黑树</a></p><p>结构：</p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191225180648282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>TreeSet 两种排序方法： 自然排序和 定制排序。默认情况下，TreeSet 采用自然排序。</p><ul><li>自然排序中，比较两个对象是否相同的标准为：compareTo()返回0.不再是equals().</li><li>定制排序中，比较两个对象是否相同的标准为：compare()返回0.不再是equals().</li></ul><h4 id="3-1-自然排序"><a href="#3-1-自然排序" class="headerlink" title="3.1 自然排序"></a>3.1 自然排序</h4><p> TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元素之间的大小关系，然后将集合元素按升序(默认情况)排列。</p><p>如果试图把一个对象添加到 TreeSet 时，则该对象的类必须<strong>实现 Comparable接口</strong>。实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即通过compareTo(Object obj) 方法的返回值来比较大小。</p><p>示例：</p><pre class=" language-java"><code class="language-java">TreeSet set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jim"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Mike"</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Iterator iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        User{name='Tom', age=12}</span><span class="token comment" spellcheck="true">//        User{name='Mike', age=65}</span><span class="token comment" spellcheck="true">//        User{name='Jim', age=2}</span><span class="token comment" spellcheck="true">//        User{name='Jerry', age=32}</span><span class="token comment" spellcheck="true">//        User{name='Jack', age=33}</span><span class="token comment" spellcheck="true">//        User{name='Jack', age=56}</span><span class="token comment" spellcheck="true">// User类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//按照姓名从大到小排列,年龄从小到大排列</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>User u<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> compare <span class="token operator">=</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>compare <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> compare<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>u<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-定制排序"><a href="#3-2-定制排序" class="headerlink" title="3.2 定制排序"></a>3.2 定制排序</h4><p>定制排序，通过<strong>Comparator接口</strong>来实现。需要重写compare(T o1,T o2)方法。将实现Comparator接口的实例作为<strong>形参传递给TreeSet的构造器</strong>。向TreeSet中只能添加<strong>类型相同</strong>的对象。否则发生ClassCastException异常。</p><p>示例：</p><pre class=" language-java"><code class="language-java">Comparator com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//按照年龄从小到大排列</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>User u1<span class="token punctuation">,</span> User u2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>TreeSet set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span>com<span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jim"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Mike"</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Mary"</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Iterator iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="六-Map接口"><a href="#六-Map接口" class="headerlink" title="六.Map接口"></a>六.Map接口</h2><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191220135937272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>1.Map与Collection并列存在。用于保存具有<strong>映射关系的数据：key-value</strong>。key和value可以是任何引用类型的数据。 Map接口的常用实现类：<strong>HashMap、TreeMap、LinkedHashMap和</strong><br><strong>Properties</strong>。</p><ul><li><code>HashMap</code>：作为Map的<strong>主要实现类；线程不安全的，效率高；可以存储null的key和value</strong>。</li><li><code>LinkedHashMap</code>：保证在遍历map元素时，可以按照<strong>添加的顺序实现遍历</strong>。原因：在原有的HashMap底层结构基础上，添加了一对指针，指向前一个和后一个元素。对于<strong>频繁的遍历操作，此类执行效率高于HashMap</strong>。</li><li><code>TreeMap</code>：保证按照添加的key-value对进行排序，实现排序遍历。此时考虑<strong>key的自然排序或定制排序</strong>。底层使用<strong>红黑树</strong>。</li><li><code>Hashtable</code>：作为古老的实现类；<strong>线程安全的，效率低；不能存储null的key或value</strong>。</li><li><code>Properties</code>：常用来<strong>处理配置文件</strong>。<strong>key和value都是String类型</strong>。</li></ul><p><strong>2.Map常用方法：</strong></p><ul><li>添加：<ul><li><code>Object put(Object key,Object value)</code>：<strong>将指定key-value添加到(或修改)当前map对象中</strong></li><li><code>void putAll(Map m)</code>：将m中的所有key-value对存放到当前map中</li></ul></li><li>删除：<ul><li><code>Object remove(Object key)</code>：<strong>移除指定key的key-value对，并返回value</strong></li><li><code>void clear()</code>：清空当前map中的所有数据</li></ul></li><li>修改：<ul><li><code>Object put(Object key,Object value)</code>：将指定key-value添加到(或修改)当前map对象中</li></ul></li><li>查询：<ul><li><code>Object get(Object key)</code>：<strong>获取指定key对应的value</strong></li><li><code>int size()</code>：<strong>返回map中key-value对的个数</strong></li></ul></li><li>判断：<ul><li><code>boolean containsKey(Object key)</code>：<strong>是否包含指定的key</strong></li><li><code>boolean containsValue(Object value)</code>：是否包含指定的value</li><li><code>boolean isEmpty()</code>：<strong>判断当前map是否为空</strong></li><li><code>boolean equals(Object obj)</code>：<strong>判断当前map和参数对象obj是否相等</strong></li></ul></li><li>遍历：<ul><li><code>Set keySet()</code>：<strong>返回所有key构成的Set集合</strong></li><li><code>Collection values()</code>：<strong>返回所有value构成的Collection集合</strong></li><li><code>Set entrySet()</code>：<strong>返回所有key-value对构成的Set集合</strong></li></ul></li></ul><h3 id="1-HashMap"><a href="#1-HashMap" class="headerlink" title="1.HashMap"></a>1.HashMap</h3><p>HashMap是Map接口的主要实现类。允许使用null键和null值。</p><h4 id="1-1-结构理解"><a href="#1-1-结构理解" class="headerlink" title="1.1 结构理解"></a>1.1 结构理解</h4><ul><li><code>key</code>：<strong>无序的、不可重复的，使用Set存储所有的key  –&gt;  key所在的类要重写equals()和hashCode()</strong></li><li><code>value</code>：<strong>无序的、可重复的，使用Collection存储所有的value  –&gt;  value所在的类要重写equals()</strong></li><li><code>键值对</code>：key-value构成了一个Entry对象</li><li><code>entry</code>：<strong>无序的、不可重复的，使用Set存储所有的entry</strong></li></ul><p>即判断两个key相等的标准：hashCode相等且equals相等；判断value相等的标准：equals相等。</p><h4 id="1-2-重要常量"><a href="#1-2-重要常量" class="headerlink" title="1.2 重要常量"></a>1.2 重要常量</h4><ul><li><code>DEFAULT_INITIAL_CAPACITY</code> : 默认容量：16</li><li><code>DEFAULT_LOAD_FACTOR</code>：默认加载因子：0.75</li><li><code>threshold</code>：扩容的临界值(容量*填充因子)：16 * 0.75 =&gt; 12</li><li><code>TREEIFY_THRESHOLD</code>：Bucket(桶)中链表长度大于该默认值，转化为红黑树：8</li><li><code>MIN_TREEIFY_CAPACITY</code>：桶中的Node被树化时最小的hash表容量：64</li></ul><h4 id="1-3-底层实现"><a href="#1-3-底层实现" class="headerlink" title="1.3 底层实现"></a>1.3 底层实现</h4><p>JDK7：</p><ul><li><code>new HashMap()</code>：创建了一个长度为<strong>16的Entry[] table数组</strong></li><li><strong>数组+链表</strong>(形成链表时：<strong>新的元素指向旧的元素</strong>)</li></ul><p>JDK8：</p><ul><li><code>new HashMap()</code>：<strong>没有创建</strong>一个长度为16的数组，首次<strong>调用put()方法</strong>，底层创建成都为<strong>16的 Node[] 数组</strong></li><li><strong>数组+链表+红黑树</strong>(形成链表时：<strong>旧的元素指向新的元素</strong>)</li><li>当数组的某一个索引位置上的元素以<strong>链表形式存在的数据个数(大于8) 且当前数组的长度(大于64)</strong>时，此索引位置上的<strong>所有数据改为使用红黑树存储</strong></li></ul><h4 id="1-4-添加元素的过程-JDK7"><a href="#1-4-添加元素的过程-JDK7" class="headerlink" title="1.4 添加元素的过程(JDK7)"></a>1.4 添加元素的过程(JDK7)</h4><div style="color:red;"><p>向HashMap中<strong>添加entry1(key，value)</strong>，需要首先<strong>计算entry1中key的哈希值</strong>(根据key所在类的hashCode()计算得到)，此<strong>哈希值</strong>经过处理以后，得到在底层<strong>Entry[]数组中要存储的位置i</strong>。</p><ul><li>如果<strong>位置i</strong>上没有元素，则entry1直接添加成功。</li><li>如果位置i上已经存在entry2(或还有链表存在的entry3，entry4)，则需要通过循环的方法，依次比较entry1中key和其他的entry。<ul><li>如果彼此<strong>hash值</strong>不同，则直接添加成功。</li><li>如果hash值相同，继续比较二者是否<strong>equals</strong>。<ul><li>如果返回值为true，则使用entry1的value去<strong>替换</strong>equals为true的entry的value。</li><li>如果遍历一遍以后，发现所有的equals返回都为false,则entry1仍可添加成功。entry1<strong>指向原有</strong>的entry元素。</li></ul></li></ul></li></ul></div><h4 id="1-5-数组扩容"><a href="#1-5-数组扩容" class="headerlink" title="1.5 数组扩容"></a>1.5 数组扩容</h4><p>JDK7：</p><p>在不断的添加过程中，会涉及到扩容问题，<strong>当超出临界值12(且要存放的位置非空)</strong>时，扩容。默认的扩容方式：<strong>扩容为原来容量的2倍，并将原有的数据复制过来</strong>。</p><p>HashMap数组扩容后，原数组中的数据必须<strong>重新计算其在新数组中的位置，并放进去，这就是resize方法</strong>。比较消耗性能。</p><p>JDK8：</p><p>扩容：当HashMap中元素个数超过16 * 0.75=12（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为 2*16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，并放进去。</p><p>树形化：当HashMap中的其中<strong>一个链的对象个数如果达到了8个</strong>，此时如果<strong>数组capacity没有达到64</strong>，那么HashMap会<strong>先扩容解决</strong>，如果<strong>已经达到了64</strong>，那么这个<strong>链会变成树</strong>，结点类型由Node变成TreeNode类型。</p><h4 id="1-6-负载因子值"><a href="#1-6-负载因子值" class="headerlink" title="1.6 负载因子值"></a>1.6 负载因子值</h4><ul><li>负载因子的大小决定了HashMap的数据密度</li><li>负载因子越大密度越大，发生碰撞的几率越高，数组中的链表越容易长,造成查询或插入时的<strong>比较次数增多</strong>，性能会下降</li><li>负载因子越小，就越容易触发扩容，数据密度也越小，意味着发生碰撞的几率越小，数组中的链表也就越短，查询和插入时比较的次数也越小，性能会更高。但是会<strong>浪费一定的内存空间</strong>。而且经常扩容也会影响性能</li><li>按照语言参考及研究经验，会将负载因子设置为 <strong>0.7~0.75</strong>，此时平均检索长度接近于常数</li></ul><h4 id="1-7-示例"><a href="#1-7-示例" class="headerlink" title="1.7 示例"></a>1.7 示例</h4><pre class=" language-java"><code class="language-java">Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"BB"</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 123</span>Object value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 123 </span><span class="token keyword">boolean</span> isExist <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isExist<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span>isExist <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isExist<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span>map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">//遍历时：通常使用增强for循环</span><span class="token comment" spellcheck="true">//遍历所有的key集：keySet()</span>Set set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Iterator iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//遍历所有的value集：values()</span>Collection values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Object obj <span class="token operator">:</span> values<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//遍历所有的key-value</span><span class="token comment" spellcheck="true">//方式一：entrySet()</span>Set entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Iterator iterator1 <span class="token operator">=</span> entrySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Object obj <span class="token operator">=</span> iterator1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//entrySet集合中的元素都是entry</span>    Map<span class="token punctuation">.</span>Entry entry <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---->"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式二：</span>Set keySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Iterator iterator2 <span class="token operator">=</span> keySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Object key <span class="token operator">=</span> iterator2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"====="</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>更多内容详看 : 源码学习 – &gt; HashMap</p><h3 id="2-LinkedHashMap"><a href="#2-LinkedHashMap" class="headerlink" title="2.LinkedHashMap"></a>2.LinkedHashMap</h3><p>LinkedHashMap 是 HashMap 的子类。</p><p>在HashMap存储结构的基础上，<strong>使用了一对双向链表来记录添加元素的顺序</strong>。迭代遍历时：<strong>顺序与添加顺序一致</strong>。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// HashMap内部类：Node</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>    <span class="token keyword">final</span> K key<span class="token punctuation">;</span>    V value<span class="token punctuation">;</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// LinkedHashMap内部类：Entry 继承 Node</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">HashMap<span class="token punctuation">.</span>Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> before<span class="token punctuation">,</span> after<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 前驱节点和后继节点：记录添加元素的顺序</span>    <span class="token function">Entry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-TreeMap"><a href="#3-TreeMap" class="headerlink" title="3.TreeMap"></a>3.TreeMap</h3><p>TreeMap底层使用<strong>红黑树结构</strong>存储数据。可以保证所有的 Key-Value 对处于<strong>有序状态</strong>。向TreeMap中添加key-value，要求<strong>key必须是由同一个类创建的对象</strong>。</p><p>按照key进行排序：</p><ul><li>自然排序：所有key必须<strong>实现Comparable接口</strong>，所有key应是同一个类的对象，否则抛出ClassCastException</li><li>定制排序：TreeMap构造器中<strong>传入一个Comparator对象</strong>，该对象负责对所有key进行排序，此时不需要Key所在类实现Comparable接口</li></ul><p><strong>判断两个key相等的标准：两个key通过compareTo()方法或者compare()方法返回0</strong></p><p>自然排序示例：</p><pre class=" language-java"><code class="language-java">TreeMap map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>User u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>User u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>User u3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>User u4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Rose"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u2<span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u3<span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u4<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 遍历打印</span>Set<span class="token operator">&lt;</span>User<span class="token operator">></span> keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>User key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"："</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// User类：实现 Comparable接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//按照姓名从大到小排列,年龄从小到大排列</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>User u<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>U<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    </code></pre><p>定制排序示例：</p><pre class=" language-java"><code class="language-java">TreeMap map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>User u1<span class="token punctuation">,</span> User u2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>User u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>User u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>User u3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>User u4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Rose"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u2<span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u3<span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u4<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 遍历打印</span>Set<span class="token operator">&lt;</span>User<span class="token operator">></span> keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>User key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"："</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-Hashtable与Properties"><a href="#4-Hashtable与Properties" class="headerlink" title="4.Hashtable与Properties"></a>4.Hashtable与Properties</h3><p>1.Hashtable比较古老了，JDK1.0就提供了。<strong>Hashtable实现原理和HashMap相同</strong>，功能相同。判断两个key或value值相等的标准也一致。</p><p>HashMap与Hashtable区别：</p><ul><li><strong>HashMap线程不安全，Hashtable线程安全</strong></li><li><strong>HashMap允许使用null作为key或value，Hashtable不允许</strong></li></ul><p>2.Properties 类是 Hashtable 的子类，该对象用于<strong>处理配置文件</strong>。由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的 <strong>key和 value 都是字符串类型</strong>。</p><p>存取数据时，建议使用<code>setProperty(String key,String value)</code>方法和<code>getProperty(String key)</code>方法：</p><pre class=" language-java"><code class="language-java">Properties pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加载流对应的文件</span>String name <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="七-Collections工具类"><a href="#七-Collections工具类" class="headerlink" title="七.Collections工具类"></a>七.Collections工具类</h2><p>Collections 是一个操作 Collection 和 Map 等集合的工具类。Collections 中提供了一系列<strong>静态的方法</strong>对集合元素进行<strong>排序、查询和替换</strong>等操作，还提供了对集合对象设置不可变、对集合对象<strong>实现同步控制</strong>等方法。</p><p><strong>1.排序操作</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>reverse(List)</td><td>反转 List 中元素的顺序</td></tr><tr><td>shuffle(List)</td><td>对 List 集合元素进行随机排序</td></tr><tr><td>sort(List)</td><td>根据元素的自然顺序对指定 List 集合元素按升序排序</td></tr><tr><td>sort(List, Comparator)</td><td>根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</td></tr><tr><td>swap(List, int, int)</td><td>将指定 list 集合中的 i 处元素和 j 处元素进行交换</td></tr></tbody></table><p>示例：</p><pre class=" language-java"><code class="language-java">List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 反转</span>Collections<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 随机排序</span>Collections<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 两个索引位置的元素进行交换</span>Collections<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Collections自然排序和定制排序方法底层都还是调用的 Arrays.sort(a, (Comparator) c)方法</span><span class="token comment" spellcheck="true">// 自然排序</span>Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// List接口中sort默认方法部分源码(JDK8中接口新特性)</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将集合转为数组</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span>Comparator<span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用Arrays的sort方法</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><strong>2.查找、替换操作</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Object max(Collection)</td><td>根据元素的自然顺序，返回给定集合中的最大元素</td></tr><tr><td>Object max(Collection，Comparator)</td><td>根据 Comparator 指定的顺序，返回给定集合中的最大元素</td></tr><tr><td>Object min(Collection)</td><td></td></tr><tr><td>Object min(Collection，Comparator)</td><td></td></tr><tr><td>int frequency(Collection，Object)</td><td>返回指定集合中指定元素的出现次数</td></tr><tr><td>void copy(List dest,List src)</td><td>将src中的内容复制到dest中</td></tr><tr><td>boolean replaceAll(List list，Object oldVal，Object newVal)</td><td>使用新值替换List 对象的所有旧值</td></tr></tbody></table><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 元素出现次数</span><span class="token keyword">int</span> frequency <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">frequency</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>frequency<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 复制</span><span class="token comment" spellcheck="true">//报异常：IndexOutOfBoundsException("Source does not fit in dest")</span><span class="token comment" spellcheck="true">// List dest = new ArrayList();</span><span class="token comment" spellcheck="true">// Collections.copy(dest,list);</span><span class="token comment" spellcheck="true">//正确的：目标集合size大小 大于等于 原集合size大小</span>List dest <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dest<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//list.size();</span>Collections<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Collections中void copy(List dest,List src)方法源码</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> dest<span class="token punctuation">,</span> List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> srcSize <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 若原集合size大小 大于 目标集合size大小(并不是集合初始化容量大小)，则抛异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>srcSize <span class="token operator">></span> dest<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"Source does not fit in dest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><strong>3.同步控制操作</strong></p><p>Collections 类中提供了多个 <code>synchronizedXxx()</code> 方法，该方法可使将<strong>指定集合包装成线程同步的集合</strong>，从而可以解决多线程并发访问集合时的线程安全问题。</p><pre class=" language-java"><code class="language-java">List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回的list2即为线程安全的List</span>List list2 <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础之常用类</title>
      <link href="/2019/10/12/commonclass/"/>
      <url>/2019/10/12/commonclass/</url>
      
        <content type="html"><![CDATA[<h2 id="一-字符串相关的类"><a href="#一-字符串相关的类" class="headerlink" title="一.字符串相关的类"></a>一.字符串相关的类</h2><h3 id="1-String及常用方法"><a href="#1-String及常用方法" class="headerlink" title="1.String及常用方法"></a>1.String及常用方法</h3><h4 id="1-1-String的特性"><a href="#1-1-String的特性" class="headerlink" title="1.1 String的特性"></a>1.1 String的特性</h4><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191204190526872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>String:字符串，使用一对””引起来表示。</p><ol><li>String声明为<code>final</code>的，<strong>不可被继承</strong></li><li>String实现了<code>Serializable</code>接口：表示字符串是<strong>支持序列化</strong>的。<br> 实现了<code>Comparable</code>接口：表示String可以<strong>比较大小</strong></li><li>String内部定义了<code>final char[] value</code>用于<strong>存储字符串数据</strong></li><li>String:代表<strong>不可变的字符序列</strong>。简称：<strong>不可变性</strong>。<br>体现：<ul><li>当对字符串<strong>重新赋值</strong>时，需要<strong>重写指定内存区域赋值</strong>，不能使用原有的value进行赋值。</li><li>当对现有的字符串进行<strong>连接操作</strong>时，也需要<strong>重新指定内存区域赋值</strong>，不能使用原有的value进行赋值。</li><li>当调用String的<code>replace()</code>方法修改指定字符或字符串时，也需要<strong>重新指定内存区域赋值</strong>，不能使用原有的value进行赋值。</li></ul></li><li>通过<strong>字面量</strong>的方式（区别于new）给一个字符串赋值，此时的<strong>字符串值声明在字符串常量池</strong>中。</li><li>字符串常量池中是<strong>不会存储相同内容的字符串</strong>的。</li></ol><pre class=" language-java"><code class="language-java">    String s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字面量的定义方式</span>    String s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// false 比较s1和s2的地址值    </span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// hello</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// abc    </span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String s3 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    s3 <span class="token operator">+=</span> <span class="token string">"def"</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// abcdef</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// abc    </span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String s4 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    String s5 <span class="token operator">=</span> s4<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// abc</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// mbc</span></code></pre><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/2019120416002349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="1-2-String对象的创建"><a href="#1-2-String对象的创建" class="headerlink" title="1.2 String对象的创建"></a>1.2 String对象的创建</h4><p>String的实例化方式：</p><ul><li>通过字面量定义的方式：<code>String.valueOf()</code></li><li>通过new + 构造器的方式：<code>new String()</code></li></ul><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//通过字面量定义的方式：此时的s1和s2的数据javaEE声明在方法区中的字符串常量池中。</span>    String s1 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>    String s2 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过new + 构造器的方式:此时的s3和s4保存的地址值，是数据在堆空间中开辟空间以后对应的地址值。</span>    String s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"javaEE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"javaEE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name <span class="token operator">==</span> p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Jerry"</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Tom</span></code></pre><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191204161749776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191204162108690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>面试题</strong>：String s = new String(“abc”);方式创建对象，在内存中创建了几个对象？<br><strong>两个</strong>: 一个是堆空间中new结构，另一个是char[]对应的常量池中的数据：”abc”</p><h4 id="1-3-String使用陷阱"><a href="#1-3-String使用陷阱" class="headerlink" title="1.3 String使用陷阱"></a>1.3 String使用陷阱</h4><p>关于拼接字符串后两个变量地址是否相等。<div style="color:red;"></div></p><ul><li>常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。</li><li>只要其中有一个是变量，结果就在堆中</li><li>如果拼接的结果调用intern()方法，返回值就在常量池中</li></ul><pre class=" language-java"><code class="language-java">    String s1 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>    String s2 <span class="token operator">=</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>    String s3 <span class="token operator">=</span> <span class="token string">"javaEEhadoop"</span><span class="token punctuation">;</span>    String s4 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>    String s5 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>    String s6 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> s2<span class="token punctuation">;</span>    String s7 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>    <span class="token keyword">final</span> String s8 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//s8:常量</span>    String s9 <span class="token operator">=</span> s8 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>    String s11 <span class="token operator">=</span> s8 <span class="token operator">+</span> s2<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s9<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s11<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    String s10 <span class="token operator">=</span> s6<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回值得到的s8使用的常量值中已经存在的“javaEEhadoop”</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s10<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191204163431407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>面试题：</strong></p><pre class=" language-java"><code class="language-java">    String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'t'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 传递的是引用</span>        str <span class="token operator">=</span> <span class="token string">"test ok"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给传递过来的地址重新赋值，而不是改变引用重新指向</span>        ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringTest ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ex<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str<span class="token punctuation">,</span> ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// good string是不可变的，不能重新赋值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// best 数组是可变的</span>    <span class="token punctuation">}</span></code></pre><h4 id="1-4-String常用方法"><a href="#1-4-String常用方法" class="headerlink" title="1.4 String常用方法"></a>1.4 String常用方法</h4><p>a.基本方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>int length()</td><td>返回字符串的长度： return value.length</td></tr><tr><td>char charAt(int index)</td><td>返回某索引处的字符return value[index]</td></tr><tr><td>boolean isEmpty()</td><td>判断是否是空字符串：return value.length == 0</td></tr><tr><td>String toLowerCase()</td><td>使用默认语言环境，将 String 中的所有字符转换为小写</td></tr><tr><td>String toUpperCase()</td><td>使用默认语言环境，将 String 中的所有字符转换为大写</td></tr><tr><td>String trim()</td><td>返回字符串的副本，忽略前导空白和尾部空白</td></tr><tr><td>boolean equals(Object obj)</td><td>比较字符串的内容是否相同</td></tr><tr><td>boolean equalsIgnoreCase(String anotherString)</td><td>与equals方法类似，忽略大小写</td></tr><tr><td>String concat(String str)</td><td>将指定字符串连接到此字符串的结尾。 等价于用“+”</td></tr><tr><td>int compareTo(String anotherString)</td><td>比较两个字符串的大小</td></tr><tr><td>String substring(int beginIndex)</td><td>返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。</td></tr><tr><td>String substring(int beginIndex, int endIndex)</td><td>返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</td></tr></tbody></table><p>b.包含：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean endsWith(String suffix)</td><td>测试此字符串是否以指定的后缀结束</td></tr><tr><td>boolean startsWith(String prefix)</td><td>测试此字符串是否以指定的前缀开始</td></tr><tr><td>boolean startsWith(String prefix, int toffset)</td><td>测试此字符串从指定索引开始的子字符串是否以指定前缀开始</td></tr><tr><td>boolean contains(CharSequence s)</td><td>当且仅当此字符串包含指定的 char 值序列时，返回 true</td></tr><tr><td>int indexOf(String str)</td><td>返回指定子字符串在此字符串中第一次出现处的索引</td></tr><tr><td>int indexOf(String str, int fromIndex)</td><td>返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</td></tr><tr><td>int lastIndexOf(String str)</td><td>返回指定子字符串在此字符串中最右边出现处的索引</td></tr><tr><td>int lastIndexOf(String str, int fromIndex)</td><td>返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</td></tr></tbody></table><p>注：indexOf和lastIndexOf方法如果未找到都是返回-1</p><pre class=" language-java"><code class="language-java">    String str1 <span class="token operator">=</span> <span class="token string">"hellowworld"</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"rld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span>    <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"He"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span>    <span class="token keyword">boolean</span> b3 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"ll"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span>    String str2 <span class="token operator">=</span> <span class="token string">"wor"</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"lol"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// -1</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"lo"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// -1   (3+2)</span>    String str3 <span class="token operator">=</span> <span class="token string">"hellorworld"</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"or"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"or"</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 4    (7-1)</span>    <span class="token comment" spellcheck="true">//什么情况下，indexOf(str)和lastIndexOf(str)返回值相同？</span>    <span class="token comment" spellcheck="true">//情况一：存在唯一的一个str。情况二：不存在str</span></code></pre><p>c.替换：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>String replace(char oldChar, char newChar)</td><td>返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的<strong>所有 oldChar</strong> 得到的。</td></tr><tr><td>String replace(CharSequence target, CharSequence replacement)</td><td>使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</td></tr><tr><td>String replaceAll(String regex, String replacement)</td><td>使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</td></tr><tr><td>String replaceFirst(String regex, String replacement)</td><td>使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</td></tr></tbody></table><p>d.匹配:</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean matches(String regex)</td><td>告知此字符串是否匹配给定的正则表达式。</td></tr></tbody></table><p>e.切片：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>String[] split(String regex)</td><td>根据给定正则表达式的匹配拆分此字符串。</td></tr><tr><td>String[] split(String regex, int limit)</td><td>根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</td></tr></tbody></table><pre class=" language-java"><code class="language-java">    String str1 <span class="token operator">=</span> <span class="token string">"helloworld"</span><span class="token punctuation">;</span>    String str2 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// helloworld</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// helluwurld</span>    String str3 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"he"</span><span class="token punctuation">,</span> <span class="token string">"do"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// dolloworld    </span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String str <span class="token operator">=</span> <span class="token string">"12hello34world5java7891mysql456"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把字符串中的数字替换成,，如果结果中开头和结尾有，的话去掉</span>    String string <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"^,|,$"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// hello,world,java,mysql</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断str字符串中是否全部有数字组成，即有1-n个数字组成</span>    <span class="token keyword">boolean</span> matches <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matches<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span>    String tel <span class="token operator">=</span> <span class="token string">"0571-4534289"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断这是否是一个杭州的固定电话</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> tel<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"0571-\\d{7,8}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str <span class="token operator">=</span> <span class="token string">"hello|world|java"</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// hello world java</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       str2 <span class="token operator">=</span> <span class="token string">"hello.world.java"</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs2 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strs2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// hello world java</span>    <span class="token punctuation">}</span></code></pre><h4 id="1-5-string类与其他结构之间的转换"><a href="#1-5-string类与其他结构之间的转换" class="headerlink" title="1.5 string类与其他结构之间的转换"></a>1.5 string类与其他结构之间的转换</h4><p><strong>a.String 与基本数据类型、包装类之间的转换</strong></p><ul><li>String –&gt; 基本数据类型、包装类：调用<code>包装类的静态方法</code>：parseXxx(str)</li><li>基本数据类型、包装类 –&gt; String:调用String重载的<code>valueOf(xxx)</code></li></ul><pre class=" language-java"><code class="language-java">    String str1 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  int num = (int)str1;    // 错误的</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    String str2 <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// "123"</span>    String str3 <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// false</span></code></pre><p><strong>b.String 与 char[]之间的转换</strong></p><ul><li>String –&gt; char[] : 调用String的<code>toCharArray()</code></li><li>char[] –&gt; String : 调用String的<code>构造器</code></li></ul><pre class=" language-java"><code class="language-java">    String str1 <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> charArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>charArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    String str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>c.String 与 byte[]之间的转换</strong></p><ul><li><strong>编码</strong>：String –&gt; byte[] : 调用String的<code>getBytes()</code><br>编码：字符串 –&gt;字节数组  (看得懂 —&gt;看不懂的二进制数据)</li><li><strong>解码</strong>：byte[] –&gt; String : 调用String的<code>构造器</code><br>解码：编码的逆过程，字节数组 –&gt; 字符串 （看不懂的二进制数据 —&gt; 看得懂）</li><li>说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</li></ul><pre class=" language-java"><code class="language-java">    String str1 <span class="token operator">=</span> <span class="token string">"abc123中国"</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用默认的字符集，进行编码。</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gbks <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用gbk字符集进行编码。</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>gbks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用默认的字符集，进行解码。</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        String str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>gbks<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出现乱码。原因：编码集和解码集不一致！    </span>    String str4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>gbks<span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没有出现乱码。原因：编码集和解码集一致！</span></code></pre><h3 id="2-StringBuffer与StringBuilder"><a href="#2-StringBuffer与StringBuilder" class="headerlink" title="2.StringBuffer与StringBuilder"></a>2.StringBuffer与StringBuilder</h3><h4 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h4><p>StringBuffer与StringBuilder都是<strong>可变的字符序列</strong>，都可以对字符串内容进行增删，<strong>不会产生新的对象</strong>。两者非常相似，很多方法与String相同。</p><p>下面是<strong>StringBuffer、StringBuilder及AbstractStringBuilder的部分源码</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// StringBuffer </span><span class="token operator">*</span> <span class="token annotation punctuation">@since</span>  JDK1<span class="token number">.0</span> <span class="token operator">*</span><span class="token operator">/</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StringBuffer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractStringBuilder</span>    <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span><span class="token punctuation">,</span> CharSequence <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> toStringCache<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 3388685877147921107L<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// AbstractStringBuilder(int capacity)</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">StringBuffer</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">StringBuffer</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// AbstractStringBuilder(int capacity)</span>        <span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// -------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">// StringBuilder</span> <span class="token operator">*</span> <span class="token annotation punctuation">@since</span>  <span class="token number">1.5</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractStringBuilder</span>    <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span><span class="token punctuation">,</span> CharSequence <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 4383685877147921099L<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// AbstractStringBuilder(int capacity)</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// AbstractStringBuilder(int capacity)</span>        <span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// -------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">// AbstractStringBuilder</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Appendable</span><span class="token punctuation">,</span> CharSequence <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 没有final声明,value可以不断扩容</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录有效字符的个数</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token function">AbstractStringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">AbstractStringBuilder</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 容量扩展机制</span>     <span class="token keyword">public</span> AbstractStringBuilder <span class="token function">append</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">appendNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>count <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 有效字符个数+附加字符长度</span>        str<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> value<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        count <span class="token operator">+=</span> len<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// append(String str)：当str==null时</span>    <span class="token keyword">private</span> AbstractStringBuilder <span class="token function">appendNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> count<span class="token punctuation">;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        value<span class="token punctuation">[</span>c<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'n'</span><span class="token punctuation">;</span>        value<span class="token punctuation">[</span>c<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'u'</span><span class="token punctuation">;</span>        value<span class="token punctuation">[</span>c<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'l'</span><span class="token punctuation">;</span>        value<span class="token punctuation">[</span>c<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'l'</span><span class="token punctuation">;</span>        count <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 容量扩充</span>     <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minimumCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minimumCapacity <span class="token operator">-</span> value<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            value <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>                    <span class="token function">newCapacity</span><span class="token punctuation">(</span>minimumCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建新的容量</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">newCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// (count+len)*2+2</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> MAX_ARRAY_SIZE <span class="token operator">-</span> newCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token operator">?</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span>            <span class="token operator">:</span> newCapacity<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>源码分析：</strong></p><ul><li><code>String str = new String();  //char[] value = new char[0];</code></li><li><code>String str1 = new String(&quot;abc&quot;);  //char[] value = new char[]{&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};</code></li><li><code>StringBuffer sb1 = new StringBuffer();  //char[] value = new char[16];创建了一个长度是16的数组。</code></li><li><code>StringBuffer sb2 = new StringBuffer(&quot;abc&quot;);  //char[] value = new char[&quot;abc&quot;.length() + 16];</code></li></ul><p><strong>问题：</strong></p><ul><li><code>System.out.println(sb1.length()); //0；System.out.println(sb2.length());//3</code></li><li>扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。<strong>默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中</strong>。</li><li>指导意义：开发中建议大家使用：<code>StringBuffer(int capacity) 或 StringBuilder(int capacity)</code></li></ul><h4 id="2-2-构造器及常用方法"><a href="#2-2-构造器及常用方法" class="headerlink" title="2.2 构造器及常用方法"></a>2.2 构造器及常用方法</h4><p><strong>构造器：</strong></p><table><thead><tr><th>构造器</th><th>描述</th></tr></thead><tbody><tr><td>StringBuffer()</td><td>初始容量为16 的字符串缓冲区</td></tr><tr><td>StringBuffer(int size)</td><td>构造指定容量的字符串缓冲区</td></tr><tr><td>StringBuffer(String str)</td><td>将内容初始化为指定字符串内容</td></tr></tbody></table><p><strong>常用方法：</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>StringBuffer append(xxx)</td><td>增</td></tr><tr><td>StringBuffer delete(int start,int end)</td><td>删</td></tr><tr><td>public void setCharAt(int n ,char ch)</td><td>改</td></tr><tr><td>StringBuffer replace(int start, int end, String str)</td><td>改：把[start,end)位置替换为str</td></tr><tr><td>public char charAt(int n )</td><td>查</td></tr><tr><td>StringBuffer insert(int offset, xxx)</td><td>插</td></tr><tr><td>public int length()</td><td>长度</td></tr><tr><td>for() + charAt() / toString()</td><td>遍历</td></tr></tbody></table><p>注意：</p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> null<span class="token punctuation">;</span>StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当添加null时，会返回"null"字符</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"null"</span>StringBuffer sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创造对象时为null，则是空对象</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//java.lang.NullPointerException</span></code></pre><h3 id="3-String-Stringbuffer-StringBuilder区别"><a href="#3-String-Stringbuffer-StringBuilder区别" class="headerlink" title="3.String, Stringbuffer, StringBuilder区别"></a>3.String, Stringbuffer, StringBuilder区别</h3><div style="color:red;"><p>相同点：</p><ul><li>都是final类，都不能被继承；</li><li>都是采用的char[]存储。</li></ul><p>异同点：</p><ol><li>String是不可变的字符序列(char[] 是final修饰的)，每次对String对象改变，都会返回一个新的String对象；StringBuffer、StringBuilder是可变的字符序列(char[]没有final修饰)，不会产生新的对象；</li><li>StringBuffer是线程安全的，效率低；StringBuilder是线程不安全的，效率高；StringBuilder &gt; StringBuffer &gt; String。</li><li>StringBuffer和StringBuilder扩容都是(count+len)长度的2倍+2。</li></ol></div><h3 id="4-String相关应用"><a href="#4-String相关应用" class="headerlink" title="4.String相关应用"></a>4.String相关应用</h3><p>4.1 模拟一个trim方法，去除字符串两端的空格</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">myTrim</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用于记录从前往后首次索引位置不是空格的位置的索引</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用于记录从后往前首次索引位置不是空格的位置的索引</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              start<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              end<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.2 将一个字符串进行反转或将字符串中指定部分进行反转。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//方式一：转换为char[]</span>    <span class="token keyword">public</span> String <span class="token function">reverse</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> startIndex<span class="token punctuation">,</span>y <span class="token operator">=</span> endIndex<span class="token punctuation">;</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">,</span>y<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">char</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方式二：使用String的拼接</span>    <span class="token keyword">public</span> String <span class="token function">reverse1</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//第1部分</span>            String reverseStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>startIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第2部分</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> endIndex<span class="token punctuation">;</span>i <span class="token operator">>=</span> startIndex<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                reverseStr <span class="token operator">+=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//第3部分</span>            reverseStr <span class="token operator">+=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>endIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> reverseStr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方式三：使用StringBuffer/StringBuilder替换String</span>    <span class="token keyword">public</span> String <span class="token function">reverse2</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第1部分</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>startIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第2部分</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> endIndex<span class="token punctuation">;</span>i <span class="token operator">>=</span> startIndex<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//第3部分</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>endIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>4.3 获取一个字符串在另一个字符串中出现的次数</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 获取subStr在mainStr中出现的次数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span>String mainStr<span class="token punctuation">,</span>String subStr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mainLength <span class="token operator">=</span> mainStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> subLength <span class="token operator">=</span> subStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mainLength <span class="token operator">>=</span> subLength<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//方式一：</span><span class="token comment" spellcheck="true">//            while((index = mainStr.indexOf(subStr)) != -1){</span><span class="token comment" spellcheck="true">//                count++;</span><span class="token comment" spellcheck="true">//                mainStr = mainStr.substring(index + subStr.length());</span><span class="token comment" spellcheck="true">//            }</span>            <span class="token comment" spellcheck="true">//方式二：对方式一的改进</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">=</span> mainStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>subStr<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                index <span class="token operator">+=</span> subLength<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>4.4 获取两个字符串中最大相同子串</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 提示：将短的那个串进行长度依次递减的子串与较长的串比较</span>    <span class="token comment" spellcheck="true">//前提：两个字符串中只有一个最大相同子串</span>    <span class="token keyword">public</span> String <span class="token function">getMaxSameString</span><span class="token punctuation">(</span>String str1<span class="token punctuation">,</span>String str2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str1 <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> str2 <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            String maxStr <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span> str1 <span class="token operator">:</span> str2<span class="token punctuation">;</span>            String minStr <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span> str1 <span class="token operator">:</span> str2<span class="token punctuation">;</span>            <span class="token keyword">int</span> length <span class="token operator">=</span> minStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>y <span class="token operator">=</span> length <span class="token operator">-</span> i<span class="token punctuation">;</span>y <span class="token operator">&lt;=</span> length<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">,</span>y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    String subStr <span class="token operator">=</span> minStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>maxStr<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>subStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> subStr<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果存在多个长度相同的最大相同子串</span>    <span class="token comment" spellcheck="true">// 此时先返回String[]，后面可以用集合中的ArrayList替换，较方便</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMaxSameString1</span><span class="token punctuation">(</span>String str1<span class="token punctuation">,</span> String str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str1 <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> str2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            StringBuffer sBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String maxString <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> str1 <span class="token operator">:</span> str2<span class="token punctuation">;</span>            String minString <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> str2 <span class="token operator">:</span> str1<span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> minString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> len <span class="token operator">-</span> i<span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">,</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String subString <span class="token operator">=</span> minString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxString<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        sBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>subString <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//                System.out.println(sBuffer);</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> sBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">",$"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> split<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果存在多个长度相同的最大相同子串：使用ArrayList</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getMaxSameSubString1</span><span class="token punctuation">(</span>String str1<span class="token punctuation">,</span> String str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str1 <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> str2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String maxString <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> str1 <span class="token operator">:</span> str2<span class="token punctuation">;</span>            String minString <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> str2 <span class="token operator">:</span> str1<span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> minString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> len <span class="token operator">-</span> i<span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">,</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String subString <span class="token operator">=</span> minString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxString<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>4.5 对字符串中字符进行自然顺序排序</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">charSort</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.字符串变成字符数组</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.对数组排序，选择，冒泡，Arrays.sort(str.toCharArray())</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.将排序后的数组变成字符串</span>    String newStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newStr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="二-日期时间API"><a href="#二-日期时间API" class="headerlink" title="二.日期时间API"></a>二.日期时间API</h2><h3 id="1-JDK8之前"><a href="#1-JDK8之前" class="headerlink" title="1.JDK8之前"></a>1.JDK8之前</h3><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191218113633652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>java.util.Date、java.sql.Date、SimpleDateFormat、Calendar、GregorianCalendar</p><h4 id="1-1-System静态方法"><a href="#1-1-System静态方法" class="headerlink" title="1.1 System静态方法"></a>1.1 System静态方法</h4><p><strong>java.lang.System</strong>类提供的<code>public static long currentTimeMillis()</code>用来返回<strong>当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">long</span> time <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。</span><span class="token comment" spellcheck="true">//称为时间戳</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="1-2-Date类"><a href="#1-2-Date类" class="headerlink" title="1.2 Date类"></a>1.2 Date类</h4><p>java.util.Date类表示特定的瞬间，精确到毫秒。子类java.sql.Date类。</p><p><strong>构造器：</strong></p><table><thead><tr><th>构造器</th><th>描述</th></tr></thead><tbody><tr><td>Date()</td><td>创建一个对应当前时间的Date对象</td></tr><tr><td>Date(long date)</td><td>创建指定毫秒数的Date对象</td></tr></tbody></table><p><strong>常用方法：</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>toString()</td><td>把此 Date 对象转换为以下形式的 String： dow mon dd hhmmss zzz yyyy</td></tr><tr><td>getTime()</td><td>获取当前Date对象对应的毫秒数。（时间戳）</td></tr></tbody></table><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//构造器一：Date()：创建一个对应当前时间的Date对象</span>Date date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Sat Feb 16 16:35:31 GMT+08:00 2019</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1550306204104</span><span class="token comment" spellcheck="true">//构造器二：创建指定毫秒数的Date对象</span>Date date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>155030620410L<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>java.sql.Date类：</strong></p><p>实例化：<code>new java.sql.Date(long date)</code></p><p>util.Date与sql.Date相互转换：</p><p>sql.Date –&gt; util.Date：子类对象转父类对象自动转型(多态)</p><p>util.Date –&gt; sql.Date：<code>new java.sql.Date( (new Date()).getTime() )</code></p><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建java.sql.Date对象</span>java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date date3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>35235325345L<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1971-02-13</span><span class="token comment" spellcheck="true">//如何将java.util.Date对象转换为java.sql.Date对象</span><span class="token comment" spellcheck="true">//情况一：</span><span class="token comment" spellcheck="true">//  Date date4 = new java.sql.Date(2343243242323L);</span><span class="token comment" spellcheck="true">//  java.sql.Date date5 = (java.sql.Date) date4;</span><span class="token comment" spellcheck="true">//情况二：</span>Date date6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date date7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>date6<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="1-3-SimpleDataFormat类"><a href="#1-3-SimpleDataFormat类" class="headerlink" title="1.3 SimpleDataFormat类"></a>1.3 SimpleDataFormat类</h4><p>SimpleDateFormat类对日期Date类的格式化和解析：</p><ul><li>格式化：日期 –&gt; 字符串</li><li>解析：字符串 –&gt; 日期</li></ul><p>相关构造器及方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public SimpleDateFormat(String pattern)</td><td>该构造方法可以用参数pattern指定的格式创建一个对象</td></tr><tr><td>public String format(Date date)</td><td>格式化时间对象date</td></tr><tr><td>public Date parse(String source)</td><td>从给定字符串的开始解析文本，以生成一个日期</td></tr></tbody></table><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// SimpleDateFormat sdf1 = new SimpleDateFormat("yyyyy.MMMMM.dd GGG hh:mm aaa");</span>SimpleDateFormat sdf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//格式化</span>String format1 <span class="token operator">=</span> sdf1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2019-02-18 11:48:27</span><span class="token comment" spellcheck="true">//解析:要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现),否则，抛异常</span>Date date2 <span class="token operator">=</span> sdf1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-02-18 11:48:27"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="1-4-Calendar类"><a href="#1-4-Calendar类" class="headerlink" title="1.4 Calendar类"></a>1.4 Calendar类</h4><p> Calendar是一个抽象基类，主用用于完成日期字段之间相互操作的功能。</p><p>构造器及常用方法：</p><p><strong>int field</strong>：静态属性(YEAR、MONTH、DAY_OF_WEEK、HOUR_OF_DAY 、MINUTE、SECOND)等</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>Calendar.getInstance()</strong></td><td>获取Calendar实例</td></tr><tr><td>public int <strong>get(int field)</strong></td><td>获取指定部位的时间信息</td></tr><tr><td>public void <strong>set(int field,int value)</strong></td><td>设置指定部位的时间信息</td></tr><tr><td>public void <strong>add(int field,int amount)</strong></td><td>修改指定部位的时间信息</td></tr><tr><td>public final Date <strong>getTime()</strong></td><td>日历类—&gt; Date</td></tr><tr><td>public final void <strong>setTime(Date date)</strong></td><td>Date —&gt; 日历类</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li><strong>获取月份时</strong>：一月是0，二月是1，以此类推，12月是11</li><li><strong>获取星期时</strong>：周日是1，周二是2 ， 。。。。周六是7</li></ul><p><strong>示例：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.实例化</span><span class="token comment" spellcheck="true">//方式一：创建其子类（GregorianCalendar）的对象</span><span class="token comment" spellcheck="true">//方式二：调用其静态方法getInstance()</span>Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  System.out.println(calendar.getClass());</span><span class="token comment" spellcheck="true">//2.常用方法</span><span class="token comment" spellcheck="true">//get()</span><span class="token keyword">int</span> days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set()</span><span class="token comment" spellcheck="true">//calendar可变性</span>calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//add()</span>calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//getTime():日历类---> Date</span>Date date <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//setTime():Date ---> 日历类</span>Date date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-JDK8"><a href="#2-JDK8" class="headerlink" title="2.JDK8"></a>2.JDK8</h3><p>Calendar面临的问题：</p><p><strong>可变性</strong>：像日期和时间这样的类应该是不可变的。<br><strong>偏移性</strong>：Date中的年份是从1900开始的，而月份都从0开始。<br><strong>格式化</strong>：格式化只对Date有用，Calendar则不行。<br>此外，它们也不是线程安全的；不能处理闰秒等</p><p>Java 8 吸收了 Joda-Time 的精华，以一个新的开始为 Java 创建优秀的 API。新的 java.time 中包含了所有关于本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）、时区（ZonedDateTime）和持续时间（Duration）的类。</p><p><strong>API：</strong></p><table><thead><tr><th>包</th><th>描述</th></tr></thead><tbody><tr><td>java.time</td><td>包含值对象的基础包</td></tr><tr><td>java.time.chrono</td><td>提供对不同的日历系统的访问</td></tr><tr><td>java.time.format</td><td>格式化和解析时间和日期</td></tr><tr><td>java.time.temporal</td><td>包括底层框架和扩展特性</td></tr><tr><td>java.time.zone</td><td>包含时区支持的类</td></tr></tbody></table><h4 id="2-1-LocalDate、LocalTime、LocalDateTime"><a href="#2-1-LocalDate、LocalTime、LocalDateTime" class="headerlink" title="2.1 LocalDate、LocalTime、LocalDateTime"></a>2.1 LocalDate、LocalTime、LocalDateTime</h4><p>这三个类的实例都是<strong>不可变的对象</strong>。LocalDate代表IOS格式(yyyy-MM-dd)的日期；LocalTime表示一个时间；LocalDateTime是用来表示日期和时间的。</p><p>LocalDateTime使用频率偏高，<strong>用法类似于Calendar</strong>。</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>now()</td><td>静态方法，根据当前时间创建对象</td></tr><tr><td>of()</td><td>静态方法，根据指定日期/时间创建对象</td></tr><tr><td>getDayOfMonth() / getDayOfYear()</td><td>获得月份天数(1-31) /获得年份天数(1-366)</td></tr><tr><td>getDayOfWeek()</td><td>获得星期几(返回一个 DayOfWeek 枚举值)</td></tr><tr><td>getMonth()</td><td>获得月份, 返回一个 Month 枚举值</td></tr><tr><td>getMonthValue() / getYear()</td><td>获得月份(1-12) /获得年份</td></tr><tr><td>getHour() / getMinute() / getSecond()</td><td>获得当前对象对应的小时、分钟、秒</td></tr><tr><td>withDayOfMonth() / withDayOfYear() / withMonth() / withYear()</td><td>将月份天数、年份天数、月份、年份修改为指定的值并返回新的对象</td></tr><tr><td>plusDays() / plusWeeks() / plusMonths() / plusYears() / plusHours()</td><td>向当前对象添加几天、几周、几个月、几年、几小时</td></tr><tr><td>minusMonths() / minusWeeks() / minusDays() / minusYears() / minusHours()</td><td>从当前对象减去几月、几周、几天、几年、几小时</td></tr></tbody></table><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//now():获取当前的日期、时间、日期+时间</span>LocalDate localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalTime localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2019-12-18</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 10:14:29.600</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2019-12-18T10:14:29.600</span><span class="token comment" spellcheck="true">//of():设置指定的年、月、日、时、分、秒。没有偏移量</span>LocalDateTime localDateTime1 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2020-10-06T13:23:43</span><span class="token comment" spellcheck="true">//getXxx()：获取相关的属性</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 18</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// WEDNESDAY</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// DECEMBER</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 12</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 14</span><span class="token comment" spellcheck="true">//体现不可变性</span><span class="token comment" spellcheck="true">//withXxx():设置相关的属性</span>LocalDate localDate1 <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2019-12-18</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2019-12-22</span>LocalDateTime localDateTime2 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">withHour</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2019-12-18T10:14:29.600</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2019-12-18T04:14:29.600</span>LocalDateTime localDateTime3 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">plusMonths</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2020-03-18T10:14:29.600</span>LocalDateTime localDateTime4 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2019-12-12T10:14:29.600</span></code></pre><h4 id="2-2-Instant"><a href="#2-2-Instant" class="headerlink" title="2.2 Instant"></a>2.2 Instant</h4><p>Instant：<strong>时间线上的一个瞬时点，不需要任何上下文信息</strong>。这可以用来记录应用程序中的事件时间戳。<strong>用法类似于 java.util.Date 类</strong>。</p><p>年月日时分秒是面向人类的一个时间模型，时间线中一点是面向机器的另一个时间模型。在Java中，也是从1970年开始，但以毫秒为单位。</p><p>1秒 = 1000毫秒 =10^6 微妙=10^9纳秒</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>now()</td><td>静态方法，返回默认UTC时区的Instant类的对象</td></tr><tr><td>ofEpochMilli(long epochMilli)</td><td>静态方法，返回在1970-01-01 00 00 00基础上加上指定毫秒数之后的Instant类的对象</td></tr><tr><td>atOffset(ZoneOffset offset)</td><td>结合即时的偏移来创建一个 OffsetDateTime</td></tr><tr><td>toEpochMilli()</td><td>返回1970-01-01 00 00 00到当前时间的毫秒数，即为时间戳</td></tr></tbody></table><p><strong>时间戳是指格林威治时间1970 年01 月01 日00 时00 分00 秒( 北京时间1970 年01 月01</strong><br><strong>日08 时00 分00 秒) 起至现在的总秒数(东八区)</strong>。</p><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//now():获取本初子午线对应的标准时间</span>Instant instant <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2019-12-18T02:42:50.214Z</span><span class="token comment" spellcheck="true">//添加时间的偏移量</span>OffsetDateTime offsetDateTime <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">atOffset</span><span class="token punctuation">(</span>ZoneOffset<span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>offsetDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2019-12-18T10:42:50.214+08:00</span><span class="token comment" spellcheck="true">//toEpochMilli():获取自1970年1月1日0时0分0秒（UTC）开始的毫秒数  ---> Date类的getTime()</span><span class="token keyword">long</span> milli <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>milli<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1576636970214</span><span class="token comment" spellcheck="true">//ofEpochMilli():通过给定的毫秒数，获取Instant实例  -->Date(long millis)</span>Instant instant1 <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span>1576636970214L<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 2019-12-18T02:42:50.214Z</span></code></pre><h4 id="2-3-DateTimeFormatter"><a href="#2-3-DateTimeFormatter" class="headerlink" title="2.3 DateTimeFormatter"></a>2.3 DateTimeFormatter</h4><p>java.time.format.DateTimeFormatter类：格式化与解析日期或时间类。<strong>用法类似于SimpleDateFormat类</strong>。DateTimeFormatter提供了三种格式化方法：</p><ul><li><p>预定义的标准格式。静态常量：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</p><p><code>DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;</code></p></li><li><p>本地化相关的格式。静态方法：ofLocalizedDateTime(FormatStyle.LONG)、ofLocalizedDate(FormatStyle.MEDIUM)。</p><p>ofLocalizedDateTime()：</p><ul><li><p>FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT :适用于LocalDateTime</p><p><code>DateTimeFormatter formatter1 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);</code></p></li></ul><p>ofLocalizedDate()：</p><ul><li><p>FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDate</p><p><code>DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);</code></p></li></ul></li><li><p><strong>自定义的格式(常用)</strong>。如：ofPattern(“yyyy-MM-dd hh mm ss”)</p></li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>ofPattern(String pattern)</td><td>静态方法，返回一个指定字符串格式的DateTimeFormatter</td></tr><tr><td>format(TemporalAccessor t)</td><td>格式化一个日期、时间，返回字符串</td></tr><tr><td>parse(CharSequence text)</td><td>将指定格式的字符序列解析为一个日期、时间</td></tr></tbody></table><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//重点：自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</span>DateTimeFormatter formatter3 <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//格式化</span>String str4 <span class="token operator">=</span> formatter3<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2019-12-18 11:08:46 没有偏移量</span><span class="token comment" spellcheck="true">//解析</span>TemporalAccessor accessor <span class="token operator">=</span> formatter3<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2019-12-18 11:08:46"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>accessor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// {SecondOfMinute=46, NanoOfSecond=0, MicroOfSecond=0, MinuteOfHour=8, MilliOfSecond=0,</span><span class="token comment" spellcheck="true">//  HourOfAmPm=11},ISO resolved to 2019-12-18</span></code></pre><h4 id="2-4-其它API"><a href="#2-4-其它API" class="headerlink" title="2.4 其它API"></a>2.4 其它API</h4><ul><li><p>ZoneId ：该类中包含了所有的时区信息，一个时区的ID，如 Europe/Paris</p></li><li><p>ZonedDateTime ：一个在ISO-8601日历系统时区的日期时间，如 2007-12-03T10 15 30+01 00 Europe/Paris。</p><ul><li>其中每个时区都对应着ID，地区ID都为“{区域}/{城市}”的格式，例如：Asia/Shanghai等</li></ul></li><li><p>Clock ：使用时区提供对当前即时、日期和时间的访问的时钟。</p></li><li><p>持续时间：Duration，用于计算两个“时间”间隔</p></li><li><p>日期间隔：Period，用于计算两个“日期”间隔</p></li><li><p>TemporalAdjuster : 时间校正器。有时我们可能需要获取例如：将日期调整到“下一个工作日”等操作。</p></li><li><p>TemporalAdjusters : 该类通过静态方法</p><p>(firstDayOfXxx()/lastDayOfXxx()/nextXxx())提供了大量的常用TemporalAdjuster 的实现</p></li></ul><h2 id="三-java比较器"><a href="#三-java比较器" class="headerlink" title="三.java比较器"></a>三.java比较器</h2><p>Java中的对象，正常情况下，只能进行比较：==  或  != 。不能使用 &gt; 或 &lt; 的</p><ul><li>但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。</li><li>如何实现？使用两个接口中的任何一个：Comparable 或 Comparator</li></ul><p>Java实现对象数组排序的方式有两种：</p><ul><li>自然排序：java.lang.Comparable (<strong>实现类的对象在任何位置都可以比较大小</strong>)</li><li>定制排序：java.util.Comparator (<strong>属于临时性的比较</strong>)</li></ul><h3 id="1-Comparable接口"><a href="#1-Comparable接口" class="headerlink" title="1.Comparable接口"></a>1.Comparable接口</h3><p>Comparable接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的<strong>自然排序</strong>。</p><p>1.像<strong>String、包装类</strong>等实现了Comparable接口，重写了<strong>compareTo(obj)方法</strong>，给出了比较两个对象大小的方式，进行<strong>从小到大</strong>的排列。</p><p>2.对于<strong>自定义类</strong>来说，如果需要排序，我们可以让自定义类<strong>实现Comparable接口</strong>，重写<strong>compareTo(obj)方法</strong>。在compareTo(obj)方法中<strong>指明如何排序</strong>。</p><p>3.实现Comparable接口的对象列表（和数组）可以通过 <code>Collections.sort</code> 或<code>Arrays.sort</code>进行自动排序。实现此接口的对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。</p><p>4.重写compareTo(obj)的规则：</p><ul><li>如果当前对象this大于形参对象obj，则返回正整数</li><li>如果当前对象this小于形参对象obj，则返回负整数</li><li>如果当前对象this等于形参对象obj，则返回零</li></ul><p>5.Comparable的典型实现：(默认都是从小到大排列)</p><ul><li>String：按照字符串中字符的Unicode值进行比较</li><li>Character：按照字符的Unicode值来进行比较</li><li>数值类型对应的包装类以及BigInteger、BigDecimal：按照它们对应的数值大小进行比较</li><li>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</li><li>Date、Time等：后面的日期时间比前面的日期时间大</li></ul><p>6.示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.String类已经实现了Comparable接口</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"CC"</span><span class="token punctuation">,</span><span class="token string">"KK"</span><span class="token punctuation">,</span><span class="token string">"MM"</span><span class="token punctuation">,</span><span class="token string">"GG"</span><span class="token punctuation">,</span><span class="token string">"JJ"</span><span class="token punctuation">,</span><span class="token string">"DD"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用Arrays工具类进行自动排序</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [AA, CC, DD, GG, JJ, KK, MM]</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ------------------------------------------------------------------</span><span class="token comment" spellcheck="true">// 2.自定义Goods类</span>Goods<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"lenovoMouse"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"dellMouse"</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"xiaomiMouse"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"huaweiMouse"</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"microsoftMouse"</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [Goods{name='xiaomiMouse', price=12.0},</span><span class="token comment" spellcheck="true">// Goods{name='lenovoMouse', price=34.0},</span><span class="token comment" spellcheck="true">// Goods{name='microsoftMouse', price=43.0},</span><span class="token comment" spellcheck="true">// Goods{name='dellMouse', price=43.0},</span><span class="token comment" spellcheck="true">// Goods{name='huaweiMouse', price=65.0}]</span><span class="token comment" spellcheck="true">// ------------------------------------------------------------------</span><span class="token comment" spellcheck="true">// 自定义Goods类，实现Comparable接口，重写compareTo()方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Goods</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//指明商品比较大小的方式:按照价格从低到高排序,再按照产品名称从高到低排序</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Goods g<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">==</span> g<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加符号则从高到低</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> Double<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">,</span>g<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-Comparator接口"><a href="#2-Comparator接口" class="headerlink" title="2.Comparator接口"></a>2.Comparator接口</h3><p>1.背景：当元素的类型<strong>没有实现java.lang.Comparable接口</strong>而又不方便修改代码，或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来排序。</p><p>2.<strong>重写compare(Object o1,Object o2)方法</strong>，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。</p><p>3.示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.String类数组</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"CC"</span><span class="token punctuation">,</span><span class="token string">"KK"</span><span class="token punctuation">,</span><span class="token string">"MM"</span><span class="token punctuation">,</span><span class="token string">"GG"</span><span class="token punctuation">,</span><span class="token string">"JJ"</span><span class="token punctuation">,</span><span class="token string">"DD"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 匿名对象</span>    <span class="token comment" spellcheck="true">//按照字符串从大到小的顺序排列</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span>s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// [MM, KK, JJ, GG, DD, CC, AA]</span><span class="token comment" spellcheck="true">// ------------------------------------------------------------------</span><span class="token comment" spellcheck="true">// 2.自定义类数组</span>Goods<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"lenovoMouse"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"dellMouse"</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"xiaomiMouse"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"huaweiMouse"</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"huaweiMouse"</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"microsoftMouse"</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Goods<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 匿名对象</span>    <span class="token comment" spellcheck="true">//指明商品比较大小的方式:按照产品名称从低到高排序,再按照价格从高到低排序</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Goods g1<span class="token punctuation">,</span> Goods g2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>g1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>g2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span>Double<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>g1<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g2<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> g1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>g2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [Goods{name='dellMouse', price=43.0},</span><span class="token comment" spellcheck="true">// Goods{name='huaweiMouse', price=224.0},</span><span class="token comment" spellcheck="true">// Goods{name='huaweiMouse', price=65.0},</span><span class="token comment" spellcheck="true">// Goods{name='lenovoMouse', price=34.0},</span><span class="token comment" spellcheck="true">// Goods{name='microsoftMouse', price=43.0},</span><span class="token comment" spellcheck="true">// Goods{name='xiaomiMouse', price=12.0}]</span><span class="token comment" spellcheck="true">// ------------------------------------------------------------------</span><span class="token comment" spellcheck="true">// 自定义Goods类，不实现Comparable接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Goods</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="四-System类"><a href="#四-System类" class="headerlink" title="四.System类"></a>四.System类</h2><p>System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。该类位于java.lang包。</p><p>由于该类的构造器是private的，所以无法创建该类的对象，也就是无法实例化该类。其<strong>内部的成员变量和成员方法都是static的</strong>。</p><p>成员变量：</p><table><thead><tr><th>成员变量</th><th>描述</th></tr></thead><tbody><tr><td>in</td><td>标准输入流(键盘输入)</td></tr><tr><td>out</td><td>标准输出流(显示器)</td></tr><tr><td>err</td><td>标准错误输出流(显示器)</td></tr></tbody></table><p>成员方法：</p><table><thead><tr><th>成员方法</th><th>描述</th></tr></thead><tbody><tr><td>native long currentTimeMillis()</td><td>返回当前的计算机时间(1970-01-01 00-00-00)</td></tr><tr><td>void exit(int status)</td><td>退出程序。其中status的值为0代表正常退出，非零代表</td></tr><tr><td>void gc()</td><td>请求系统进行垃圾回收(不一定是立刻回收)</td></tr><tr><td>String getProperty(String key)</td><td>获得系统中属性名为key的属性对应的值</td></tr></tbody></table><p>系统中常见的属性名以及属性的作用：</p><table><thead><tr><th>属性名</th><th>属性说明</th></tr></thead><tbody><tr><td>java.version</td><td>java运行时环境版本</td></tr><tr><td>java.home</td><td>java安装目录</td></tr><tr><td>os.name</td><td>操作系统的名称</td></tr><tr><td>os.version</td><td>操作系统的版本</td></tr><tr><td>user.name</td><td>用户的账户名称</td></tr><tr><td>user.home</td><td>用户的主目录</td></tr><tr><td>user.dir</td><td>用户的当前工作目录</td></tr></tbody></table><h2 id="五-Math类"><a href="#五-Math类" class="headerlink" title="五.Math类"></a>五.Math类</h2><p>java.lang.Math 提供了一系列静态方法用于科学计算。其方法的参数和返回值类型一般为double 型。</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>abs</td><td>绝对值</td></tr><tr><td>sqrt</td><td>平方根</td></tr><tr><td>pow(double a, double b)</td><td>a的b次幂</td></tr><tr><td>log</td><td>自然对象</td></tr><tr><td>exp</td><td>e为底指数</td></tr><tr><td>max(double a, double b) / min(double a, double b)</td><td>a和b的最大值/最小值</td></tr><tr><td>random()</td><td>返回[0.0, 1.0)的随机数</td></tr><tr><td>long round(double a)</td><td>double 型数据a转换为long型(四舍五入)</td></tr><tr><td>toDegrees(double angrad)</td><td>弧度—&gt; 角度</td></tr><tr><td>toRadians(double angdeg)</td><td>角度—&gt; 弧度</td></tr></tbody></table><h2 id="六-BigInteger与BigDecimal"><a href="#六-BigInteger与BigDecimal" class="headerlink" title="六.BigInteger与BigDecimal"></a>六.BigInteger与BigDecimal</h2><h3 id="1-BigInteger类"><a href="#1-BigInteger类" class="headerlink" title="1.BigInteger类"></a>1.BigInteger类</h3><p> java.math包的<strong>BigInteger 可以表示不可变的任意精度的整数</strong>。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。</p><p>构造方法：</p><ul><li><code>BigInteger(String val)</code>：根据字符串构建BigInteger对象</li></ul><p>常用方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>BigInteger add(BigInteger val)</td><td>返回其值为 (this + val) 的 BigInteger</td></tr><tr><td>BigInteger subtract(BigInteger val)</td><td>返回其值为 (this - val) 的 BigInteger</td></tr><tr><td>BigInteger multiply(BigInteger val)</td><td>返回其值为 (this * val) 的 BigInteger</td></tr><tr><td>BigInteger divide(BigInteger val)</td><td>返回其值为 (this / val) 的 BigInteger。整数相除只保留整数部分</td></tr><tr><td>BigInteger remainder(BigInteger val)</td><td>返回其值为 (this % val) 的 BigInteger</td></tr><tr><td>BigInteger[] divideAndRemainder(BigInteger val)</td><td>返回包含 (this / val) 后跟(this % val) 的两个 BigInteger 的数组</td></tr></tbody></table><h3 id="2-BigDecimal类"><a href="#2-BigDecimal类" class="headerlink" title="2.BigDecimal类"></a>2.BigDecimal类</h3><p> 一般的Float类和Double类可以用来做科学计算或工程计算，但在商业计算中，要求数字精度比较高，故用到java.math.BigDecimal 类 。BigDecimal对象是<strong>不可变</strong>的。</p><p><strong>BigDecimal类支持不可变的、任意精度的有符号十进制定点数。</strong></p><p><strong>常用构造方法：</strong></p><ul><li><code>public BigDecimal(double val)</code>：根据double构建BigDecimal对象(有精确度缺失)</li><li><code>public BigDecimal(String val)</code>：根据字符串构建BigDecimal对象(<strong>建议采用</strong>)</li></ul><p><strong>常用方法：</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public BigDecimal add(BigDecimal augend)</td><td>加</td></tr><tr><td>public BigDecimal subtract(BigDecimal subtrahend)</td><td>减</td></tr><tr><td>public BigDecimal multiply(BigDecimal multiplicand)</td><td>乘</td></tr><tr><td>public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</td><td>除</td></tr><tr><td>public String toString()</td><td>数值转换成字符串</td></tr><tr><td>public double doubleValue()</td><td>以双精度数返回</td></tr><tr><td>public BigDecimal setScale(int newScale, int roundingMode)</td><td>格式化小数点</td></tr></tbody></table><p><strong>注意</strong>：</p><ul><li><p><code>setScale(int newScale, int roundingMode)</code></p><p>由于BigDecimal对象是<strong>不可变</strong>的，所以此方法的调用不会导致原始对象被修改。 <code>setScale</code>返回具有适当比例的对象; 返回的<strong>对象可能会被新分配( 值发生改变)，也可能不会被新分配( 值没有发生改变:如13.16格式化2位小数)</strong>。</p></li><li><p><strong>BigDecimal(String val)构造是靠谱的</strong>，BigDecimal(“57.3”)就是妥妥的等于57.3，建议采用这种方式；</p><p>BigDecimal(double val)等构造不太靠谱，在精确度上有缺失。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">57.3f</span><span class="token punctuation">;</span>BigDecimal decimalA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimalA<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 57.299999237060546875</span><span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">57.3</span><span class="token punctuation">;</span>BigDecimal decimalB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimalB<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 57.2999999999999971578290569595992565155029296875</span><span class="token keyword">double</span> c <span class="token operator">=</span> <span class="token number">57.3</span><span class="token punctuation">;</span>BigDecimal decimalC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>Double<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimalC<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 57.3</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">57.3</span><span class="token punctuation">;</span>BigDecimal decimalD <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimalD<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 57.3</span></code></pre></li></ul><p><strong>示例</strong>：</p><pre class=" language-java"><code class="language-java">BigDecimal bd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"12435.351"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BigDecimal bd2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// System.out.println(bd.divide(bd2));  // 当不能整除时，必须给出小数位精确位，不然会报异常</span><span class="token comment" spellcheck="true">// ROUND_HALF_UP：表示四舍五入模式</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bd<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>bd2<span class="token punctuation">,</span> BigDecimal<span class="token punctuation">.</span>ROUND_HALF_UP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1130.486</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bd<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>bd2<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> BigDecimal<span class="token punctuation">.</span>ROUND_HALF_UP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1130.486454545455</span><span class="token comment" spellcheck="true">// 四舍五入</span>BigDecimal b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"111231.5585"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用setScale方法格式化小数点</span><span class="token keyword">double</span> result <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> BigDecimal<span class="token punctuation">.</span>ROUND_HALF_UP<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//111231.56</span><span class="token comment" spellcheck="true">// 保留两位小数</span><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token number">13.154256</span><span class="token comment" spellcheck="true">//方式一</span>DecimalFormat df1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"0.00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String str <span class="token operator">=</span> df1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//13.15</span><span class="token comment" spellcheck="true">//方式二</span><span class="token comment" spellcheck="true">// #.00 表示两位小数 #.0000四位小数</span>DecimalFormat df2 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"#.00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String str2 <span class="token operator">=</span>df2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//13.15</span><span class="token comment" spellcheck="true">//方式三</span><span class="token comment" spellcheck="true">//%.2f %.：表示小数点前任意位数；   2：表示两位小数格式后的结果    f：表示浮点型</span>String result <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//13.15</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础之异常处理</title>
      <link href="/2019/10/10/exception/"/>
      <url>/2019/10/10/exception/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><ul><li><span style="color:red;">世界上最遥远的距离，是我在if 里你在else里，似乎一直相伴又永远分离；</span></li><li><span style="color:red;">世界上最痴心的等待，是我当case你是switch，或许永远都选不上自己；</span></li><li><span style="color:red;">世界上最真情的相依，是你在try我在catch，无论你发神马脾气，我都默默承受，静静处理。到那时，再来期待我们的finally。</span></li></ul><p>哈哈，开心一笑也笑了，异常体系更完java基础板块就正式结束啦，下面是正文。</p><h3 id="一-异常概述与异常体系结构"><a href="#一-异常概述与异常体系结构" class="headerlink" title="一.异常概述与异常体系结构"></a>一.异常概述与异常体系结构</h3><p>异常：在Java语言中，将程序执行中发生的不正常情况称为“异常”。(开发过程中的语法错误和逻辑错误不是异常)。<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191213184826621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>Java把异常当作对象来处理，并定义一个基类<code>java.lang.Throwable</code>作为所有异常的超类，有<code>两个子类Error和Exception</code>，分别表示错误和异常。</p><p>Java程序在执行过程中所发生的异常事件可分为两类：</p><ul><li><strong>Error</strong>：<strong>Java虚拟机无法解决的严重问题</strong>。如：JVM系统内部错误、资源耗尽等严重情况。比如：<strong>StackOverflowError</strong>(堆栈溢出)和OOM(<strong>OutOfMemoryError</strong>内存用完)。一般不编写针对性的代码进行处理。</li><li><strong>Exception</strong>：其它因<strong>编程错误或偶然的外在因素</strong>导致的一般性问题，可以使用针对性的代码进行处理。例如：空指针异常、数组角标越界。</li></ul><p>java中的Exception类的子类不仅仅只是像上图所示只包含IOException和RuntimeException这两大类，Exception的子类很多很多，主要可概括为<code>运行时异常(RuntimeException)</code>和<code>非运行时异常</code>，也称为<code>不检查异常(Unchecked Exception)</code>和<code>检查异常(Checked Exception)</code>。</p><ul><li><strong>运行时异常</strong>：都是RuntimeException类及其子类异常，如<code>NullPointerException、IndexOutOfBoundsException</code>等， 这些异常是<strong>不检查异常</strong>，程序中<strong>可以选择捕获处理，也可以不处理</strong>。这些异常一般是由<strong>程序逻辑错误</strong>引起的，程序应该从逻辑角度尽可能避免这类异常的发生。</li><li><strong>非运行时异常</strong>：是RuntimeException以外的异常，<strong>编译期间可以检查到的异常</strong>，类型上都属于Exception类及其子类。从程序语法角度讲是<strong>必须进行处理的异常，如果不处理，程序就不能编译通过</strong>。 如<code>IOException、SQLException</code>等以及用户自定义的Exception异常，一般情况下不自定义检查异常。</li></ul><h3 id="二-try-catch-finally"><a href="#二-try-catch-finally" class="headerlink" title="二.try-catch-finally"></a>二.try-catch-finally</h3><p>Java提供的是异常处理的<strong>抓抛模型</strong>。</p><p>Java程序的执行过程中如出现异常，会生成一个<strong>异常类对象</strong>，该异常对象将被提交给Java运行时系统，这个过程称为<strong>抛出(throw)异常</strong>。</p><h4 id="1-异常对象的生成"><a href="#1-异常对象的生成" class="headerlink" title="1.异常对象的生成"></a>1.异常对象的生成</h4><p><strong>由虚拟机自动生成</strong>：程序运行过程中，虚拟机检测到程序发生了问题，如果在当前代码中没有找到相应的处理程序，就会在后台自动创建一个对应异常类的实例对象并抛出——自动抛出</p><p><strong>由开发人员手动创建</strong>：Exception exception = new ClassCastException();——创建好的异常对象不抛出对程序没有任何影响，和创建一个普通对象一样</p><h4 id="2-异常抛出机制"><a href="#2-异常抛出机制" class="headerlink" title="2.异常抛出机制"></a>2.异常抛出机制</h4><p>若执行try块的过程中没有发生异常，则跳过catch子句。若是出现异常，try块中剩余语句不再执行。开始逐步检查catch块，判断catch块的异常类实例是否是捕获的异常类型。匹配后执行相应的catch块中的代码。</p><p>如果异常没有在当前的方法中被捕获，就会被<strong>传递给该方法的调用者</strong>。如果异常没有在调用者方法中处理，它继续被抛给这个<strong>调用方法的上层方法</strong>。这个过程一直重复，直到异常被捕获或被传给main方法（交给JVM来捕获），这一过程称为<strong>捕获(catch)异常</strong>。</p><p>如果一个异常<strong>回到main()方法，并且main()也不处理，则程序运行终止</strong>。</p><p>程序员通常只能处理Exception，而对Error无能为力。</p><h4 id="3-异常处理机制"><a href="#3-异常处理机制" class="headerlink" title="3.异常处理机制"></a>3.异常处理机制</h4><p>异常处理是通过try-catch-finally语句实现的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">//可能产生异常的代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span> ExceptionName1 e <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">//当产生ExceptionName1型异常时的处置措施</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span> ExceptionName2 e <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">//当产生ExceptionName2型异常时的处置措施</span><span class="token punctuation">}</span><span class="token punctuation">[</span> <span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">//无论是否发生异常， 都无条件执行的语句</span><span class="token punctuation">}</span> <span class="token punctuation">]</span></code></pre><ul><li><p><strong>try</strong></p><p>捕获异常的第一步是用try{…}语句块选定捕获异常的范围，将可能出现异常的代码放在try语句块中。</p></li><li><p><strong>catch( Exception e)</strong></p><p>在catch语句块中是对<strong>异常对象</strong>进行处理的代码。每个try语句块可以伴随一个或<strong>多个catch</strong>语句。对于try里面发生的异常，他会根据发生的异常和catch里面的进行匹配(按照catch块从上往下匹配)，<strong>如果有匹配的catch，它就会忽略掉这个catch后面所有的catch。</strong></p><p>在catch中可以捕获异常的有关信息：</p><ul><li>e.getMessage()：获取异常信息，返回字符串</li><li>e.printStackTrace()：获取异常类名和异常信息及异常出现在程序中的位置。返回值void</li></ul></li><li><p><strong>finally</strong></p><p>不论在try代码块中是否发生了异常事件，catch语句是否执行，catch语句是否有异常，catch语句中是否有return，finally块中的语句都会被执行；</p><p><strong>finally中的return、throw会覆盖try、catch中的return、throw；</strong></p><p>finally语句和catch语句是任选的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> a <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方法返回值：-2</span></code></pre><p>当执行代码<code>a = a / 0;</code>时发生异常，try块中它之后的代码便不再执行，而是直接执行catch中代码；在catch块中，当在执行<code>return -1</code>前，先会执行finally块；由于finally块中有return语句，因此catch中的return将会被覆盖，直接执行fianlly中的<code>return -2</code>后程序结束。因此输出结果是-2。</p></li><li><p><strong>注意</strong></p><ul><li>try、catch、finally三个语句块均<strong>不能单独使用</strong>，三者可以组成 try…catch…finally、try…catch、try…finally三种结构，catch语句可以有一个或多个，finally语句最多一个</li><li>try、catch、finally三个代码块中<strong>变量的作用域为代码块内部</strong>，分别独立而不能相互访问。如果要在三个块中都可以访问，则需要将变量定义到这些块的外面</li><li>多个catch块时候，最多<strong>只会匹配其中一个异常类且只会执行该catch块代码</strong>，而不会再执行其它的catch块，且匹配catch语句的顺序为从上到下，也可能所有的catch都没执行</li><li><strong>先Catch子类异常再Catch父类异常</strong></li></ul></li></ul><h3 id="三-throws"><a href="#三-throws" class="headerlink" title="三.throws"></a>三.throws</h3><p>throws关键字用于方法体外部的<strong>方法声明部分</strong>，用来声明方法可能会抛出<strong>某些异常类型，也可以是它的父类</strong>。仅当抛出了检查异常，该方法的调用者才必须处理或者重新抛出该异常。当方法的调用者无力处理该异常的时候，应该继续抛出。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThrowsTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThrowsTest t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThrowsTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileInputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>重写方法不能抛出比被重写方法范围更大的异常类型 (&lt;=)</strong>。在多态的情况下，对methodA()方法的调用-异常的捕获按父类声明的异常处理。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    ……    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B1</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>    ……    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B2</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 报错</span>    ……    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3 id="四-throw"><a href="#四-throw" class="headerlink" title="四.throw"></a>四.throw</h3><p>throw关键字是用于<strong>方法体内部</strong>，用来抛出一个Throwable类型或其子类的异常。</p><p>如果抛出了检查异常，则还应该<strong>在方法头部声明</strong>方法可能抛出的异常类型。该方法的调用者也必须检查处理抛出的异常。如果所有方法都层层上抛获取的异常，最终JVM会进行处理，处理也很简单，就是打印异常消息和堆栈信息。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception  <span class="token punctuation">{</span>     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"方法test中的Exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </code></pre><h4 id="throw和throws关键字的区别"><a href="#throw和throws关键字的区别" class="headerlink" title="throw和throws关键字的区别"></a>throw和throws关键字的区别</h4><ul><li>写法上 : throw 在<strong>方法体</strong>内使用，throws <strong>函数名后或者参数列表后</strong>方法体前 </li><li>意义 ： throw 强调<strong>动作</strong>，而throws 表示<strong>一种倾向、可能但不一定实际发生</strong> </li><li>throws 后面跟的是<strong>异常类</strong>，可以一个，可以多个，多个用逗号隔开。throw 后跟的是<strong>异常对象</strong>，或者异常对象的引用。 </li><li><strong>throws</strong> 用户抛出异常，在当前方法中抛出异常后，<strong>当前方法执行结束</strong>（throws 后，如果有finally语句的话，会执行到finally语句后再结束。）。可以理解成return一样</li></ul><h3 id="五-自定义异常类"><a href="#五-自定义异常类" class="headerlink" title="五.自定义异常类"></a>五.自定义异常类</h3><p> 一般地，用户自定义异常类都是RuntimeException的子类。</p><ul><li>自定义异常类通常需要编写几个重载的构造器。</li><li>自定义异常需要提供serialVersionUID</li><li>自定义的异常通过throw抛出。</li><li>自定义异常最重要的是异常类的名字，当异常出现时，可以根据名字判断异常类型。</li></ul><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.定义异常类</span><span class="token keyword">class</span>  自定义异常类 <span class="token keyword">extends</span> 异常类型<span class="token punctuation">(</span>Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2.重载构造方法</span>    <span class="token comment" spellcheck="true">// 3.将异常信息传递给父类：super(...)</span><span class="token punctuation">}</span></code></pre><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 备注： 这些方法怎么来的？ 重写父类Exception的方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 13465653435L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无参构造方法</span>    <span class="token keyword">public</span> <span class="token function">CustomException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有参的构造方法</span>    <span class="token keyword">public</span> <span class="token function">CustomException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 用指定的详细信息和原因构造一个新的异常</span>    <span class="token keyword">public</span> <span class="token function">CustomException</span><span class="token punctuation">(</span>String message<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//用指定原因构造一个新的异常</span>     <span class="token keyword">public</span> <span class="token function">CustomException</span><span class="token punctuation">(</span>Throwable cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="总结-异常处理的5个关键字"><a href="#总结-异常处理的5个关键字" class="headerlink" title="总结: 异常处理的5个关键字"></a>总结: 异常处理的5个关键字</h3><p><strong>捕获异常：</strong></p><ul><li>try：执行可能产生异常的代码</li><li>catch：捕获异常</li><li>finally：无论是否发生异常，代码总被执行</li></ul><p><strong>抛出异常：</strong></p><ul><li>throw：异常的生成阶段：手动抛出异常对象</li></ul><p><strong>声明异常：</strong></p><ul><li>throws：异常的处理方式：声明方法可能要抛出的各种异常类</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础之面向对象</title>
      <link href="/2019/10/08/object/"/>
      <url>/2019/10/08/object/</url>
      
        <content type="html"><![CDATA[<h3 id="一-面向对象"><a href="#一-面向对象" class="headerlink" title="一.面向对象"></a>一.面向对象</h3><h4 id="1-面向过程与面向对象"><a href="#1-面向过程与面向对象" class="headerlink" title="1.面向过程与面向对象"></a>1.面向过程与面向对象</h4><p>POP与OOP都是一种思想，面向对象是相对于面向过程而言的。面向过程，强调的是<code>功能行为，以函数为最小单位，考虑怎么做</code>。面向对象，将功能封装进对象，强调<code>具备了功能的对象，以类/对象为最小单位，考虑谁来做</code>。</p><p>程序员从面向过程的<strong>执行者</strong>转化成了面向对象的<strong>指挥者。</strong></p><p>面向对象分析问题的思路和步骤：</p><ul><li>选择问题所针对的<strong>现实世界中的实体</strong></li><li>从实体中寻找解决问题相关的<strong>属性和功能</strong></li><li>把抽象的实体用计算机语言进行描述，形成计算机世界中<strong>类的定义</strong></li><li>将<strong>类实例化成计算机世界中的对象</strong></li></ul><h4 id="2-类与对象"><a href="#2-类与对象" class="headerlink" title="2.类与对象"></a>2.类与对象</h4><ul><li><p>类(Class)和对象(Object)是面向对象的核心概念</p><ul><li>类是对一类事物的描述，是<strong>抽象的、概念上的定义</strong></li><li>对象是<strong>实际存在的该类事物的每个个体</strong>，因而也称为实例(instance)</li></ul></li><li><p>常见类的成员</p><ul><li>属性：对应类中的成员变量(考虑修饰符、属性类型、属性名、初始化值)</li><li>行为：对应类中的成员方法(考虑修饰符、返回值类型、方法名、形参)</li></ul></li><li><p>类的语法格式</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*修饰符 class 类名 {    属性声明;    方法声明;}说明：修饰符public：类可以被任意访问；类的正文要用{ }括起来*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 属性声明</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法声明</span>        age <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="3-对象的创建和使用"><a href="#3-对象的创建和使用" class="headerlink" title="3.对象的创建和使用"></a>3.对象的创建和使用</h4><p>创建对象语法：<code>类名 对象名 = new 类名();</code>使用<code>对象名.对象成员</code>的方式访问对象成员(包括属性和方法)。</p><p>如果创建了一个类的多个对象，对于类中定义的属性，<strong>每个对象都拥有各自的一套副本，且互不干扰</strong>。</p><p>匿名对象：不定义对象的句柄，而直接调用这个对象的方法。这样的对象叫做匿名对象。例：<code>new Person().show();</code>；经常将<strong>匿名对象作为实参传递给一个方法调用</strong>。</p><ol><li>类的访问机制：<ul><li>在一个类中的访问机制：类中的方法可以直接访问类中的成员变量(static方法访问非static，编译不通过)</li><li>在不同类中的访问机制：先创建要访问类的对象 ， 再用对象访问类中定义的成员</li></ul></li></ol><ol start="2"><li><p>对象的生命周期：</p><ul><li><strong>当对象失去所有的引用</strong>（没有变量再指向它了（没有变量在存储它的地址）- 相当于失联了，我们无法再使用它了）– 就是死亡了;（垃圾回收器 并不是立刻进行回收）<br> <code>Person p1 = new Person();    // person对象被p1引用</code></li><li><code>Person p2 =  p1;    // 将p2指向p1所引用的对象</code></li><li><code>p1 = null;    // p1为null，但p2还是引用了person对象，person对象不会被回收</code></li></ul></li><li><p>内存解析：</p><ul><li><code>堆（Heap）</code>：<strong>存放对象实例</strong>，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是：<strong>所有的对象实例以及数组都要在堆上分配</strong>。</li><li><code>栈（Stack）</code>：<strong>存放局部变量</strong>，局部变量表存放了各种基本数据类型、对象引用(对象在堆内存放的首地址)。<strong>方法执行完，自动释放</strong>。</li><li><code>方法区（Method Area）</code>：存放已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</li></ul></li></ol><h3 id="二-类的成员"><a href="#二-类的成员" class="headerlink" title="二.类的成员"></a>二.类的成员</h3><h4 id="1-属性"><a href="#1-属性" class="headerlink" title="1.属性"></a>1.属性</h4><h5 id="1-语法格式："><a href="#1-语法格式：" class="headerlink" title="1.语法格式："></a>1.语法格式：</h5><p><code>修饰符 数据类型 属性名 = 初始化值；</code></p><ul><li>常见的权限修饰符有：private、缺省、protected、public。其他：static、final</li><li>数据类型：基本数据类型、引用数据类型</li><li>属性名：属于标识符，满足命名规则和规范</li></ul><h5 id="2-分类："><a href="#2-分类：" class="headerlink" title="2.分类："></a>2.分类：</h5><ul><li>成员变量：方法体外，类体内声明的变量<ul><li>实例变量（不以static修饰）</li><li>类变量（以static修饰）</li></ul></li><li>局部变量：方法体内部声明的变量<ul><li>形参（方法、构造器中定义的变量）</li><li>方法局部变量（方法内定义）</li><li>代码块局部变量（代码块内定义）</li></ul></li><li>相同：都有生命周期； 异：局部变量除形参外，均需显式初始化</li></ul><table><thead><tr><th></th><th>成员变量</th><th>局部变量</th></tr></thead><tbody><tr><td>声明的位置</td><td>声明在类中</td><td>方法形参或内部、代码块内、构造器内等</td></tr><tr><td>修饰符</td><td>private、public、static、final等</td><td>不能用权限修饰符修饰，可以用final修饰</td></tr><tr><td>初始化值</td><td>有默认初始化值</td><td>没有默认初始化值，必须显式赋值，方可使用</td></tr><tr><td>内存加载位置</td><td>堆空间 或 静态域内</td><td>栈空间</td></tr></tbody></table><h5 id="3-对象属性的默认初始化赋值："><a href="#3-对象属性的默认初始化赋值：" class="headerlink" title="3.对象属性的默认初始化赋值："></a>3.对象属性的默认初始化赋值：</h5><p>当一个对象被创建时，会对其中各种类型的成员变量自动进行初始化赋值。</p><table><thead><tr><th>成员变量类型</th><th>初始值</th></tr></thead><tbody><tr><td>byte</td><td>0</td></tr><tr><td>short</td><td>0</td></tr><tr><td>int</td><td>0</td></tr><tr><td>long</td><td>0L</td></tr><tr><td>float</td><td>0.0F</td></tr><tr><td>double</td><td>0.0</td></tr><tr><td>char</td><td>0 或写为：’\u0000’(表现为空)</td></tr><tr><td>boolean</td><td>false</td></tr><tr><td>引用类型</td><td>null</td></tr></tbody></table><h4 id="2-方法"><a href="#2-方法" class="headerlink" title="2.方法"></a>2.方法</h4><h5 id="1-概念："><a href="#1-概念：" class="headerlink" title="1.概念："></a>1.概念：</h5><p>方法是类或对象行为特征的抽象，用来完成某个功能操作；将功能封装为方法的目的是，可以实现代码重用，简化代码；Java里的方法不能独立存在，所有的方法必须定义在类里。</p><h5 id="2-格式："><a href="#2-格式：" class="headerlink" title="2.格式："></a>2.格式：</h5><pre class=" language-java"><code class="language-java">修饰符 返回值类型 方法名 <span class="token punctuation">(</span>参数类型 形参<span class="token number">1</span>，参数类型 形参<span class="token number">2</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    方法体程序代码；    <span class="token keyword">return</span> 返回值；<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 修饰符：public, 缺省,private, protected 等</span><span class="token comment" spellcheck="true">// 返回值类型：</span><span class="token comment" spellcheck="true">//        没有返回值：void</span><span class="token comment" spellcheck="true">//       有返回值：与方法体中"return 返回值"搭配使用</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 为x,y分配内存并传值</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 方法执行完后, x,y被释放</span></code></pre><h5 id="3-注意："><a href="#3-注意：" class="headerlink" title="3.注意："></a>3.注意：</h5><ul><li>方法通过方法名被调用，且只有被调用才会执行，方法被调用一次，就会执行一次。</li><li>没有具体返回值的情况，返回值类型用关键字void表示，那么方法体中可以不必使用return语句。如果使用，仅用来结束方法。</li><li>方法中只能调用方法或属性，不可以在方法内部定义方法</li></ul><h5 id="4-个数可变的形参："><a href="#4-个数可变的形参：" class="headerlink" title="4.个数可变的形参："></a>4.个数可变的形参：</h5><p>JavaSE 5.0 中提供了Varargs(variable number of arguments)机制，允许直接定义能和多个实参相匹配的形参。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//JDK 5.0以前：采用数组形参来定义方法，传入多个同一类型变量</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> books<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JDK5.0：采用可变个数形参来定义方法，传入多个同一类型变量</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span>String…books<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>说明：</p><ul><li>声明格式：<code>方法名(参数的类型名 ...参数名)</code></li><li>可变参数：方法参数部分指定类型的参数个数是可变多个：<strong>0个，1个或多个</strong></li><li>可变个数形参的方法与同名的方法之间，彼此构成重载</li><li>可变参数方法的使用与方法参数部分使用数组是一致的</li><li>方法的参数部分有可变形参，需要<strong>放在形参声明的最后</strong></li><li>在一个方法的形参位置，最多<strong>只能声明一个可变个数形参</strong></li></ul><h5 id="5-方法参数的值传递机制-重要-："><a href="#5-方法参数的值传递机制-重要-：" class="headerlink" title="5.方法参数的值传递机制(重要)："></a>5.方法参数的值传递机制(重要)：</h5><p>Java里方法的参数传递方式只有一种：<strong>值传递</strong>。 即将实际参数值的副本（复制品）传入方法内，而参数本身不受影响。</p><ul><li>形参是<strong>基本数据类型</strong>：将实参基本数据类型变量的“<strong>数据值</strong>”传递给形参</li><li>形参是<strong>引用数据类型</strong>：将实参引用数据类型变量的“<strong>地址值</strong>”传递给形参</li></ul><p>基本数据类型的参数传递：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 基本数据类型传递数据值</span><span class="token comment" spellcheck="true">// main方法与change方法中x变量不是同一个地址</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 地址如：0x1122 --> 5</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改之前x = "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 5</span>    <span class="token comment" spellcheck="true">// x是实参</span>    <span class="token function">change</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0x1122 --> 5</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改之后x = "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 5</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 地址如：0x3344 --> 5</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"change:修改之前x = "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 5</span>    x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0x3344 --> 3</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"change:修改之后x = "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3</span><span class="token punctuation">}</span></code></pre><p>引用数据类型的参数传递：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 引用数据类型传递引用值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0x1122</span>    obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0x1122  age->5</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改之前age = "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 5</span>    <span class="token comment" spellcheck="true">// 操作同一个引用</span>    <span class="token function">change</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0x1122  age->3</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改之后age = "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3</span>    <span class="token comment" spellcheck="true">// 操作不同的引用</span>    <span class="token function">change2</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0x1122  age->5</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改之后age = "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 5</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// change 操作同一引用</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span>Person obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 0x1122</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"change:修改之前age = "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 0x1122  age->5</span>    obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0x1122  age->3</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"change:修改之后age = "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0x1122  age->3</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// change2 操作不同的引用</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change2</span><span class="token punctuation">(</span>Person obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 0x1122</span>    obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0x3344</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"change:修改之前age = "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0</span>    obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0x3344  age->3</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"change:修改之后age = "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3</span><span class="token punctuation">}</span></code></pre><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//传递数据值，操作不同的地址</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sysout</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//m=10,n=20</span><span class="token punctuation">}</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token punctuation">,</span>in n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> m<span class="token punctuation">;</span>    m <span class="token operator">=</span> n<span class="token punctuation">;</span>    n <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token function">sysout</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//m=20,n=10</span><span class="token punctuation">}</span></code></pre><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191210195320488.png" alt="在这里插入图片描述"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 传递引用值，操作同一地址</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Data data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sysout</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>m<span class="token punctuation">,</span>data<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//m=20,n=10</span><span class="token punctuation">}</span><span class="token function">swap</span><span class="token punctuation">(</span>Data data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> data<span class="token punctuation">.</span>m<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//temp=10</span>    data<span class="token punctuation">.</span>m <span class="token operator">=</span> data<span class="token punctuation">.</span>n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//m=20</span>    data<span class="token punctuation">.</span>n <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//n=10</span><span class="token punctuation">}</span></code></pre><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191210195348321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="6-递归方法："><a href="#6-递归方法：" class="headerlink" title="6.递归方法："></a>6.递归方法：</h5><p><strong>递归方法：一个方法体内调用它自身</strong>。</p><p>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。</p><p>递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。</p><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 计算1-100所有自然数的和</span><span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// num=100</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-构造器"><a href="#3-构造器" class="headerlink" title="3.构造器"></a>3.构造器</h4><h5 id="1-特征"><a href="#1-特征" class="headerlink" title="1.特征"></a>1.特征</h5><ul><li>与类相同的名称</li><li>不声明返回值类型(与声明为void不同)</li><li>不能被static、final、synchronized、abstract、native修饰</li><li>不能有return语句返回值</li></ul><h5 id="2-作用"><a href="#2-作用" class="headerlink" title="2.作用"></a>2.作用</h5><ul><li>创建对象</li><li>给对象进行初始化</li></ul><h5 id="3-语法格式"><a href="#3-语法格式" class="headerlink" title="3.语法格式"></a>3.语法格式</h5><pre class=" language-java"><code class="language-java">修饰符 类名 <span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    初始化语句<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 示例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> legs<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 封装属性</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 构造器</span>        legs <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="4-分类"><a href="#4-分类" class="headerlink" title="4.分类"></a>4.分类</h5><ul><li>隐式无参构造器(系统默认提供)</li><li>显式定义一个或多个构造器(无参、有参)</li></ul><p>注意：</p><ul><li><strong>每个类至少有一个构造器</strong>(系统默认提供的无参构造器)</li><li><strong>默认构造器的修饰符与所属类的修饰符一致</strong></li><li><strong>一旦显式定义了构造器，则系统不再提供默认构造器</strong></li><li><strong>一个类可以创建多个重载的构造器</strong></li><li><strong>父类的构造器不可被子类继承</strong></li></ul><h5 id="5-构造器重载"><a href="#5-构造器重载" class="headerlink" title="5.构造器重载"></a>5.构造器重载</h5><p>构造器一般用来创建对象的同时初始化对象。</p><p>构造器重载使得对象的创建更加灵活，方便创建各种不同的对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 一旦显式定义了构造器，则系统不再提供默认构造器</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> Date d<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>…<span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Date d<span class="token punctuation">)</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//若需要无参的构造器，需显式定义</span><span class="token punctuation">}</span></code></pre><h4 id="4-代码块"><a href="#4-代码块" class="headerlink" title="4.代码块"></a>4.代码块</h4><p>作用：对java类或对象进行初始化</p><p>代码块只能被static修饰，static修饰的称为静态代码块，没有使用static修饰的，为非静态代码块。</p><h5 id="1-静态代码块："><a href="#1-静态代码块：" class="headerlink" title="1.静态代码块："></a>1.静态代码块：</h5><ul><li>可以有输出语句，不可以调用非static属性和方法</li><li>若有多个静态代码块，按照从上到下的顺序依次执行</li><li>静态代码块的执行要优先于非静态代码块</li><li><strong>静态代码块随着类的加载而加载，且只执行一次</strong></li></ul><h5 id="2-非静态代码块："><a href="#2-非静态代码块：" class="headerlink" title="2.非静态代码块："></a>2.非静态代码块：</h5><ul><li>可以有输出语句，静态和非静态都可以调用</li><li>若有多个非静态代码块，按照从上到下的顺序执行</li><li><strong>每次创建对象的时候，都会执行一次。且优先于构造器执行</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> total<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        total <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"in static block!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total = "</span> <span class="token operator">+</span> Person<span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total = "</span> <span class="token operator">+</span> Person<span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// in static block</span><span class="token comment" spellcheck="true">// total=100</span><span class="token comment" spellcheck="true">// total=100</span></code></pre><h4 id="5-内部类"><a href="#5-内部类" class="headerlink" title="5.内部类"></a>5.内部类</h4><p>在Java中，允许一个类的定义位于另一个类的内部，前者称为<strong>内部类</strong>，后者称为<strong>外部类</strong>。</p><p>Inner class一般用在定义它的类或语句块之内，在外部引用它时必须给出<strong>完整的名称</strong>。Inner class的名字不能与包含它的外部类类名相同。</p><h5 id="1-成员内部类-static成员内部类和非static成员内部类"><a href="#1-成员内部类-static成员内部类和非static成员内部类" class="headerlink" title="1.成员内部类 (static成员内部类和非static成员内部类)"></a>1.成员内部类 (static成员内部类和非static成员内部类)</h5><p>内部类可以声明为private、protected；也可以声明为static、abstract、final的；</p><p>可以在内部定义属性、方法、构造器等结构</p><p>注意：</p><ul><li>非static的成员内部类中的成员不能声明为static的</li><li>外部类访问成员内部类的成员，需要“内部类.成员”或“内部类对象.成员”的方式</li><li>成员内部类可以直接使用外部类的所有成员，包括私有的数据</li><li>当想要在外部类的静态成员部分使用内部类时，可以考虑内部类声明为静态的</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mb</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 局部变量s</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 内部类对象的属性s</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Outer<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 外部类对象属性s</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Outer a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Outer<span class="token punctuation">.</span>Inner b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">mb</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-局部内部类-不谈修饰符"><a href="#2-局部内部类-不谈修饰符" class="headerlink" title="2.局部内部类 (不谈修饰符)"></a>2.局部内部类 (不谈修饰符)</h5><p>声明：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> 外部类<span class="token punctuation">{</span>    方法<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法</span>        <span class="token keyword">class</span> 局部内部类<span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 代码块</span>        <span class="token keyword">class</span> 局部内部类<span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>特点：</p><ul><li>只能在声明它的方法或代码块中使用，而且是先声明后使用。除此之外的任何地方都不能使用该类。</li><li>局部内部类可以使用外部类的成员，包括私有的。</li><li><strong>局部内部类可以使用外部方法的局部变量，但是必须是final的</strong>。由局部内部类和局部变量的声明周期不同所致。</li><li>局部内部类不能使用static修饰，因此也不能包含静态成员</li></ul><h5 id="3-匿名内部类"><a href="#3-匿名内部类" class="headerlink" title="3.匿名内部类"></a>3.匿名内部类</h5><p>匿名内部类不能定义任何静态成员、方法和类，只能创建匿名内部类的一个实例。一个匿名内部类一定是在new的后面，用其隐含实现一个接口或实现一个类。</p><p>格式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> 父类构造器<span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span> <span class="token operator">|</span> 实现接口<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 匿名内部类的类体部分</span><span class="token punctuation">}</span></code></pre><p>特点：</p><ul><li>匿名内部类必须<strong>继承父类或实现接口</strong></li><li>匿名内部类<strong>只能有一个对象</strong></li><li>匿名内部类对象只能使用<strong>多态形式引用</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">callInner</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//接口是不能new但此处比较特殊是子类对象实现接口，只不过没有为对象取名</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“implement <span class="token keyword">for</span> fun1"<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 两步写成一步了</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callInner</span><span class="token punctuation">(</span>A a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三-OOP特征"><a href="#三-OOP特征" class="headerlink" title="三.OOP特征"></a>三.OOP特征</h3><h4 id="1-封装与隐藏"><a href="#1-封装与隐藏" class="headerlink" title="1.封装与隐藏"></a>1.封装与隐藏</h4><p>程序设计追求“高内聚，低耦合”。<br><strong>高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉；</strong><br><strong>低耦合 ：仅对外暴露少量的方法用于使用。</strong></p><p><strong>隐藏对象内部的复杂性，只对外公开简单的接口</strong>。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</p><p>使用者对类内部定义的属性( 对象的成员变量) 的直接操作会导致数据的错误、混乱或 安全性 问题。</p><p>Java中通过将数据声明为私有的(private)，再提供公共的（public）方法:getXxx() 和setXxx()实现对该属性的操作，以实现下述目的：<strong>使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑，限制对属性的不合理操作</strong>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> legs<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将属性legs定义为private，只能被Animal类内部访问</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLegs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 在这里定义方法 eat() 和 move()</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Wrong number of legs!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        legs <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLegs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> legs<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Zoo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Animal xb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xb<span class="token punctuation">.</span><span class="token function">setLegs</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// xb.setLegs(-1000);</span>        <span class="token comment" spellcheck="true">//xb.legs = -1000; // 非法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>xb<span class="token punctuation">.</span><span class="token function">getLegs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-继承性"><a href="#2-继承性" class="headerlink" title="2.继承性"></a>2.继承性</h4><h5 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h5><p>多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。</p><p>此处的<strong>多个类称为子类( 派生类)，单独的这个类称为父类(基类或超类)</strong>。可以理解为:“子类 is a 父类”。</p><p>类继承语法规则：<code>class Subclass extends SuperClass{}</code></p><h5 id="2-作用-1"><a href="#2-作用-1" class="headerlink" title="2.作用"></a>2.作用</h5><p>减少了代码冗余，提高了代码的复用性；</p><p>有利于功能的扩展；</p><p>让类与类之间产生了关系，提供了多态的前提。</p><h5 id="3-理解"><a href="#3-理解" class="headerlink" title="3.理解"></a>3.理解</h5><ul><li><p>子类继承了父类，继承了父类的属性和方法，可以使用父类中定义的方法和属性，也可以创建新的数据和方法</p></li><li><p>继承的关键字用的是”extends”，子类不是父类的子集，而是对父类的”扩展”</p></li><li><p><strong>子类不能直接访问父类中私有的(private)的成员变量和方法</strong>，可以通过setter、getter和暴露接口来访问</p></li><li><p><strong>java只支持单继承和多层继承(传递性)，不允许多重继承</strong>。一个子类只能有一个父类，一个父类可以派生出多个子类</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">SubDemo</span> <span class="token keyword">extends</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ok</span> <span class="token keyword">class</span> <span class="token class-name">SubDemo</span> <span class="token keyword">extends</span> <span class="token class-name">Demo1</span><span class="token punctuation">,</span>Demo2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// error</span></code></pre></li></ul><h4 id="3-多态性"><a href="#3-多态性" class="headerlink" title="3.多态性"></a>3.多态性</h4><h5 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h5><p>对象的多态性：父类的引用指向子类的对象  –&gt;  可以直接应用在抽象类和接口上</p><p>java引用遍历有两个类型：编译时类型和运行时类型。<strong>编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋给该变量的对象决定</strong>。简称：编译时，看左边；运行时，看右边。</p><ul><li>若编译时类型和运行时类型不一致 ， 就出现了对象的多态性(Polymorphism)</li><li>多态情况下 ， <strong>“ 看左边 ” ： 看的是父类的引用</strong>（父类中不具备子类特有的方法）<br><strong>“ 看右边 ” ： 看的是子类的对象</strong>（实际运行的是子类重写父类的方法）</li></ul><h5 id="2-对象的多态"><a href="#2-对象的多态" class="headerlink" title="2.对象的多态"></a>2.对象的多态</h5><p>在java中，子类的对象可以替代父类的对象使用</p><ul><li>一个变量只能有一种确定的数据类型</li><li>一个引用类型变量可能指向(引用)多种不同类型的对象</li></ul><pre class=" language-java"><code class="language-java">Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Object类型的变量o，指向Person类型的对象</span>o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Object类型的变量o，指向Student类型的对象</span></code></pre><p><strong>子类可看做是特殊的父类 ， 所以父类类型的引用可以指向子类的对象：向上转型(upcasting)。</strong></p><p>方法声明的形参类型为父类类型，可以使用子类的对象作为实参调用该方法。</p><p><strong>一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就不能再访问子类中添加的属性和方法。</strong></p><pre class=" language-java"><code class="language-java">Student m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span>school <span class="token operator">=</span> “pku”<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 合法,Student 类有school 成员变量</span>m<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 合法，Student 类中有read 方法</span>Person e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span>school <span class="token operator">=</span> “pku”<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 非法,Person 类没有school 成员变量</span>e<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 非法，Person 类中没有read 方法，编译时错误</span></code></pre><p><strong>属性是在编译时确定的</strong>，编译时e 为Person 类型，没有school 成员变量，因而编译错误。</p><p>虚拟方法调用(多态情况下)：子类中定义了与父类同名同参数的方法，在多态情况下，将此时父类的方法称为<strong>虚拟方法，父类根据赋给它的不同子类对象，动态调用属于子类的该方法</strong>。这样的方法调用在编译期是无法确定的。</p><pre class=" language-java"><code class="language-java">Person e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用Student 类的getInfo()</span></code></pre><p>编译时类型和运行时类型：编译时e 为Person 类型，而方法的调用是在运行时确定的，所以调用的是Student 类的getInfo() 方法。——动态绑定</p><p><strong>小结：</strong></p><ul><li><strong>子类可看做是特殊的父类 ， 所以父类类型的引用可以指向子类的对象：向上转型(upcasting)。</strong></li><li><strong>父类引用指向子类对象，该变量就不能再访问子类中新添加的属性和方法，编译时错误。</strong></li><li><strong>父类引用指向子类对象，子父类出现同名同参数方法，方法调用是运行时确定的，调用的是子类中的方法。</strong></li></ul><h5 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h5><p>前提：<strong>需要存在继承或实现关系、有方法的重写</strong></p><p>成员方法：</p><ul><li>编译时：要查看<strong>引用变量所声明的类</strong>中是否有所调用的方法</li><li>运行时：调用实际<strong>new的对象所属的类</strong>中的重写方法</li></ul><p>成员变量：<strong>不具备多态性，只看引用变量所声明的类</strong></p><h5 id="4-示例"><a href="#4-示例" class="headerlink" title="4.示例"></a>4.示例</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldMethodTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Sub s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 20</span>        s<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 20</span>        Base b <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指向同一个对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 10    成员变量不具有多态性</span>        b<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 20    多态，调用指向对象的方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>子类重写了父类方法，就意味着子类里定义的方法彻底覆盖了父类里的同名方法，系统将不可能把父类里的方法转移到子类中</li><li>对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的实例变量，这个实例变量依然不可能覆盖父类中定义的实例变量</li></ul><h3 id="四-关键字"><a href="#四-关键字" class="headerlink" title="四.关键字"></a>四.关键字</h3><h4 id="1-this"><a href="#1-this" class="headerlink" title="1.this"></a>1.this</h4><h5 id="1-理解"><a href="#1-理解" class="headerlink" title="1.理解"></a>1.理解</h5><ul><li>this 可以调用类的属性、方法和构造器</li><li>它在方法内部使用，即这个方法所属对象的引用(<strong>谁调用就是谁的引用</strong>)</li><li>它在构造器内部使用，表示该构造器正在初始化的对象</li></ul><h5 id="2-this调用属性与方法"><a href="#2-this调用属性与方法" class="headerlink" title="2.this调用属性与方法"></a>2.this调用属性与方法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 定义Person类</span>    <span class="token keyword">private</span> String name <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// this调用属性</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age <span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// this调用方法</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“年龄：” <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>在任意方法或构造器内，如果使用当前类的成员变量或成员方法可以在其前面添加this，增强程序的阅读性。不过，通常我们都习惯省略this</li><li><strong>当形参与成员变量同名时，如果在方法内或构造器内需要使用成员变量，必须添加this来表明该变量是类的成员变量</strong></li><li><strong>使用this访问属性和方法时，如果在本类中未找到，会从父类中查找</strong></li></ul><h5 id="3-this调用本类的构造器"><a href="#3-this调用本类的构造器" class="headerlink" title="3.this调用本类的构造器"></a>3.this调用本类的构造器</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 定义Person类</span>    <span class="token keyword">private</span> String name <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 无参构造器</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新对象实例化"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用本类中的无参构造器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用有一个参数的构造器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"姓名："</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"，年龄："</span> <span class="token operator">+</span> age <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong>可以在类的构造器中使用”this(形参列表)”的方式，调用本类中重载的其他的构造器, 构造器中不能通过”this(形参列表)”的方式调用自身构造器</strong></li><li><strong>在类的一个构造器中，最多只能声明一个”this(形参列表)” 且 必须声明在类的构造器的首行</strong></li></ul><h4 id="2-super"><a href="#2-super" class="headerlink" title="2.super"></a>2.super</h4><h5 id="1-使用"><a href="#1-使用" class="headerlink" title="1.使用"></a>1.使用</h5><p>使用super调用父类中的指定操作：</p><ul><li>super可用于访问父类中定义的<strong>属性</strong></li><li>super可用于调用父类中定义的<strong>成员方法</strong></li><li>super可用于在子类构造器中调用父类的<strong>构造器</strong></li></ul><h5 id="2-注意"><a href="#2-注意" class="headerlink" title="2.注意"></a>2.注意</h5><ul><li><p>子父类出现同名成员时，可以用super表明调用的是父类的成员</p></li><li><p><strong>super的追溯不仅限于直接父类</strong></p></li><li><p>super代表父类内存空间的标识，this代表本类对象的引用</p></li><li><p>每个构造器的第一行默认都隐含有<code>super()</code>语句，当显示声明时，隐式会自动被覆盖。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> String name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Name: "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\nage: "</span> <span class="token operator">+</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> String name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String school <span class="token operator">=</span> <span class="token string">"New Oriental"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> school<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// super调用父类中成员方法</span>    <span class="token keyword">public</span> String <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\nschool: "</span> <span class="token operator">+</span> school<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="3-调用父类的构造器"><a href="#3-调用父类的构造器" class="headerlink" title="3.调用父类的构造器"></a>3.调用父类的构造器</h5><p>子类中所有的构造器 <strong>默认</strong>都会访问父类中 <strong>空参数</strong>的构造器，当父类中没有空参数的构造器时，子类的构造器必须通过<strong>this( 参数列表)或者super( 参数列表)</strong>语句指定调用本类或者父类中<strong>相应的构造器</strong>。同时，只能”二选一”，且必须放在<strong>构造器的首行</strong></p><h5 id="4-this与super区别"><a href="#4-this与super区别" class="headerlink" title="4.this与super区别"></a>4.this与super区别</h5><table><thead><tr><th>区别点</th><th>this</th><th>super</th></tr></thead><tbody><tr><td>访问属性</td><td>访问本类中的属性，如果本类没有此属性则从父类中继续查找</td><td>直接访问父类中的属性</td></tr><tr><td>调用方法</td><td>访问本类中的方法，如果本类没有此方法则从父类中继续查找</td><td>直接访问父类中的方法</td></tr><tr><td>调用构造器</td><td>调用本类构造器，必须放在构造器的首行</td><td>调用父类构造器，必须放在子类构造器的首行</td></tr></tbody></table><h4 id="3-static"><a href="#3-static" class="headerlink" title="3.static"></a>3.static</h4><p>在java类中，可用static修饰属性、方法、代码块、内部类。</p><p>被修饰后的成员具备的提点：</p><ul><li>随着<strong>类的加载而加载</strong></li><li><strong>优先于对象存在</strong></li><li>修饰的成员，被<strong>所有对象所共享</strong></li><li>访问权限允许时，可不创建对象，<strong>直接被类调用</strong></li></ul><p>内存解析：</p><p><strong>栈</strong>：局部变量；<strong>堆</strong>：new出来的结构，对象、数组； <strong>方法区</strong>：类的加载信息、静态变量、常量。</p><p>要点：</p><ul><li>没有对象的实例时，可以用<code>类名.属性</code>, <code>类名. 方法名()</code>的形式访问由static修饰的类属性和类方法</li><li>在static 方法内部只能访问类的<code>static 修饰的属性或方法</code>，不能访问类的非static的结构</li><li>因为不需要实例就可以访问static 方法，因此<strong>static方法内部不能有this，也不能有super</strong></li><li><strong>static修饰的方法不能被重写</strong>，因为static方法属于类</li></ul><h4 id="4-final"><a href="#4-final" class="headerlink" title="4.final"></a>4.final</h4><p>在Java中声明<strong>类、变量和方法</strong>时，可使用关键字final来修饰，表示“最终的”。static final：全局常量。</p><ul><li>final标记的<strong>类不能被继承</strong>：如String类、System类、StringBuffer类，简称为”太监类”</li><li>final标记的<strong>方法不能被子类重写</strong></li><li>final标记的<strong>变量(成员变量或局部变量)即称为常量，名称大写，且只能被赋值一次</strong>，如同圣旨</li></ul><p>final标记的成员变量必须在声明时或在每个构造器中或代码块中<strong>显式赋值</strong>，然后才能使用。<br><code>final double MY_PI = 3.14</code></p><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> totalNumber <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ID<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ID <span class="token operator">=</span> <span class="token operator">++</span>totalNumber<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可在构造器中给final修饰的“变量”赋值</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Test t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>ID<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> I <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> J<span class="token punctuation">;</span>        J <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        J <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 非法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5-package"><a href="#5-package" class="headerlink" title="5.package"></a>5.package</h4><p>package语句作为Java<strong>源文件的第一条语句</strong>，指明该文件中定义的类所在的包.</p><p>格式:  <code>package 顶层包名. 子包名 ;</code></p><p>包对应于文件系统的目录，package 语句中，用 “.”  来指明包( 目录) 的层次.</p><p>包通常用<strong>小写单词</strong>标识。通常使用所在公司域名的倒置.</p><h4 id="6-import"><a href="#6-import" class="headerlink" title="6.import"></a>6.import</h4><p>为使用定义在不同包中的Java类，需用import语句来引入指定包层次下所需要的类或全部类。<strong>import语句告诉编译器到哪里去寻找类</strong></p><p>语法格式:  <code>import 包名.类名;</code></p><ul><li>import语句在<strong>包的声明和类的声明</strong>之间</li><li>可以使用<code>java.util.*</code>的方式，一次性导入util包下所有的类或接口</li><li>如果导入的类或接口是<strong>java.lang包</strong>下的，或者是<strong>当前包</strong>下的，则可以省略此import语句</li><li>如果在代码中使用不同包下的同名的类。那么就需要使用<strong>类的全类名</strong>的方式指明调用的是哪个类</li><li>已经导入java.a包下的类,要使用a包的子包下的类，仍然需要导入</li></ul><h3 id="五-其他"><a href="#五-其他" class="headerlink" title="五.其他"></a>五.其他</h3><h4 id="1-方法重载与重写"><a href="#1-方法重载与重写" class="headerlink" title="1.方法重载与重写"></a>1.方法重载与重写</h4><h5 id="1-方法重载-overload"><a href="#1-方法重载-overload" class="headerlink" title="1.方法重载(overload)"></a>1.方法重载(overload)</h5><ul><li><p>重载的概念</p><p>在<strong>同一个类中</strong>，允许存在一个以上的<strong>同名方法</strong>，只要它们的<strong>参数个数或者参数类型不同</strong>即可</p></li><li><p>重载的特点</p><p><strong>与返回值类型无关</strong>，只看参数列表，且参数列表必须不同(参数个数或参数类型)。<strong>调用时，根据方法参数列表的不同来区别</strong></p></li><li><p>重载示例</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方法重载：同一个类中，方法名相同，参数列表不同，与返回值无关</span><span class="token comment" spellcheck="true">// 返回两个整数的和</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 返回三个整数的和</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token operator">+</span>z<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 返回两个小数的和</span><span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span><span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="2-方法重写-override"><a href="#2-方法重写-override" class="headerlink" title="2.方法重写(override)"></a>2.方法重写(override)</h5><p>在子类中可以根据需要对<strong>从父类中继承来的方法进行改造</strong>，也称为方法的重置、覆盖。<strong>在程序执行时，子类的方法将覆盖父类的方法。</strong></p><p>要求：</p><ul><li>访问权限：子类不能小于父类 (&gt;=)，不能重写private修饰的方法</li><li>返回值类型：子类不能大于父类 (&lt;=)</li><li>方法名称、参数列表：子类与父类必须相同 (==)</li><li>方法抛出的异常：子类不能大于父类 (&lt;=)</li><li>必须都为非static的方法。static方法不是重写，static方法属于类，子类无法覆盖父类的方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方法重写：发生在子父类中，方法名、参数列表相同，其他要求参考上面</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Name: "</span><span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span><span class="token string">"age: "</span><span class="token operator">+</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 继承</span>    <span class="token keyword">public</span> String school<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//方法重写</span>        <span class="token keyword">return</span> <span class="token string">"Name: "</span><span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\nage: "</span><span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"\nschool: "</span><span class="token operator">+</span> school<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 继承</span>        Student s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"Bob"</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span>school<span class="token operator">=</span><span class="token string">"school2"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Name:Bob age:20 school:school2</span>        <span class="token comment" spellcheck="true">// 重写：多态</span>        Person p1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用Person类的getInfo()方法</span>        p1<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用Student类的getInfo()方法</span>        s1<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这是一种“多态性”：同名的方法，用不同的对象来区分调用的是哪一个方法。</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-四种访问权限修饰符"><a href="#2-四种访问权限修饰符" class="headerlink" title="2.四种访问权限修饰符"></a>2.四种访问权限修饰符</h4><p>Java权限修饰符public、protected、(缺省)、private置于 <code>类的成员</code> 定义前，用来限定<strong>对象对该类成员</strong>的访问权限。</p><table><thead><tr><th>修饰符</th><th>类内部</th><th>同一个包</th><th>不同包的子类</th><th>同一个工程</th></tr></thead><tbody><tr><td>private</td><td>√</td><td></td><td></td><td></td></tr><tr><td>default</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p>对于<code>class的权限修饰</code>只可以用<strong>public和default(缺省)</strong>。<br>public类可以在任意地方被访问；default类只可以被同一个包内部的类访问。</p><h4 id="3-子类对象实例化过程"><a href="#3-子类对象实例化过程" class="headerlink" title="3.子类对象实例化过程"></a>3.子类对象实例化过程</h4><ul><li>this(…)和super(…)不能同时在一个构造器中</li><li>this(…)和super(…)只能作为构造器中第一句</li><li>每个构造器的第一行默认都隐含有<code>super()</code>语句，当显示声明时，隐式会自动被覆盖</li></ul><p>无论通过那个构造器创建子类对象，需要保证先初始化父类。</p><p>目的：当子类继承父类后，”继承“父类中所有的属性和方法，因此子类有必要知道父类如何为对象进行初始化。</p><p><strong>子类对象在实例化时，会默认先去调用父类中的无参构造方法，之后再调用子类本身的相应构造方法。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Creature</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Creature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Creature无参数的构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token keyword">extends</span> <span class="token class-name">Creature</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Animal带一个参数的构造器，该动物的name为"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Animal带两个参数的构造器，其age为"</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wolf</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Wolf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"灰太狼"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Wolf无参数的构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Wolf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*Creature无参数的构造器Animal带一个参数的构造器，该动物的name为灰太狼Animal带两个参数的构造器，其age为3Wolf无参数的构造器*/</span></code></pre><h4 id="4-Object类的使用"><a href="#4-Object类的使用" class="headerlink" title="4.Object类的使用"></a>4.Object类的使用</h4><p>Object类是所有java类的根父类，如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类。</p><p>主要方法：</p><table><thead><tr><th>方法名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>public Object()</td><td>构造</td><td>构造器</td></tr><tr><td>public boolean equals(Object obj)</td><td>普通</td><td>对象比较</td></tr><tr><td>public int hashCode()</td><td>普通</td><td>取得Hash码</td></tr><tr><td>public String toString()</td><td>普通</td><td>对象打印时调用</td></tr></tbody></table><h5 id="1-toString-方法"><a href="#1-toString-方法" class="headerlink" title="1.toString()方法"></a>1.toString()方法</h5><p>toString()方法在Object类中定义，其返回值是String类型，返回<strong>类名和它的引用地址</strong>，若重写toString()方法，返回<strong>字符串的值</strong>；基本数据类型转换为String类型时，调用了对应<strong>包装类的toString()方法</strong>。</p><p>在进行String与其它类型数据连接操作时，自动调用toString()方法</p><pre class=" language-java"><code class="language-java">Date d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"now="</span><span class="token operator">+</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 相当于</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"now"</span><span class="token operator">+</span>now<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// abc</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// [I@22927a81</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// [D@78e03bb5</span></code></pre><h4 id="5-包装类的使用"><a href="#5-包装类的使用" class="headerlink" title="5.包装类的使用"></a>5.包装类的使用</h4><p> 针对八种基本数据类型定义相应的引用类型—包装类（Wrapper封装类）</p><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr></tbody></table><p>Byte、Short、Integer、Long、Floate、Double父类都是Number;</p><ul><li><p>装箱：基本数据类型  –&gt;  包装类</p><p>通过包装类的构造器实现：int i = 300; Integer i = new Integer(i);</p><p>还可以通过字符串参数构造包装类对象：Float f = new Float(“1.23”);</p></li><li><p>拆箱：包装类  –&gt;  基本数据类型</p><p>调用包装类的<code>.xxxValue()</code>方法</p></li><li><p>JDK1.5之后，支持自动装箱，自动拆箱</p></li></ul><p><strong>字符串与基本数据类型之间转换：</strong></p><ul><li><p>String  –&gt;  基本数据类型</p><p>通过包装类的<code>parseXxx(String s)</code>静态方法：<code>Float f = Float.parseFloat(&quot;12.3&quot;);</code></p><p>通过包装类的构造器：<code>int i = new Integer(&quot;12&quot;);</code></p></li><li><p>基本数据类型  –&gt;  String</p><p>调用字符串重载的valueOf()方法：<code>String str = String.valueOf(2.34f);</code></p></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 包装类的运用</span>Integer i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Integer j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>Integer m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Integer n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>Integer x <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>Integer y <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><p>JVM会自动维护八种基本类型的常量池，int常量池中初始化-128~127的范围，所以当为Integer i=127时，在自动装箱过程中是取自常量池中的数值，而当Integer i=128时，128不在常量池范围内，所以在自动装箱过程中需new 128，所以地址不一样。</p><p>故：<strong>Integer类型的数据最好用equals方法进行比较</strong>。</p><h4 id="6-理解main方法的语法"><a href="#6-理解main方法的语法" class="headerlink" title="6.理解main方法的语法"></a>6.理解main方法的语法</h4><ul><li>访问权限必须是public：由于java虚拟机需要调用类的main()方法</li><li>方法必须是static：java虚拟机在执行main()方法时不必创建对象</li><li>接受一个String类型的数组参数：数组中保存执行java命令时传递给所运行的类的参数</li><li>方法体中必须创建类的一个实例对象，才能通过这个对象访问类中非静态成员</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// main方法的编译、运行与变量名是否为args无关</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Something</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> something_to_do<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Do something ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="7-抽象类与接口"><a href="#7-抽象类与接口" class="headerlink" title="7.抽象类与接口"></a>7.抽象类与接口</h4><h5 id="1-抽象类-abstract"><a href="#1-抽象类-abstract" class="headerlink" title="1.抽象类(abstract)"></a>1.抽象类(abstract)</h5><ul><li><p>用abstract关键字来修饰一个类，这个类叫做抽象类</p></li><li><p>用abstract来修饰一个方法，该方法叫做抽象方法</p><p>抽象方法：只有方法的声明，没有方法的实现。以分号结束。如：<code>public abstract void talk();</code></p></li><li><p><strong>含有抽象方法的类必须被声明为抽象类</strong></p></li><li><p><strong>抽象类不能被实例化</strong>。抽象类是用来被继承的，<strong>抽象类的子类必须重写父类的抽象方法，并提供方法体</strong>。若没有重写全部的抽象方法，仍为抽象类</p></li><li><p>不能用abstract修饰变量、代码块、构造器</p></li><li><p>不能用abstract修饰私有方法、静态方法、final的方法、final的类</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类中定义的m2方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B类中定义的m1方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>应用：<strong>模板方法设计模式(TemplateMethod)</strong></p><p>抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式。</p><p>当功能内部一部分实现是确定的，一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类去实现。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Template</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行时间是："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不确定的部分暴露出去</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SubTemplate</span> <span class="token keyword">extends</span> <span class="token class-name">Template</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//抽象类的应用：模板方法的设计模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateMethodTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BankTemplateMethod btm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DrawMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btm<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BankTemplateMethod btm2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ManageMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btm2<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BankTemplateMethod</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 具体方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">takeNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取号排队"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 办理具体的业务 //钩子方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反馈评分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 模板方法，把基本操作组合到一起，子类一般不能重写</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">takeNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 像个钩子，具体执行时，挂哪个子类，就执行哪个子类的实现代码</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DrawMoney</span> <span class="token keyword">extends</span> <span class="token class-name">BankTemplateMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我要取款！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ManageMoney</span> <span class="token keyword">extends</span> <span class="token class-name">BankTemplateMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我要理财！我这里有2000万美元!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-接口-interface"><a href="#2-接口-interface" class="headerlink" title="2.接口(interface)"></a>2.接口(interface)</h5><p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是/要…则必须能…”的思想。<strong>继承是一个”是不是”的关系，而接口实现则是 “能不能”的关系。</strong></p><p><strong>接口的本质是契约，标准，规范</strong>，就像我们的法律一样。制定好后大家都要遵守。</p><p><strong>接口(interface)是抽象方法和常量值定义的集合。</strong></p><p>接口的特点：</p><ul><li>接口中的所有成员变量都默认是由public static final修饰的</li><li>接口中的所有抽象方法都默认是由public abstract修饰的</li><li>接口中没有构造器</li><li>接口采用多继承机制</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runner</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>理解：</strong></p><ul><li><p>定义java类的语法格式：先写extends，后写implements</p><p><code>class SubClass extends SuperClass implements InterfaceA{ }</code></p></li><li><p>一个类可以实现多个接口，接口也可以继承其它接口</p></li><li><p>接口和类是并列关系，或者可以理解为一种特殊的类。从本质上讲，<strong>接口是一种特殊的抽象类</strong>，这种抽象类中只包含<strong>常量和方法的定义</strong>(JDK7.0及之前)，而没有<strong>变量和方法的实现</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 实现类SubAdapter必须给出接口SubInterface以及父接口MyInterface中所有方法的实现。否则，SubAdapter仍需声明为abstract的</span><span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>    String s<span class="token operator">=</span>“MyInterface”<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">absM1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">SubInterface</span> <span class="token keyword">extends</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 接口继承接口</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">absM2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">SubInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">absM1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“absM1”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">absM2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“absM2”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p><strong>应用：</strong></p><p><strong>代理模式(Proxy)</strong>是Java开发中使用较多的一种设计模式。代理设计就是<strong>为其他对象提供一种代理以控制对这个对象的访问</strong>。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 应用场景：安全代理、远程代理、延迟加载</span><span class="token keyword">interface</span> <span class="token class-name">Network</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 被代理类</span><span class="token keyword">class</span> <span class="token class-name">RealServer</span> <span class="token keyword">implements</span> <span class="token class-name">Network</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"真实服务器上网浏览信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 代理类</span><span class="token keyword">class</span> <span class="token class-name">ProxyServer</span> <span class="token keyword">implements</span> <span class="token class-name">Network</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Network network<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProxyServer</span><span class="token punctuation">(</span>Network network<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>network <span class="token operator">=</span> network<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"检查网络连接等操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        network<span class="token punctuation">.</span><span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Network net <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyServer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RealServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        net<span class="token punctuation">.</span><span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="3-抽象类与接口对比"><a href="#3-抽象类与接口对比" class="headerlink" title="3.抽象类与接口对比"></a>3.抽象类与接口对比</h5><table><thead><tr><th>区别点</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>定义</td><td>包含抽象方法的类</td><td>主要是抽象方法和全局常量的集合</td></tr><tr><td>组成</td><td>构造方法、抽象方法、普通方法、常量、变量</td><td>常量、抽象方法、(jdk8.0:默认方法、静态方法)</td></tr><tr><td>使用</td><td>子类继承抽象类(extends)</td><td>子类实现接口(implements)</td></tr><tr><td>关系</td><td>抽象类可以实现多个接口</td><td>接口不能继承抽象类，但允许继承多个接口</td></tr><tr><td>常见设计模式</td><td>模板方法</td><td>简单工厂、工厂方法、代理模式</td></tr><tr><td>对象</td><td>通过对象的多态性产生实例化对象</td><td>通过对象的多态性产生实例化对象</td></tr><tr><td>局限</td><td>抽象类有单继承的局限</td><td>接口没有此局限</td></tr><tr><td>实际</td><td>作为一个模板</td><td>是作为一个标准或是表示一种能力</td></tr><tr><td>选择</td><td>优先使用接口，因为避免单继承的局限</td><td>优先使用接口，因为避免单继承的局限</td></tr></tbody></table><h5 id="4-java8中关于接口的改进"><a href="#4-java8中关于接口的改进" class="headerlink" title="4.java8中关于接口的改进"></a>4.java8中关于接口的改进</h5><p>Java 8中，你可以为接口添加<strong>静态方法</strong>和<strong>默认方法</strong>。</p><p><strong>静态方法</strong>：使用 <strong>static 关键字</strong>修饰。<strong>可以通过接口直接调用静态方法，并执行其方法体</strong>。</p><p><strong>默认方法</strong>：默认方法使用 <strong>default 关键字</strong>修饰。可以通过<strong>实现类对象来调用</strong>。我们在已有的接口中提供新方法的同时，还保持了与旧版本代码的兼容性。比如：java 8 API中对Collection、List、Comparator等接口提供了丰富的默认方法。</p><ul><li>一个<strong>接口</strong>定义了一个<strong>默认方法</strong>，另外一个<strong>接口</strong>定义了一个<strong>同名同参数的方法</strong>(不管是否是默认方法)，实现类同时实现这两个接口时，会出现<strong>接口冲突</strong>。<strong>实现类必须覆盖接口中同名同参数的方法</strong>，来解决冲突。</li><li>若一个<strong>接口</strong>中定义了一个<strong>默认方法</strong>，而<strong>父类</strong>中也定义了一个<strong>同名同参数的非抽象方法</strong>，则不会出现冲突问题。因为此时遵守： <strong>类优先原则</strong>。接口中具有相同名称和参数的默认方法会被忽略。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Filial</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 孝顺的</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老妈，我来救你了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Spoony</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 痴情的</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"媳妇，别怕，我来了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">implements</span> <span class="token class-name">Filial</span><span class="token punctuation">,</span> Spoony <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 实现类必须覆盖接口中同名同参数的方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我该怎么办呢？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Filial<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Spoony<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="8-成员变量赋值的执行顺序"><a href="#8-成员变量赋值的执行顺序" class="headerlink" title="8.成员变量赋值的执行顺序"></a>8.成员变量赋值的执行顺序</h4><p>属性赋值的位置及先后顺序：1 –&gt; 2 –&gt; 3 –&gt; 4</p><ol><li>默认初始化：声明时成员变量的默认初始化，<code>int age;</code>默认初始化为0。</li><li>显式初始化、多个初始化块依次被执行(同级别下按先后顺序执行)：给属性赋值，<code>int age = 6;</code></li><li>构造器中初始化：<code>Person person = new Person(6);</code></li><li>通过“对象.属性“或“对象.方法”的方式可多次赋值：<code>person.age = 6; person.setAge(6);</code></li></ol><h4 id="9-instanceof操作符"><a href="#9-instanceof操作符" class="headerlink" title="9.instanceof操作符"></a>9.instanceof操作符</h4><p><code>x instanceof A</code> ：检验x 是否为类A 的对象，返回值为boolean。x属于类A及其子类对象。</p><h4 id="10-对象类型转换"><a href="#10-对象类型转换" class="headerlink" title="10.对象类型转换"></a>10.对象类型转换</h4><h5 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h5><ul><li>自动类型转换：小的数据类型可以自动转换成大的数据类型。如long g=20; double d=12.0f。</li><li>强制类型转换：可以把大的数据类型强制转换成小的数据类型。如 float f=(float)12.0; int a=(int)1200L。</li></ul><h5 id="2-对java对象的强制类型转换称为造型"><a href="#2-对java对象的强制类型转换称为造型" class="headerlink" title="2.对java对象的强制类型转换称为造型"></a>2.对java对象的强制类型转换称为造型</h5><ul><li>从子类到父类的类型转换可以自动进行 (向上转型：多态)</li><li>从父类到子类的类型转换必须通过造型( 强制类型转换) 实现 (向下转型：使用instanceof进行判断)</li><li><strong>无继承关系的引用类型间的转换是非法的</strong></li></ul><h4 id="11-equals方法与-操作符"><a href="#11-equals方法与-操作符" class="headerlink" title="11.equals方法与==操作符"></a>11.equals方法与==操作符</h4><h5 id="1-操作符"><a href="#1-操作符" class="headerlink" title="1.==操作符"></a>1.==操作符</h5><p>基本类型比较：比较数据值</p><p>引用类型比较：比较地址 (是否指向同一个对象)</p><h5 id="2-equals"><a href="#2-equals" class="headerlink" title="2.equals()"></a>2.equals()</h5><p>只能比较引用类型，比较是否指向同一个对象；</p><p>特例：对File、String、Date及包装类是比较内容(重写了Object类的equals方法)</p><h5 id="3-重写equals的原则"><a href="#3-重写equals的原则" class="headerlink" title="3.重写equals的原则"></a>3.重写equals的原则</h5><ul><li>对称性：x.equals(y) -&gt; true；y.equals(x) -&gt; true</li><li>自反性：x.equals(x) -&gt; true</li><li>传递性：x.equals(y) -&gt; true；y.equals(z) -&gt; true；z.equals(x) -&gt; true</li><li>一致性：x.equals(y) -&gt; true；只要内容不变，不管重复x.equals(y)多少次，返回都是”true”</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础之数组</title>
      <link href="/2019/10/06/array/"/>
      <url>/2019/10/06/array/</url>
      
        <content type="html"><![CDATA[<h3 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h3><ul><li>数组(Array)，是多个<strong>相同类型数据</strong>按<strong>一定顺序排列</strong>的集合，并使用<strong>一个名字命名</strong>，并通过<strong>编号</strong>的方式对这些数据进行统一管理</li><li>数组常见概念: 数组名, 下标(或索引), 元素, 数组的长度</li><li>数组本身是<strong>引用数据类型</strong>，而数组中的元素可以是<strong>任何数据类型</strong>，包括基本数据类型和引用数据类型</li><li>创建数组对象会在内存中开辟一整块<strong>连续的空间</strong>，而数组名中引用的是这块连续空间的首地址</li><li>数组的<strong>长度一旦确定，就不能修改</strong></li><li>可以直接通过下标(或索引)的方式调用指定位置的元素，速度很快</li><li>数组的分类:<ul><li>按照维度: 一维数组、二维数组、三维数组、…</li><li>按照元素的数据类型分: 基本数据类型元素的数组、引用数据类型元素的数组(即对象数组)</li></ul></li></ul><h3 id="二-一维数组的使用"><a href="#二-一维数组的使用" class="headerlink" title="二.一维数组的使用"></a>二.一维数组的使用</h3><h4 id="1-声明"><a href="#1-声明" class="headerlink" title="1.声明"></a>1.声明</h4><p><code>type var[];</code> 或 <code>type[] var;</code></p><p>例如: int a[]; int[] a; String[] b;</p><p> Java语言中声明数组时不能指定其长度(数组中元素的数)， 例如： int a[5];   // 非法</p><h4 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h4><ol><li><p>动态初始化 ：<strong>数组声明且为数组元素分配空间与赋值的操作分开进行</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span></code></pre></li><li><p>静态初始化 ：<strong>在定义数组的同时就为数组元素分配空间并赋值</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义数组长度为0, 数组的长度可以为0</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol><h4 id="3-数组元素的引用"><a href="#3-数组元素的引用" class="headerlink" title="3.数组元素的引用"></a>3.数组元素的引用</h4><ul><li>定义并用<strong>运算符new为之分配空间</strong>后，才可以引用数组中的每个元素</li><li>数组元素的引用方式：<strong>数组名[数组元素下标]</strong><ul><li>数组元素下标可以是整型常量或整型表达式。如a[3] , b[i] , c[6*i]</li><li><strong>数组元素下标从0开始；长度为n的数组合法下标取值范围: 0 —&gt; n-1</strong></li></ul></li><li>每个数组都有一个属性<strong>length</strong>指明它的长度: <strong>数组一旦初始化, 其长度是不可变的</strong></li></ul><h4 id="4-元素默认初始化值"><a href="#4-元素默认初始化值" class="headerlink" title="4.元素默认初始化值"></a>4.元素默认初始化值</h4><p>数组是引用类型，它的元素<strong>相当于类的成员变量</strong>，因此数组<strong>一经分配空间</strong>，其中的每个元素也被按照成员变量同样的方式被<strong>隐式初始化</strong></p><table><thead><tr><th>数组元素类型</th><th>元素默认初始值</th></tr></thead><tbody><tr><td>byte</td><td>0</td></tr><tr><td>short</td><td>0</td></tr><tr><td>int</td><td>0</td></tr><tr><td>long</td><td>0L</td></tr><tr><td>float</td><td>0.0F</td></tr><tr><td>double</td><td>0.0</td></tr><tr><td>char</td><td>0 或写为: ‘\u0000’(表现为空)</td></tr><tr><td>boolean</td><td>false</td></tr><tr><td>引用类型</td><td>null</td></tr></tbody></table><h4 id="5-示例"><a href="#5-示例" class="headerlink" title="5.示例"></a>5.示例</h4><p>数组遍历:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 数组的赋值和遍历输出</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 局部变量:栈空间</span>        s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在堆内存为int[]对象分配空间,并隐式初始化为默认值</span>        <span class="token comment" spellcheck="true">//int[] s=new int[10];</span>        <span class="token comment" spellcheck="true">// 基本数据类型数组在显式赋值之前，自动赋默认值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//显示初始化</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对象数组:</p><p>声明和初始化:  <code>类名称[] 对象数组名称 = new 类名称[对象个数];</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 对象数组的使用</span>Student<span class="token punctuation">[</span><span class="token punctuation">]</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>stu<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token operator">+</span>i<span class="token punctuation">,</span><span class="token number">18</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化对象</span>      stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将对象放入数组</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>stu<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印输出每个对象的属性</span><span class="token punctuation">}</span></code></pre><h3 id="三-二维数组的使用"><a href="#三-二维数组的使用" class="headerlink" title="三.二维数组的使用"></a>三.二维数组的使用</h3><p>对于二维数组(<strong>数组中的数组</strong>)的理解，我们可以看成是一维数组array1又作为另一个一维数组array2的元素而存在。其实，<strong>从数组底层的运行机制来看，其实没有多维数组</strong></p><h4 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h4><p>1.动态初始化: <code>int[][] arr = new int[3][2];</code></p><ul><li>定义了名称为arr的二维数组</li><li>二维数组中有3个一维数组</li><li>每一个一维数组中有2个元素</li><li>一维数组的名称分别为arr[0], arr[1], arr[2]</li><li>给第一个一维数组1脚标位赋值为78写法是： <code>arr[0][1] = 78;</code></li></ul><p>2.动态初始化: <code>int[][] arr = new int[3][];</code></p><ul><li>二维数组中有3个一维数组</li><li>每个一维数组都是默认初始化值null</li><li>可以对这个三个一维数组分别进行初始化</li><li><code>arr[0] = new int[3]; arr[1] = new int[1]; arr[2] = new int[2];</code></li></ul><p>3.静态初始化: <code>int[][] arr = new int[][]{ {1,3,5},{2,4},{6,8,5,6} };</code> 或 <code>int[][] a = { (1,2,3),(4,5,6),(7,8,9) };</code></p><ul><li>定义一个名称为arr的二维数组，二维数组中有三个一维数组</li><li>每一个一维数组中具体元素也都已初始化</li><li>第一个一维数组<code>arr[0] = {1,3,5};</code></li><li>第二个一维数组<code>arr[1] = {2,4};</code></li><li>第三个一维数组<code>arr[2] = {6,8,5,6};</code></li><li>第三个一维数组的长度表示方式<code>arr[2].length;</code></li><li>注意特殊写法情况：int[] x,y[]; x是一维数组，y是二维数组</li></ul><h4 id="2-示例"><a href="#2-示例" class="headerlink" title="2.示例"></a>2.示例</h4><p>二位数组的遍历:</p><pre class=" language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//s.length表示二维数组的行数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//s[i].length表示二维数组的列数</span>          s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"第"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"行,第"</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">"列"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将字符串对象存入数组</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//遍历输出二维数组的值  --嵌套循环</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//遍历每个一维数组</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>不规则二维数组遍历:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// a.定义</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义行,即a[0]-a[4],a[i]都是数组对象的引用</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义a[0]所实际引用的数组对象,即第一行由4个元素组成</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没有定义a[4],即第五行开辟的空间,没有显示初始化,a[4]默认值为null</span><span class="token comment" spellcheck="true">// b.数组的遍历</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"行:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断数组对象的引用是否是null</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="四-常用两种排序"><a href="#四-常用两种排序" class="headerlink" title="四.常用两种排序"></a>四.常用两种排序</h3><h4 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h4><p><img src="/loading.gif" data-original="/2019/10/06/array/003.gif" alt></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定右边数字</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//轮数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//次数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>              a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2.选择排序"></a>2.选择排序</h4><p><img src="/loading.gif" data-original="/2019/10/06/array/004.gif" alt></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定左边数字</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//中间容器</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//a.length轮只需要比较a.length-1轮</span>      flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//比较最小值,放入中间容器</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//换位置</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 简单写法</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//轮数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//次数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>              a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>              a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="五-其它使用"><a href="#五-其它使用" class="headerlink" title="五.其它使用"></a>五.其它使用</h3><h4 id="1-Arrays工具类的使用"><a href="#1-Arrays工具类的使用" class="headerlink" title="1.Arrays工具类的使用"></a>1.Arrays工具类的使用</h4><p>java.util.Arrays类即为操作数组的工具类，包含了用来操作数组（比如排序和搜索）的各种方法</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean equals(int[] a,int[] b)</td><td>判断两个数组是否相等</td></tr><tr><td>String toString(int[] a)</td><td>输出数组信息</td></tr><tr><td>void fill(int[] a,int val)</td><td>将指定值填充到数组之中</td></tr><tr><td>void sort(int[] a)</td><td>对数组进行排序</td></tr><tr><td>int binarySearch(int[] a,int key)</td><td>对排序后的数组进行二分法检索指定的值</td></tr></tbody></table><p>示例:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 利用sort()方法对数组进行排序</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SortTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">700</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-数组使用中的常见异常"><a href="#2-数组使用中的常见异常" class="headerlink" title="2.数组使用中的常见异常"></a>2.数组使用中的常见异常</h4><ol><li><p><strong>数组脚标越界</strong>异常(ArrayIndexOutOfBoundsException)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 访问到了数组中的不存在的脚标时发生</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>空指针</strong>异常(NullPointerException)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// arr引用没有指向实体，却在操作实体中的元素时</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> null<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础之语法</title>
      <link href="/2019/10/01/grammar/"/>
      <url>/2019/10/01/grammar/</url>
      
        <content type="html"><![CDATA[<h3 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h3><h4 id="1-java语言概述"><a href="#1-java语言概述" class="headerlink" title="1.java语言概述"></a>1.java语言概述</h4><ol><li><p>是<strong>SUN</strong>(Stanford University Network，斯坦福大学网络公司 ) 1995年推出的一门高级编程语言; java之父—<strong>James Gosling(詹姆斯.高斯林)</strong>.</p></li><li><p>应用领域:</p><ul><li><strong>Java SE(Java Standard Edition)标准版</strong>: 支持面向桌面级应用（如Windows下的应用程序）的Java平台，提供了完整的Java核心API，此版本以前称为J2SE;</li><li><strong>Java EE(Java Enterprise Edition)企业版</strong>: 是为开发企业环境下的应用程序提供的一套解决方案。该技术体系中包含的技术如:Servlet 、Jsp等，主要针对于Web应用程序开发。版本以前称为J2EE;</li><li>Java ME(Java Micro Edition)小型版: 支持Java程序运行在移动终端（手机、PDA）上的平台，对Java API有所精简，并加入了针对移动终端的支持，此版本以前称为J2ME;</li><li>Java Card: 支持一些Java小程序（Applets）运行在小内存设备（如智能卡）上的平台.</li></ul></li><li><p>java发展:</p><ul><li><strong>1996年，发布JDK 1.0，约8.3万个网页应用Java技术来制作</strong></li><li><strong>2004年，发布里程碑式版本：JDK 1.5，为突出此版本的重要性，更名为JDK 5.0</strong></li><li>2009年，Oracle公司收购SUN，交易价格74亿美元</li><li>2011年，发布JDK 7.0</li><li><strong>2014年，发布JDK 8.0，是继JDK 5.0以来变化最大的版本</strong></li><li>随后发布了 JDK 9.0, JDK 10.0, JDK 11.0, JDK 12.0, JDK 13.0</li></ul></li><li><p>java语言特点:</p><ul><li><p><strong>面向对象</strong>: 两大基本概念(类, 对象)与 三大特性(封装, 继承, 多态)</p></li><li><p><strong>健壮性</strong>: 吸收了C/C++语言的优点,去掉了影响程序健壮性的部分(指针、内存的申请与释放等)</p></li><li><p><strong>跨平台性</strong>: </p><ul><li><p>跨平台性：通过Java语言编写的应用程序在不同的系统平台上都可以运行。 “Write once , Run Anywhere”</p></li><li><p>原理：只要在需要运行 java 应用程序的操作系统上，先安装一个Java虚拟机 (JVM Java Virtual Machine) 即可。由JVM来负责Java程序在该系统中的运行<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191209174206796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul></li></ul></li></ol><h4 id="2-java运行机制与运行过程"><a href="#2-java运行机制与运行过程" class="headerlink" title="2.java运行机制与运行过程"></a>2.java运行机制与运行过程</h4><ol><li><p><strong>Java虚拟机 (Java Virtal Machine)</strong></p><ul><li>JVM 是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器</li><li>对于不同的平台，有不同的虚拟机, 只有某平台提供了对应的java虚拟机，java程序才可在此平台运行</li><li>Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”</li></ul></li><li><p><strong>垃圾收集机制 (Garbage Collection)</strong></p><p>Java技术提供了垃圾收集器，用于自动检测每一块分配出去的内存空间，然后将无价值的内存块自动回收.</p><p>在java中判断内存空间是否符合垃圾收集器的收集标准有两个：</p><ul><li><strong>为对象赋予了空值NULL后再没有调用过</strong></li><li><strong>为对象赋予了新值，即重新分配了内存空间</strong></li></ul></li><li><p><strong>运行原理</strong>：</p><ul><li>编写java源文件，以.java作为后缀名</li><li>编译为字节码文件，使用java编译器将.java源文件编译成JVM能接受的指令集合，且以字节码.class的形式保存于文件中</li><li>解释执行字节码.class文件，JVM读取字节码，取出指令，并且将其解释为能够将计算机执行的语言</li></ul><p><strong>java源程序 –(java编译器编译)–&gt; .class文件 –(JVM解释)–&gt; 计算机语言</strong><br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191209174309384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol><h4 id="3-java环境搭建"><a href="#3-java环境搭建" class="headerlink" title="3.java环境搭建"></a>3.java环境搭建</h4><ol><li><p>什么是JDK ，JRE</p><ul><li><p>JDK(Java Development Kit): <strong>Java开发工具包</strong></p><p>JDK是提供给Java开发人员使用的，其中包含了java的开发工具，也包括了JRE。所以安装了JDK，就不用在单独安装JRE了。其中的开发工具：编译工具(javac.exe) 打包工具(jar.exe)等</p></li><li><p>JRE(Java Runtime Environment): <strong>Java运行环境</strong></p><p>包括Java虚拟机(JVM Java Virtual Machine)和Java程序所需的核心类库等，如果想要 运行一个开发好的Java程序，计算机中只需要安装JRE即可</p></li></ul></li><li><p>JDK 、JRE 、JVM 关系<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191209174350784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> JDK = JRE + 开发工具集（例如Javac编译工具等）<br> JRE = JVM + Java SE标准类库</p><p> 总结: 使用JDK 的开发工具完成的java 程序，交给JRE 去运行</p></li><li><p>环境变量</p><ul><li><strong>Java_HOME</strong>:JDK的安装路径  (JAVA_HOME: JDK安装路径)</li><li><strong>PATH</strong>：使系统可以在任何路径下识别java命令  (PATH: %JAVA_HOME%\bin)</li><li><strong>CLASSPATH</strong>：Java加载类的路径  (CLASSPATH: .;%JAVA_HOME%\lib)’.’表示当前路径</li></ul></li><li><p>运行步骤：在cmd窗口中执行java程序时先用javac命令将java源文件编译成字节码（.class）文件<code>javac 源文件名.java</code>，再用java命令将字节码文件解释为能被计算机执行的语言<code>java 字节码文件  (不能加后缀名)</code>。文档注释（/** */）可以通过javadoc命令生成API文档<code>javadoc -d 文档存放目录 源文件名.java</code>。</p></li></ol><h4 id="4-helloword程序"><a href="#4-helloword程序" class="headerlink" title="4.helloword程序"></a>4.helloword程序</h4><ul><li><p>Java应用程序的执行入口是main()方法.<code>public static void main(String[] args) {...}</code></p></li><li><p>Java语言严格区分大小写</p></li><li><p>Java方法由一条条语句构成，每个语句以“;”结束</p></li><li><p><strong>一个源文件中最多只能有一个public类。其它类的个数不限，如果源文件包含一个public类，则文件名必须按该类名命名</strong></p></li><li><p>注释:</p><ul><li><p>单行注释:  <code>//注释文字</code></p></li><li><p>多行注释: <code>/* 注释文字 */</code></p></li><li><p>文档注释（Java 特有）: 注释内容可以被JDK提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档。</p><p>/**<br>@author 指定java 程序的作者<br>@version 指定源文件的版本<br>*/</p></li></ul></li></ul><h3 id="二-变量与运算符"><a href="#二-变量与运算符" class="headerlink" title="二.变量与运算符"></a>二.变量与运算符</h3><h4 id="1-关键字和保留字"><a href="#1-关键字和保留字" class="headerlink" title="1.关键字和保留字"></a>1.关键字和保留字</h4><ul><li>关键字(keyword)的定义和特点<ul><li>定义：被Java 语言赋予了特殊含义，用做专门用途的字符串</li><li>特点：关键字中所有字母都为 小写</li></ul></li></ul><table><thead><tr><th>定义类型</th><th>关键字</th></tr></thead><tbody><tr><td>定义数据类型</td><td>class interface enum byte short int long float double char boolean void</td></tr><tr><td>定义流程控制</td><td>if else switch case default while do for break continue return</td></tr><tr><td>定义访问权限修饰符</td><td>private protected public</td></tr><tr><td>定义类,函数,变量修饰符</td><td>abstract final static synchronized</td></tr><tr><td>定义类与类之间关系</td><td>extends implements</td></tr><tr><td>定义建立实例及引用实例</td><td>new this super instanceof</td></tr><tr><td>异常处理</td><td>try catch finally throw throws</td></tr><tr><td>包</td><td>package import</td></tr><tr><td>其他修饰符</td><td>native strictfp transient volatile assert</td></tr></tbody></table><p>用于定义数据类型值的字面值：true、false、null，不是关键字。</p><ul><li><p>保留字(reserved word)</p><p>  现有Java版本尚未使用，但以后版本可能会作为关键字使用</p><p>  goto 、const</p></li></ul><h4 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2.标识符"></a>2.标识符</h4><ol><li>标识符<ul><li>Java 对各种 变量、 方法和 类等要素命名时使用的字符序列称为标识符</li></ul></li><li>标识符命名规范<ul><li><strong>由字母，数字，下划线，和‘$’中的任意字符组合而成</strong></li><li><strong>数字不可以开头</strong></li><li><strong>需要具有一定意义，且不能是系统关键字</strong></li><li><strong>严格区分大小写</strong></li></ul></li><li>名称命名规范<ul><li><strong>包名</strong>：多单词组成时所有字母都小写：xxxyyyzzz</li><li><strong>类名</strong>、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz</li><li><strong>变量名、方法名</strong>：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz</li><li><strong>常量名</strong>：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li></ul></li></ol><h4 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h4><ol><li><p><strong>变量</strong></p><ul><li><p>变量的概念</p><ul><li><strong>内存中的一个内存区域</strong></li><li>该区域的数据可以在同一类型范围内不断变化</li><li><strong>变量是程序中最基本的存储单元</strong>。包含变量类型、变量名和存储的值</li></ul></li><li><p>注意</p><ul><li>java中每个变量·必须先声明，后使用</li><li>变量的作用域：定义所在的一对{}内容，变量只有在其作用域内才有效</li><li>同一作用域内，不能定义重名的变量</li></ul></li><li><p>声明变量</p><ul><li>语法：&lt;数据类型&gt;&lt;变量名称&gt;</li><li>示例：int i;</li></ul></li><li><p>变量赋值</p><ul><li>语法：&lt;变量名称&gt; = &lt;值&gt;</li><li>示例：i = 6;</li></ul></li><li><p>声明和赋值变量</p><ul><li>语法：&lt;数据类型&gt; &lt;变量名&gt; = &lt;初始化值&gt;</li><li>示例：int i = 6;</li></ul></li><li><p>分类-按声明的位置不同</p><p>  <img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191209174838191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>  ​</p></li></ul></li><li><p><strong>数据类型</strong></p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191209174909540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p><strong>整数类型</strong>：默认为int型，声明long需加’l’或’L’</p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191209174940245.png" alt="在这里插入图片描述"></p></li><li><p><strong>浮点类型</strong>：默认为double型，声明float型需要加’f’或’F’;float可以精确到7位有效数字，double精度是float的两倍。</p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191209174957210.png" alt="在这里插入图片描述"></p></li><li><p><strong>字符类型</strong>：占2个字节。</p></li><li><p><strong>布尔类型</strong>：只允许true和false，无null。不可以使用0或非0的整数替代false和true。</p></li></ul></li><li><p><strong>基本数据类型变量间转换</strong></p><ul><li><p><strong>自动类型转换：容量小的类型自动转换为容量大的数据类型</strong>。<img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191209181137722.png" alt="在这里插入图片描述"></p><p>当和字符串进行连接运算时(+)时，</p><p><code>3+4+&quot;hello&quot;    //7hello</code>，</p><p> <code>&quot;hello&quot;+3+4    //hello34</code>，</p><p><code>&#39;a&#39;+1+&quot;hello&quot;    //98hello</code>，</p><p><code>&quot;hello&quot;+&#39;a&#39;+1    //helloa1</code></p></li><li><p><strong>强制类型转换：将容量大的数据类型转换为容量小的数据类型</strong>。使用时要加上强制转换符：<code>()</code>，但可能造成精度降低或溢出。</p></li></ul></li><li><p><strong>基本数据类型与String间转换</strong></p><p>字符串不能直接转换为基本类型，但通过基本类型对应的包装类则可以实现把字符串转换成基本类型。如：<code>Integer.parseInt()</code></p></li></ol><h4 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4.运算符"></a>4.运算符</h4><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p><ol><li><p><strong>算术运算符</strong></p><p><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191209181337849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p><strong>赋值运算符</strong></p><p>符号：=</p><p><strong>当“=”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理</strong>。</p><p>扩展赋值运算符： +=,  -=,  *=,  /=,  %=</p></li><li><p><strong>比较运算符</strong></p><p>比较运算符的结果都是boolean型，也就是要么是true，要么是false；</p><p>比较运算符“==” 不能误写成“=”。<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191209181407858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p><strong>逻辑运算符</strong></p><p><code>&amp; —逻辑与</code> <code>| —逻辑或</code> <code>！ —逻辑非</code><br><code>&amp;&amp; —短路与</code> <code>|| —短路或</code> <code>^ —逻辑异或</code><br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191209181450478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>“&amp;”和“&amp;&amp;”的区别：</p><p><strong>单&amp;时，左边无论真假，右边都进行运算；</strong></p><p><strong>双&amp;时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。</strong></p><p>“|”和“||”的区别同理，||表示：当左边为真，右边不参与运算。</p><p>异或( ^ )与或( | )的不同之处是：<strong>当左右值都相等时，结果为false</strong>。</p></li><li><p><strong>位运算符</strong></p><p>位运算是直接对整数的二进制进行的运算。</p><p><strong>二进制或运算符</strong>（or）：符号为<code>|</code>，表示若两个二进制位都为<code>0</code>，则结果为<code>0</code>，否则为<code>1</code>。</p><p><strong>二进制与运算符</strong>（and）：符号为<code>&amp;</code>，表示若两个二进制位都为1，则结果为1，否则为0。</p><p><strong>二进制否运算符</strong>（not）：符号为<code>~</code>，表示对一个二进制位取反。</p><p><strong>异或运算符</strong>（xor）：符号为<code>^</code>，表示若两个二进制位不相同，则结果为1，否则为0。</p><p><strong>左移运算符</strong>（left shift）：符号为<code>&lt;&lt;</code>。</p><p><strong>右移运算符</strong>（right shift）：符号为<code>&gt;&gt;</code>。</p><p><strong>头部补零的右移运算符</strong>（zero filled right shift）：符号为<code>&gt;&gt;&gt;</code>。</p><p>位运算只对整数有效，遇到小数时，会将小数部分舍去，只保留整数部分。所以，将一个小数与<code>0</code>进行二进制或运算，等同于对该数去除小数部分，即取整数位。<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191209181616283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>无 &lt;&lt;&lt; 运算符<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191209181633493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p><strong>三元运算符</strong></p><p>格式：<code>(条件表达式)？表达式1：表达式2</code></p><p>条件表达式为true，运算结果是表达式1；为false，运算结果是表达式2；</p></li><li><p><strong>运算符的优先级</strong></p><p>只有单目运算符、三元运算符、赋值运算符是从右向左运算的。<br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191209181700982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol><h3 id="三-流程控制"><a href="#三-流程控制" class="headerlink" title="三.流程控制"></a>三.流程控制</h3><p>流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。</p><p>其流程控制方式采用结构化程序设计中规定的三种基本流程结构，即：<strong>顺序结构、分支结构、循环结构</strong>。</p><h4 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1.顺序结构"></a>1.顺序结构</h4><p>程序从上到下逐行地执行，中间没有任何判断和跳转。</p><p>Java中定义<strong>成员变量</strong>时采用合法的<strong>前向引用</strong>。</p><h4 id="2-分支结构"><a href="#2-分支结构" class="headerlink" title="2.分支结构"></a>2.分支结构</h4><ol><li><p><strong>if-else结构</strong></p><ul><li>if(条件表达式){ 执行代码块; }</li><li>if(条件表达式){ 执行代码块1; }else{ 执行代码块2; }</li><li>if(条件表达式){ 执行代码块1; }else if(条件表达式){ 执行代码块2; }else{ 执行代码块3; }</li></ul></li><li><p><strong>switch-case结构</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> 常量<span class="token number">1</span><span class="token operator">:</span>        语句<span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// break;</span>    <span class="token keyword">case</span> 常量<span class="token number">2</span><span class="token operator">:</span>        语句<span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// break;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        语句<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// break;</span><span class="token punctuation">}</span></code></pre><ul><li>switch(表达式)中表达式的值 必须是下述几种类型之一：<strong>byte ，short ，char ，int ，枚举 (jdk 5.0) ，String (jdk 7.0)</strong></li><li>case子句中的值必须是 常量，不能是变量名或不确定的表达式值</li><li>同一个switch语句，所有case子句中的常量值互不相同</li><li><strong>break语句用来在执行完一个case分支后使程序跳出switch语句块；如果没有break，程序会顺序执行到switch结尾</strong></li><li>default子句是 可任选 的。同时，位置也是灵活的。当没有匹配的case时，执行default</li></ul></li><li><p>如果判断的具体数值不多，又符合byte、short、char、int、String、枚举等类型，建议使用switch-case，效率稍高；对区间判断，对结果为boolean类型判断，建议使用if语句。</p></li></ol><h4 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3.循环结构"></a>3.循环结构</h4><p>在某些条件满足的情况下，反复执行特定代码的功能。循环语句的四个组成部分：<strong>初始化部分(init_statement)、循环条件部分(test_exp)、循环体部分(body_statement)、迭代部分(alter_statement)</strong><br><img src="/loading.gif" data-original="https://img-blog.csdnimg.cn/20191209181750324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li><p><strong>for循环</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token number">1</span>初始化部分<span class="token punctuation">;</span> <span class="token number">2</span>循环条件部分<span class="token punctuation">;</span> <span class="token number">4</span>迭代部分<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token number">3</span>循环体部分<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>循环条件部分为boolean类型表达式，当值为false时，退出循环</li><li><strong>初始化部分可以声明多个变量，但必须是同一个类型，用逗号分隔</strong></li><li><strong>可以有多个变量更新，用逗号分隔</strong></li></ul></li><li><p><strong>while循环</strong></p><pre class=" language-java"><code class="language-java"><span class="token number">1</span>初始化部分<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">2</span>循环条件部分<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token number">3</span>循环体部分<span class="token punctuation">;</span>    <span class="token number">4</span>迭代部分<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><strong>注意不要忘记声明迭代部分</strong>。否则，循环将不能结束，变成死循环</li><li>for循环和while循环可以相互转换</li></ul></li><li><p><strong>do-while循环</strong></p><pre class=" language-java"><code class="language-java"><span class="token number">1</span>初始化部分<span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span>    <span class="token number">3</span>循环体部分<span class="token punctuation">;</span>    <span class="token number">4</span>迭代部分<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">2</span>循环条件部分<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><strong>do-while循环至少执行一次循环</strong></li></ul></li><li><p><strong>嵌套循环(多重循环)</strong></p><p>将一个循环放在另一个循环体内，就形成了嵌套循环。</p><p><strong>嵌套循环就是把内层循环当成外层循环的循环体</strong>。当只有内层循环的循环条件为false时，才会完全跳出内层循环，才可结束外层的当次循环，开始下一次的循环。</p><p>设外层循环次数为m次，内层为n次，则内层循环体实际上需要执行m*n次。</p></li><li><p><strong>break、continue使用</strong></p><ul><li>break<ul><li>break语句用于<strong>终止</strong>某个语句块的执行</li><li>break语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块</li></ul></li><li>continue<ul><li>continue语句用于跳过其所在循环语句块的<strong>一次执行</strong>，继续下一次循环</li><li>continue语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环</li></ul></li><li>return<ul><li>return：并非专门用于结束循环的，它的功能是结束<strong>一个方法</strong>。当一个方法执行到一个return语句时，这个方法将被结束</li><li>与break和continue不同的是，return直接结束整个方法，不管这个return处于多少层循环之内</li></ul></li></ul></li></ol><ul><li>注意<ul><li><strong>break只能用于switch 语句和 循环语句中</strong></li><li><strong>continue 只能用于 循环语句中</strong></li><li><strong>continue是终止 本次循环，break是终止 本层循环</strong></li><li><strong>break、continue之后不能有其他的语句，因为程序永远不会执行其后的语句</strong></li><li><strong>标号语句必须紧接在循环的头部。标号语句不能用在非循环语句的前面</strong></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
