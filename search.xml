<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线程的生命周期,同步,和通信</title>
      <link href="/2019/10/27/blog026/"/>
      <url>/2019/10/27/blog026/</url>
      
        <content type="html"><![CDATA[<h3 id="一-线程的生命周期"><a href="#一-线程的生命周期" class="headerlink" title="一:线程的生命周期"></a>一:线程的生命周期</h3><h4 id="1-Thread-State类"><a href="#1-Thread-State类" class="headerlink" title="1.Thread.State类"></a>1.Thread.State类</h4><p>Thread.State类定义了线程的几种状态,在一个完整的生命周期中通常要经历五种状态:</p><ol><li><strong>新建</strong>: 当一个Thread类或其子类的对象被声明并创建时</li><li><strong>就绪</strong>: start()方法后,将进入线程队列等待CPU时间片</li><li><strong>运行</strong>: 当就绪的线程被调度并获得CPU资源时,便进入运行状态</li><li><strong>阻塞</strong>: 被人为挂起或执行输入输出操作时,让出CPU并临时终止自己的执行,进入阻塞状态</li><li><strong>死亡</strong>: 线程完成全部工作或被提前强制性终止或出现异常导致结束</li></ol><h4 id="2-线程状态转换图"><a href="#2-线程状态转换图" class="headerlink" title="2.线程状态转换图"></a>2.线程状态转换图</h4><p><img src="/2019/10/27/blog026/hexo01.png" alt="线程状态图"></p><h3 id="二-线程的同步"><a href="#二-线程的同步" class="headerlink" title="二:线程的同步"></a>二:线程的同步</h3><h4 id="1-多线程的安全问题"><a href="#1-多线程的安全问题" class="headerlink" title="1.多线程的安全问题"></a>1.多线程的安全问题</h4><ol><li>问题原有: 当多条语句在操作同一个线程共享数据时,一个线程对多条语句只执行了一部分,另一个线程就参与进来执行,导致共享数据的错误.</li><li>解决办法: 对多条操作共享数据的语句,只能让一个线程都执行完,在执行过程中,其他线程不可以参与执行.</li></ol><h4 id="2-三种解决方法"><a href="#2-三种解决方法" class="headerlink" title="2.三种解决方法"></a>2.三种解决方法</h4><h5 id="2-1-同步代码块"><a href="#2-1-同步代码块" class="headerlink" title="2.1.同步代码块"></a>2.1.同步代码块</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象)&#123;</span><br><span class="line">  <span class="comment">// 需要被同步的代码;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">说明：1.操作共享数据的代码，即为需要被同步的代码。  --&gt;不能包含代码多了，也不能包含代码少了。</span></span><br><span class="line"><span class="comment">      2.共享数据：多个线程共同操作的变量。比如：ticket就是共享数据。</span></span><br><span class="line"><span class="comment">      3.同步监视器，俗称：锁。任何一个类的对象，都可以充当锁。</span></span><br><span class="line"><span class="comment">         要求：多个线程必须要共用同一把锁。</span></span><br><span class="line"><span class="comment">补充：在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器。</span></span><br><span class="line"><span class="comment"> 在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="2-2-同步方法"><a href="#2-2-同步方法" class="headerlink" title="2.2.同步方法"></a>2.2.同步方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">(String id)</span></span>&#123;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。</span></span><br><span class="line"><span class="comment">      1. 同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。</span></span><br><span class="line"><span class="comment">      2. 非静态的同步方法，同步监视器是：this</span></span><br><span class="line"><span class="comment">         静态的同步方法，同步监视器是：当前类本身</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>同步的方式，解决了线程的安全问题。—好处<br>操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。 —局限性</p><h5 id="2-3-示例"><a href="#2-3-示例" class="headerlink" title="2.3.示例"></a>2.3.示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 示例:创建三个窗口卖票，总票数为100张.采用继承方式</span></span><br><span class="line"><span class="comment"> * 1.问题：卖票过程中，出现了重票、错票 --&gt;出现了线程的安全问题</span></span><br><span class="line"><span class="comment"> * 2.问题出现的原因：当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票。</span></span><br><span class="line"><span class="comment"> * 3.如何解决：当一个线程a在操作ticket的时候，其他线程不能参与进来。直到线程a操作完ticket时，其他</span></span><br><span class="line"><span class="comment"> *            线程才可以开始操作ticket。这种情况即使线程a出现了阻塞，也不能被改变。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//方式一:采用继承类的方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">// 共享资源需要加上static</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//同步方法</span></span><br><span class="line"><span class="comment">//            handleTicket();</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 同步代码块</span></span><br><span class="line">            <span class="comment">// 不能使用this,this代表w1,w2,w3</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Window1.class) &#123;   <span class="comment">//Class clazz = Window1.class,Window1.class只会加载一次</span></span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(getName()+<span class="string">":"</span>+ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方式一</span></span><br><span class="line">    <span class="comment">/*private void handleTicket() &#123;</span></span><br><span class="line"><span class="comment">        // 同步代码块</span></span><br><span class="line"><span class="comment">        synchronized (Window.class) &#123;   //Class clazz = Window.class</span></span><br><span class="line"><span class="comment">            if (ticket &gt; 0)&#123;</span></span><br><span class="line"><span class="comment">                System.out.println(getName()+":"+ticket);</span></span><br><span class="line"><span class="comment">                ticket--;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">// 方式二</span></span><br><span class="line">    <span class="comment">// 同步方法: 需要加上static,保证是同一个对象锁</span></span><br><span class="line">    <span class="comment">// 方法不加static时,同步监视器：w1,w2,w3</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">handleTicket</span><span class="params">()</span> </span>&#123;   <span class="comment">// 同步监视器：Window.class</span></span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//sleep()方法属于静态方法,与对象无关</span></span><br><span class="line">                sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// static方法内容不能使用this,super关键字</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window1 w1 = <span class="keyword">new</span> Window1();</span><br><span class="line">        Window1 w2 = <span class="keyword">new</span> Window1();</span><br><span class="line">        Window1 w3 = <span class="keyword">new</span> Window1();</span><br><span class="line"></span><br><span class="line">        w1.setName(<span class="string">"窗口一"</span>);</span><br><span class="line">        w2.setName(<span class="string">"窗口二"</span>);</span><br><span class="line">        w3.setName(<span class="string">"窗口三"</span>);</span><br><span class="line"></span><br><span class="line">        w1.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二:采用实现接口的方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">// 不需要加static</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//同步方法</span></span><br><span class="line"><span class="comment">//            handleTicket();</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//同步代码块</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;   <span class="comment">//此时的this:唯一的Window2的对象</span></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// getName()属于Thread的方法</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式一</span></span><br><span class="line">    <span class="comment">/*private void handleTicket() &#123;</span></span><br><span class="line"><span class="comment">        // 同步代码块</span></span><br><span class="line"><span class="comment">        synchronized (this) &#123;   //同步监视器：this</span></span><br><span class="line"><span class="comment">            if(ticket &gt; 0)&#123;</span></span><br><span class="line"><span class="comment">                System.out.println(Thread.currentThread().getName()+":"+ticket);</span></span><br><span class="line"><span class="comment">                ticket--;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">//方式二</span></span><br><span class="line">    <span class="comment">//同步方法: 不需要加static</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">handleTicket</span><span class="params">()</span> </span>&#123;  <span class="comment">//同步监视器：this</span></span><br><span class="line">        <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplementTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window2 w1 = <span class="keyword">new</span> Window2();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w1);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w1);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"窗口一"</span>);</span><br><span class="line">        t2.setName(<span class="string">"窗口二"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口三"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-4-lock"><a href="#2-4-lock" class="headerlink" title="2.4.lock"></a>2.4.lock</h5><ol><li><p>synchronized 与 Lock的异同？</p><p>相同：二者都可以解决线程安全问题<br>不同：synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器<br>Lock需要手动的启动同步（lock()），同时结束同步也需要手动的实现（unlock()）</p></li><li><p>优先使用顺序：</p><p> Lock &gt; 同步代码块（已经进入了方法体，分配了相应资源）&gt; 同步方法（在方法体之外）</p></li><li><p>代码:</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//1.实例化ReentrantLock</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//2.调用锁定方法lock()</span></span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"：售票，票号为："</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//3.调用解锁方法：unlock()</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window w = <span class="keyword">new</span> Window();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-线程的通信"><a href="#三-线程的通信" class="headerlink" title="三:线程的通信"></a>三:线程的通信</h3><h4 id="1-涉及到的三个方法"><a href="#1-涉及到的三个方法" class="headerlink" title="1.涉及到的三个方法"></a>1.涉及到的三个方法</h4><ol><li>wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。</li><li>notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。</li><li>notifyAll():一旦执行此方法，就会唤醒所有被wait的线程。</li></ol><h4 id="2-说明"><a href="#2-说明" class="headerlink" title="2.说明"></a>2.说明</h4><ol><li>wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。</li><li>wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。否则，会出现IllegalMonitorStateException异常.</li><li>wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。</li></ol><h4 id="3-sleep-和-wait-的异同？"><a href="#3-sleep-和-wait-的异同？" class="headerlink" title="3.sleep() 和 wait()的异同？"></a>3.sleep() 和 wait()的异同？</h4><ol><li>相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</li><li>不同点：<ol><li>两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</li><li>调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中</li><li>关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁</li></ol></li></ol><h4 id="4-示例"><a href="#4-示例" class="headerlink" title="4.示例"></a>4.示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                obj.notify();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(number &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//使得调用如下wait()方法的线程进入阻塞状态</span></span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommunicationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Number number = <span class="keyword">new</span> Number();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(number);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(number);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程的概念和使用(创建)</title>
      <link href="/2019/10/22/blog025/"/>
      <url>/2019/10/22/blog025/</url>
      
        <content type="html"><![CDATA[<h3 id="一-基本概念"><a href="#一-基本概念" class="headerlink" title="一:基本概念"></a>一:基本概念</h3><h4 id="1-程序-进程-线程的理解"><a href="#1-程序-进程-线程的理解" class="headerlink" title="1.程序,进程,线程的理解"></a>1.程序,进程,线程的理解</h4><ol><li><strong>程序(program)是为完成指定任务,用某种语言编写的一组指令集合.指一段静态的代码.</strong></li><li><strong>进程(process)是正在运行的一个程序.是一个动态的过程.</strong></li><li><strong>线程(thread)是一个程序内部的一条执行路径.</strong></li></ol><h4 id="2-单核CPU-多核CPU的理解"><a href="#2-单核CPU-多核CPU的理解" class="headerlink" title="2.单核CPU,多核CPU的理解"></a>2.单核CPU,多核CPU的理解</h4><ol><li>单核CPU,实质是一种假的多线程,在一个时间单元内,也只能执行一个线程的任务.</li><li>多核CPU是多线程,每个核单独执行一个线程的任务.</li><li>一个java应用程序java.exe,至少有三个线程:<strong>main()主线程,gc()垃圾回收线程,异常处理线程.</strong></li></ol><h4 id="3-并行与并发"><a href="#3-并行与并发" class="headerlink" title="3.并行与并发"></a>3.并行与并发</h4><ol><li><strong>并行:多个CPU同时执行多个任务.(多个人同时做不同的事)</strong></li><li><strong>并发:一个CPU(采用时间片)同时执行多个任务.(多个人做同一件事)</strong></li></ol><h4 id="4-多线程优点"><a href="#4-多线程优点" class="headerlink" title="4.多线程优点"></a>4.多线程优点</h4><ol><li>提高应用程序的响应.</li><li>提高CPU的利用率</li><li>改善程序结构</li></ol><h4 id="5-何时需要多线程"><a href="#5-何时需要多线程" class="headerlink" title="5.何时需要多线程"></a>5.何时需要多线程</h4><ol><li>程序需要同时执行两个或多个任务.</li><li>程序需要实现一些需要等待的任务.</li><li>需要一些后台运行的程序时.</li></ol><h3 id="二-线程的创建和使用"><a href="#二-线程的创建和使用" class="headerlink" title="二:线程的创建和使用"></a>二:线程的创建和使用</h3><p>JVM允许程序运行多个线程,通过<strong>java.lang.Thread</strong>类体现.JDK1.5之前有两种方式创建线程: <strong>继承Thread类 和 实现Runnable接口</strong>.</p><h4 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1.继承Thread类"></a>1.继承Thread类</h4><ol><li><p>Thread类特性</p><ol><li><strong>每个线程都是通过某个特定Thread对象的run()方法完成操作的</strong>,常把run()方法的主体称为<strong>线程体</strong>.</li><li><strong>通过Thread对象的start()方法启动线程</strong>,不是直接调用run()方法</li></ol></li><li><p>Thread类构造器</p><ol><li><strong>Thread(): 创建Thread对象</strong></li><li>Thread(String threadname): 创建线程并指定线程实例名</li><li><strong>Thread(Runnable target): 创出线程的目标对象,它实现了Runnable接口的run()</strong></li><li>Thread(Runnable target, String name): 创建新的Thread对象</li></ol></li><li><p>流程</p><ol><li><strong>继承Thread</strong></li><li><strong>重写Thread中的run()</strong></li><li><strong>创建线程对象</strong></li><li><strong>调用对象的start(): 启动线程,调用run()</strong></li></ol></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123; <span class="keyword">super</span>(name); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 重写Thread类的run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">/*public Thread() &#123;</span></span><br><span class="line"><span class="comment">                    init(null, null, "Thread-" + nextThreadNum(), 0);</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建Thread类的子类的对象</span></span><br><span class="line"><span class="comment">//        MyThread t1 = new MyThread();</span></span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread(<span class="string">"分线程"</span>);</span><br><span class="line">        <span class="comment">//设置线程名称</span></span><br><span class="line"><span class="comment">//        t1.setName("线程一");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.通过此对象调用start():①启动当前线程 ② 调用当前线程的run()</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//问题一：我们不能通过直接调用run()的方式启动线程。</span></span><br><span class="line"><span class="comment">//        t1.run();</span></span><br><span class="line">        <span class="comment">//问题二：再启动一个线程，遍历100以内的偶数。不可以还让已经start()的线程去执行。</span></span><br><span class="line">        <span class="comment">/*if (threadStatus != 0)</span></span><br><span class="line"><span class="comment">            throw new IllegalThreadStateException();*/</span></span><br><span class="line"><span class="comment">//        t1.start();       // java.lang.IllegalThreadStateException</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//我们需要重新创建一个线程的对象</span></span><br><span class="line">        MyThread t2 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t2.start();</span><br><span class="line">        Thread.currentThread().setName(<span class="string">"主线程"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如下操作仍然是在main线程中执行的。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意点</p><ol><li><strong>对象调用run()方法,没有启动多线程模式</strong>,</li><li>run()方法由JVM掉用,什么时候,执行过程都由CPU调度决定.</li><li><strong>启动多线程,必须调用start()方法</strong>.</li><li><strong>一个线程对象不能重复调用start()方法,否则发生 “线程状态不符” 异常</strong></li></ol></li></ol><h4 id="2-实现Runnable接口"><a href="#2-实现Runnable接口" class="headerlink" title="2.实现Runnable接口"></a>2.实现Runnable接口</h4><ol><li><p>流程</p><ol><li><strong>实现Runnable接口.</strong></li><li><strong>重写Runnable接口中的run()方法.</strong></li><li><strong>通过Thread(Runnable target)构造器创建线程对象.</strong></li><li><strong>调用start()方法: 开启线程,调用Runnable子类接口的run()方法.</strong></li></ol></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建一个实现了Runnable接口的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//2. 实现类去实现Runnable中的抽象方法：run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建实现类的对象</span></span><br><span class="line">        MyThread2 r1 = <span class="keyword">new</span> MyThread2();</span><br><span class="line">        <span class="comment">//4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(r1);</span><br><span class="line">        t1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        <span class="comment">//5. 通过Thread类的对象调用start():① 启动线程 ②调用当前线程的run()</span></span><br><span class="line">        <span class="comment">// --&gt;调用了Runnable类型的target的run()</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再启动一个线程，遍历100以内的偶数</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(r1);</span><br><span class="line">        t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-两种方式的联系与区别"><a href="#3-两种方式的联系与区别" class="headerlink" title="3.两种方式的联系与区别"></a>3.两种方式的联系与区别</h4><p><code>public class Thread extends Object implements Runnable</code></p><ol><li>联系: <strong>都需要重写run()方法,将线程要执行的逻辑都声明在run()中</strong></li><li>实现Runnable接口方式的好处<ol><li><strong>避免了单继承的局限性</strong></li><li><strong>多个线程可以共享同一个接口实现类的对象,适合处理多个线程有共享数据的情况</strong></li></ol></li></ol><h3 id="三-Thread类的相关方法"><a href="#三-Thread类的相关方法" class="headerlink" title="三:Thread类的相关方法"></a>三:Thread类的相关方法</h3><ol><li><strong>void start(): 启动当前线程,并执行当前线程的run()方法</strong></li><li><strong>run(): 被CPU调度时执行的操作,将创建的线程要执行的操作声明在此方法中</strong></li><li><strong>String getName(): 返回线程的名称</strong></li><li><strong>void setName(String name): 设置线程的名称</strong></li><li><strong>static Thread currentThread(): 返回执行当前代码的线程. 在Thread子类中指this, 通常用于主线程和Runnable实现类.</strong></li><li><strong>static void yield(): 释放当前cpu的执行权</strong></li><li><strong>join(): 在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态</strong></li><li><strong>static void sleep(long millitime): 让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态</strong></li><li><strong>boolean isAlive(): 判断当前线程是否存活</strong></li></ol><h3 id="四-线程的优先级及分类"><a href="#四-线程的优先级及分类" class="headerlink" title="四:线程的优先级及分类"></a>四:线程的优先级及分类</h3><ol><li>调用策略: <strong>时间片</strong>(单元时间内做任务切换) 或 <strong>抢占式</strong>(高优先级的线程抢占CPU)</li><li>调度方法: 同优先级线程组成先进先出队列(先到先服务),使用时间片策略; 对高优先级,使用抢占式策略</li><li>线程优先级<ol><li><strong>MAX_PRIORITY: 10;  MIN_PRIORITY: 1;  NORM_PRIORITY: 5;(默认优先级)</strong></li><li><strong>getPriority(): 返回线程等级值;  setPriority(int newPriority): 设置线程等级值</strong></li><li><strong>说明: 线程创建时继承父线程的优先级; 低优先级只是获得调度的概率低,并不一定在高优先级线程之后才被调用</strong></li></ol></li><li>线程分类<ol><li>分为<strong>守护线程 和 用户线程</strong>.</li><li>守护线程是用来服务用户线程的,在<strong>start()方法前调用thread.setDaemon(true)可以把一个用户线程变为一个守护线程.</strong></li><li>java垃圾回收就是一个守护线程.<strong>若JVM中都是守护线程,当前JVM将退出</strong>.</li></ol></li></ol><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    sleep(10);</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + Thread.currentThread().getPriority() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            if(i % 20 == 0)&#123;</span></span><br><span class="line"><span class="comment">//                yield();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HelloThread h1 = <span class="keyword">new</span> HelloThread(<span class="string">"Thread：1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        h1.setName("线程一");</span></span><br><span class="line">        <span class="comment">//设置分线程的优先级</span></span><br><span class="line">        h1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        h1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给主线程命名</span></span><br><span class="line">        Thread.currentThread().setName(<span class="string">"主线程"</span>);</span><br><span class="line">        Thread.currentThread().setPriority(Thread.MIN_PRIORITY);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + Thread.currentThread().getPriority() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            if(i == 20)&#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    h1.join();</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(h1.isAlive());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-示例"><a href="#五-示例" class="headerlink" title="五:示例"></a>五:示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 示例：创建两个分线程，其中一个线程遍历100以内的偶数，另一个线程遍历100以内的奇数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-10-25 1:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        MyThread1 m1 = new MyThread1();</span></span><br><span class="line"><span class="comment">//        MyThread3 m2 = new MyThread3();</span></span><br><span class="line"><span class="comment">//        m1.start();</span></span><br><span class="line"><span class="comment">//        m3.start();</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 方式二:采用匿名内部类</span></span><br><span class="line">        <span class="comment">//创建Thread类的匿名子类的方式:遍历偶数</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Thread类的匿名子类的方式:遍历奇数</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式一:采用两个类分别执行不同任务</span></span><br><span class="line"><span class="comment">// 遍历100以内偶数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历100以内奇数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread3</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/2019/10/20/blog024/"/>
      <url>/2019/10/20/blog024/</url>
      
        <content type="html"><![CDATA[<h3 id="一-TCP网络编程"><a href="#一-TCP网络编程" class="headerlink" title="一:TCP网络编程"></a>一:TCP网络编程</h3><h4 id="1-Socket的TCP编程"><a href="#1-Socket的TCP编程" class="headerlink" title="1.Socket的TCP编程"></a>1.Socket的TCP编程</h4><p>Java语言的基于套接字编程分为服务端编程和客户端编程，其通信模型如图所示：</p><p><img src="/2019/10/20/blog024/hexo01.png" alt="基于Socket的TCP编程"></p><h4 id="2-客服端Socket的工作过程"><a href="#2-客服端Socket的工作过程" class="headerlink" title="2.客服端Socket的工作过程"></a>2.客服端Socket的工作过程</h4><ol><li>创建 Socket ：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。<strong>创建的同时会自动向服务器方发起连接,若服务器端响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。</strong></li><li>打开连接到 Socket  的输入/ 出流： 使用 <strong>getInputStream()</strong>方法获得输入流，使用<strong>getOutputStream()</strong>方法获得输出流，进行数据传输.</li><li>按照一定的协议对 Socket 进行读/ 写操作：通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息），通过输出流将信息写入线程。</li><li>关闭 Socket：断开客户端到服务器的连接，释放线路</li></ol><h4 id="3-服务器程序的工作过程"><a href="#3-服务器程序的工作过程" class="headerlink" title="3.服务器程序的工作过程"></a>3.服务器程序的工作过程</h4><ol><li>调用 ServerSocket(int port) ：创建一个服务器端套接字，并绑定到指定端口上。用于监听客户端的请求。<strong>服务器必须事先建立一个等待客户请求建立套接字的 连接的ServerSocket 对象</strong>。</li><li>调用 accept()：<strong>监听连接请求，如果客户端请求连接，则接受连接，返回Socket通信套接字对象。</strong></li><li>调用该Socket 类对象的 getOutputStream() 和 和 getInputStream ()：获取输出流和输入流，开始网络数据的发送和接收。</li><li>关闭ServerSocket 和Socket 对象：客户端访问结束，关闭通信套接字。</li></ol><h4 id="4-示例"><a href="#4-示例" class="headerlink" title="4.示例"></a>4.示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现TCP的网络编程</span></span><br><span class="line"><span class="comment"> * 示例：从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给客户端。</span></span><br><span class="line"><span class="comment"> * 并关闭相应的连接。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-10-20 15:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clientTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建Socket对象，指明服务器端的ip和端口号</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">"127.0.0.1"</span>), <span class="number">8989</span>);</span><br><span class="line">        <span class="comment">//2.获取一个输出流，用于输出数据</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//3.创建缓冲流,用于读取文件</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"beauty.jpg"</span>));</span><br><span class="line">        <span class="comment">//4.写出数据的操作,发送文件</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( (len = bis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭数据的输出(IO流是阻塞的)</span></span><br><span class="line">        <span class="comment">//会在流末尾写入一个标记,对方才能读到-1,否则对方的读取方法会一致阻塞</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.接收来自于服务器端的数据，并显示到控制台上</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">30</span>];</span><br><span class="line">        <span class="keyword">int</span> len2;</span><br><span class="line">        <span class="keyword">while</span> ( (len2 = is.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            baos.write(buf,<span class="number">0</span>,len2);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.资源的关闭</span></span><br><span class="line">        baos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        <span class="comment">//关闭socket, is,os意味着也关闭了</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serverTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建服务器端的ServerSocket，指明自己的端口号</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8989</span>);</span><br><span class="line">        <span class="comment">//2.调用accept()表示接收来自于客户端的socket</span></span><br><span class="line">        <span class="comment">//监听一个客服端的连接,该方法是个阻塞方法,若没有连接,会一直等待</span></span><br><span class="line">        Socket socket = ss.accept();</span><br><span class="line">        <span class="comment">//3.获取输入流</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        <span class="comment">//4.创建输出流,用于保存文件</span></span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"beauty_dest.jpg"</span>));</span><br><span class="line">        <span class="comment">//5.读取数据,保存文件到本地</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( (len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"照片已保存!"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.服务器端给予客户端反馈</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        os.write(<span class="string">"你好,美美,你发的照片已收到!"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.关闭资源</span></span><br><span class="line">        bos.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        <span class="comment">//不再接受任何客服端通信</span></span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-UDP网络编程"><a href="#二-UDP网络编程" class="headerlink" title="二:UDP网络编程"></a>二:UDP网络编程</h3><h4 id="1-UDP网络通信"><a href="#1-UDP网络通信" class="headerlink" title="1.UDP网络通信"></a>1.UDP网络通信</h4><ol><li>类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序。</li><li>UDP数据报通过数据报套接字 DatagramSocket 发送和接收，<strong>系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</strong></li><li>DatagramPacket 对象封装了UDP数据报，在数据报中包含了<strong>发送端的IP地址和端口号以及接收端的IP地址和端口号。</strong></li><li>UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接。如同发快递包裹一样。</li></ol><h4 id="2-DatagramSocket类"><a href="#2-DatagramSocket类" class="headerlink" title="2.DatagramSocket类"></a>2.DatagramSocket类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常用方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DatagramSocket</span><span class="params">(<span class="keyword">int</span> port)</span>创建数据报套接字并将其绑定到本地主机上的指定端口。套接字将被</span></span><br><span class="line"><span class="function">绑定到通配符地址，IP 地址由内核来选择。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DatagramSocket</span><span class="params">(<span class="keyword">int</span> port,InetAddress laddr)</span>创建数据报套接字，将其绑定到指定的本地地址。本地端口必须在 0 到 65535 之间（包括两者）。如果 IP 地址为 0.0.0.0，套接字将被绑定到通配符地址，IP 地址由内核选择。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>关闭此数据报套接字。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(DatagramPacket p)</span>从此套接字发送数据报包。DatagramPacket 包含的信息指示：将要发送的数据、其长度、远程主机的IP 地址和远程主机的端口号。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(DatagramPacket p)</span>从此套接字接收数据报包。当此方法返回时，DatagramPacket的缓冲区填充了接收的数据。数据报包也包含发送方的 IP 地址和发送方机器上的端口号。 此方法在接收到数据报前一直阻塞。数据报包对象的 length 字段包含所接收信息的长度。如果信息比包的长度长，该信息将被截短。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InetAddress <span class="title">getLocalAddress</span><span class="params">()</span>获取套接字绑定的本地地址。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLocalPort</span><span class="params">()</span>返回此套接字绑定的本地主机上的端口号。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InetAddress <span class="title">getInetAddress</span><span class="params">()</span>返回此套接字连接的地址。如果套接字未连接，则返回<span class="keyword">null</span>。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span>返回此套接字的端口。如果套接字未连接，则返回-1。</span></span><br></pre></td></tr></table></figure><h4 id="3-DatagramPacket类"><a href="#3-DatagramPacket类" class="headerlink" title="3.DatagramPacket类"></a>3.DatagramPacket类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常用方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DatagramPacket</span><span class="params">(<span class="keyword">byte</span>[] buf,<span class="keyword">int</span> length)</span>构造 DatagramPacket，用来接收长度为 length 的数据包。 length 参数必须小于等于 buf.length。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DatagramPacket</span><span class="params">(<span class="keyword">byte</span>[] buf,<span class="keyword">int</span> length,InetAddress address,<span class="keyword">int</span> port)</span>构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。length参数必须小于等于buf.length。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InetAddress <span class="title">getAddress</span><span class="params">()</span>返回某台机器的 IP 地址，此数据报将要发往该机器或者是从该机器接收到的。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span>返回某台远程主机的端口号，此数据报将要发往该主机或者是从该主机接收到的。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">byte</span>[] <span class="title">getData</span><span class="params">()</span>返回数据缓冲区。接收到的或将要发送的数据从缓冲区中的偏移量 offset 处开始，持续 length 长度。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span>返回将要发送或接收到的数据的长度。</span></span><br></pre></td></tr></table></figure><h4 id="4-流程"><a href="#4-流程" class="headerlink" title="4.流程"></a>4.流程</h4><ol><li>DatagramSocket 与 DatagramPacket</li><li>建立发送端,接受端</li><li>建立数据包</li><li>调用Socket的发送,接受方法</li><li>关闭Socket</li></ol><p><strong>发送端与接收端是两个独立的运行程序.</strong></p><h4 id="5-示例"><a href="#5-示例" class="headerlink" title="5.示例"></a>5.示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现UDP协议的网络编程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-10-20 17:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">senderTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建DatagramSocket对象</span></span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.创建数据包,存储数据</span></span><br><span class="line">            <span class="keyword">byte</span>[] data = <span class="string">"你好,我使用UDP传输数据给你了"</span>.getBytes();</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data, data.length, InetAddress.getLocalHost(), <span class="number">8989</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.发送数据包</span></span><br><span class="line">            socket.send(packet);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiverTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建DatagramSocket对象</span></span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket(<span class="number">8989</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.创建数据包,接受发送过来的数据,发送多少,存储多少</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer,<span class="number">0</span>, buffer.length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.接受数据,保存在packet中</span></span><br><span class="line">            socket.receive(packet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.打印输出接受到的数据</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(packet.getData(), <span class="number">0</span>, packet.getLength()));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-URL网络编程"><a href="#三-URL网络编程" class="headerlink" title="三:URL网络编程"></a>三:URL网络编程</h3><h4 id="1-URL类"><a href="#1-URL类" class="headerlink" title="1.URL类"></a>1.URL类</h4><ol><li><p><strong>URL(Uniform Resource Locator)：统一资源定位符，它表示 Internet 上 某一资源的地址。</strong></p></li><li><p>通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www，ftp站点。浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。</p></li><li><p>URL的基本结构由5部分组成：</p><ol><li><strong>&lt; 传输协议&gt;://&lt; 主机名&gt;:&lt; 端口号&gt;/&lt; 文件名&gt;# 片段名?参数列表</strong></li><li>片段名：即锚点，例如看小说，直接定位到章节</li><li>参数列表格式：参数名=参数值&amp;参数名=参数值….</li></ol></li><li><p>URL类构造器:</p><ol><li>public URL (String spec)：通过一个表示URL地址的字符串可以构造一个URL对象。例<br>如：URL url = new URL (“<a href="http://www.zhangligong.xyz/&quot;" target="_blank" rel="noopener">http://www.zhangligong.xyz/&quot;</a>);</li><li>public URL(URL context, String spec)：通过基 URL 和相对 URL 构造一个 URL 对象。<br>例如：URL downloadUrl = new URL(url, “download.html”)</li><li>public URL(String protocol, String host, String file); 例如：new URL(“http”,<br>“<a href="http://www.zhangligong.xyz&quot;" target="_blank" rel="noopener">www.zhangligong.xyz&quot;</a>, “download. html”);</li><li>public URL(String protocol, String host, int port, String file); 例如: URL gamelan = new<br>URL(“http”, “<a href="http://www.zhangligong.xyz&quot;" target="_blank" rel="noopener">www.zhangligong.xyz&quot;</a>, 80, “download.html”);</li></ol><p>URL类的构造器都声明抛出非运行时异常，必须要对这一异常进行处理，通常是用 try-catch 语句进行捕获。</p></li><li><p>URL类常用方法</p><ol><li><code>public String getProtocol( )</code> 获取该URL的协议名</li><li><code>public String getHost( )</code> 获取该URL的主机名</li><li><code>public String getPort( )</code> 获取该URL的端口号</li><li><code>public String getPath( )</code> <strong>获取该URL的文件路径</strong></li><li><code>public String getFile( )</code> 获取该URL的文件名</li><li><code>public String getQuery( )</code> <strong>获取该URL的查询名</strong></li></ol></li></ol><h4 id="2-URL类示例"><a href="#2-URL类示例" class="headerlink" title="2.URL类示例"></a>2.URL类示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="comment">// 获取URL对象的相关属性信息</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">"http://localhost:8080/helloworld/index.html?username=jack"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//          1.获取该URL的协议名</span></span><br><span class="line">            System.out.println(url.getProtocol());  <span class="comment">// http</span></span><br><span class="line"><span class="comment">//          2.获取该URL的主机名</span></span><br><span class="line">            System.out.println(url.getHost());    <span class="comment">// localhost</span></span><br><span class="line"><span class="comment">//          3.获取该URL的端口号</span></span><br><span class="line">            System.out.println(url.getPort());    <span class="comment">// 8080</span></span><br><span class="line"><span class="comment">//          4.获取该URL的文件路径</span></span><br><span class="line">            System.out.println(url.getPath());    <span class="comment">// /helloworld/index.html</span></span><br><span class="line"><span class="comment">//          5.获取该URL的文件名</span></span><br><span class="line">            System.out.println(url.getFile());    <span class="comment">// /helloworld/index.html?username=jack</span></span><br><span class="line"><span class="comment">//          6.获取该URL的查询名</span></span><br><span class="line">            System.out.println(url.getQuery());   <span class="comment">// username=jack</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="3-URLConnection类"><a href="#3-URLConnection类" class="headerlink" title="3.URLConnection类"></a>3.URLConnection类</h4><ol><li><strong>URL的方法 openStream()：能从网络上读取数据</strong></li><li>若希望输出数据，例如向服务器端的 CGI （公共网关接口-Common GatewayInterface-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一些数据，则必须先与URL建立连接，然后才能对其进行读写，此时需要使用URLConnection 。</li><li>URLConnection：<strong>表示到URL所引用的远程对象的连接。当与一个URL建立连接时，首先要在一个 URL 对象上通过方法 openConnection() 生成对应的 URLConnection对象。</strong>如果连接过程失败，将产生IOException.</li><li>通过URLConnection对象获取的<strong>输入流和输出流</strong>，即可以与现有的CGI程序进行交互。</li></ol><h4 id="4-URLConnection类示例"><a href="#4-URLConnection类示例" class="headerlink" title="4.URLConnection类示例"></a>4.URLConnection类示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取url定位的资源,保存到本地</span></span><br><span class="line"><span class="comment">//1.创建url对象</span></span><br><span class="line">       URL url = <span class="keyword">new</span> URL(<span class="string">"http://localhost:8080/helloworld/index.html?username=jack"</span>);</span><br><span class="line">       <span class="comment">//2.创建Http协议的rulConnection对象</span></span><br><span class="line">       HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line">       <span class="comment">//3.进行连接</span></span><br><span class="line">       urlConnection.connect();</span><br><span class="line">       <span class="comment">//4.获取输入流</span></span><br><span class="line">       InputStream is = urlConnection.getInputStream();</span><br><span class="line">       <span class="comment">//5.创建输出流</span></span><br><span class="line">       BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"index_dest.html"</span>));</span><br><span class="line">       <span class="comment">//6.数据处理,将数据保存到本地</span></span><br><span class="line">       <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="keyword">int</span> len;</span><br><span class="line">       <span class="keyword">while</span> ( (len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">           bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">"资源下载完成!"</span>);</span><br><span class="line">       <span class="comment">//7.关闭资源</span></span><br><span class="line">       bos.close();</span><br><span class="line">       is.close();</span><br><span class="line">       urlConnection.disconnect();</span><br></pre></td></tr></table></figure><h4 id="5-URI-URL-URN区别"><a href="#5-URI-URL-URN区别" class="headerlink" title="5.URI,URL,URN区别"></a>5.URI,URL,URN区别</h4><p><strong>URI，是uniform resource identifier，统一资源标识符</strong>，用来唯一的标识一个资源。而<strong>URL是uniform resource locator，统一资源定位符</strong>，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。而<strong>URN，uniform resource name，统一资源命名</strong>，是通过名字来标识资源，比如mailto:<a href="mailto:java-net@java.sun.com" target="_blank" rel="noopener">java-net@java.sun.com</a>。也就是说，<strong>URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。</strong></p><p>在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而<strong>URL类</strong>则不仅符合语义，还包含了定位该资源的信息，因此它<strong>不能是相对的</strong>。</p><h3 id="四-小结"><a href="#四-小结" class="headerlink" title="四:小结"></a>四:小结</h3><ol><li>计算机具有唯一的<strong>IP地址</strong>，这样不同的主机可以互相区分</li><li><strong>端口号</strong>是对一个服务的访问场所，它用于区分同一物理计算机上的多个服务。</li><li><strong>套接字</strong>用于连接客户端和服务器，客户端和服务器之间的每个通信会话使用一个不同的套接字。TCP协议用于实现面向连接的会话。</li><li>Java 用 <strong>InetAddress 对象</strong>表示 IP地址，该对象里有两个字段：主机名(String) 和 IP 地址(int)。</li><li><strong>类 Socket 和 ServerSocket</strong> 实现了基于TCP协议的客户端－服务器程序。Socket是客户端和服务器之间的一个连接，连接创建的细节被隐藏了。这个连接提供了一个<strong>安全的数据传输通道</strong>，这是因为 TCP 协议可以解决数据在传送过程中的丢失、损坏、重复、乱序以及网络拥挤等问题，它保证数据可靠的传送。</li><li><strong>类 URL 和 URLConnection</strong> 提供了最高级网络应用。URL 的网络资源的位置来同一表示Internet 上各种网络资源。通过URL对象可以创建当前应用程序和 URL 表示的网络资源之间的连接，这样当前程序就可以<strong>读取网络资源数据</strong>，或者把自己的数据传送到网络上去。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信要素</title>
      <link href="/2019/10/20/blog023/"/>
      <url>/2019/10/20/blog023/</url>
      
        <content type="html"><![CDATA[<h3 id="一-网络编程概述"><a href="#一-网络编程概述" class="headerlink" title="一:网络编程概述"></a>一:网络编程概述</h3><ol><li>Java提供的网络类库，可以实现无痛的网络连接，联网的底层细节被隐藏在 Java 的本机安装系统里，由 JVM 进行控制。并且 Java 实现了一个跨平台的网络库， <strong>程序员面对的是一个统一的网络编程环境。</strong></li><li>计算机网络: 把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、共享硬件、软件、数据信息等资源.</li><li>网络编程的目的: <strong>直接或间接地通过网络协议与其它计算机实现数据交换，进行通讯。</strong></li><li>主要问题: <ol><li><strong>如何准确地定位网络上一台或多台主机；定位主机上特定的应用.</strong></li><li><strong>找到主机后如何可靠高效地进行数据传输.</strong></li></ol></li></ol><h3 id="二-通信要素概述"><a href="#二-通信要素概述" class="headerlink" title="二:通信要素概述"></a>二:通信要素概述</h3><h4 id="1-如何实现网络中的主机互相通信"><a href="#1-如何实现网络中的主机互相通信" class="headerlink" title="1.如何实现网络中的主机互相通信"></a>1.如何实现网络中的主机互相通信</h4><ol><li><strong>通信双方地址: IP 和 端口号</strong></li><li><strong>网络通信协议: OSI参考模型 和 TCP/IP参考模型(协议)</strong></li></ol><h4 id="2-网络通信协议"><a href="#2-网络通信协议" class="headerlink" title="2.网络通信协议"></a>2.网络通信协议</h4><p><img src="/2019/10/20/blog023/hexo01.png" alt="网络通信协议"></p><h4 id="3-数据传输"><a href="#3-数据传输" class="headerlink" title="3.数据传输"></a>3.数据传输</h4><p><img src="/2019/10/20/blog023/hexo02.png" alt="数据传输"></p><h3 id="三-IP和端口号"><a href="#三-IP和端口号" class="headerlink" title="三:IP和端口号"></a>三:IP和端口号</h3><h4 id="1-IP地址-InetAddress"><a href="#1-IP地址-InetAddress" class="headerlink" title="1.IP地址: InetAddress"></a>1.IP地址: InetAddress</h4><ol><li>唯一的标识 Internet 上的计算机（通信实体）</li><li>本地回环地址(hostAddress)：127.0.0.1 主机名(hostName)：localhost</li><li>IP地址分类方式1：<strong>IPV4 和 IPV6</strong><ol><li>IPV4: 4个字节组成,4个0-255. 2011年初已经用尽.以点分十进制表示,如192.168.0.1</li><li>IPV6: 16个字节组成, 128位,写成8个无符号整数, 每个整数用四个十六进制位表示,数之间用冒号(:)分开,如3ffe:3201:1401:1280:c8ff:fe4d:db39:1984</li></ol></li><li>IP地址分类方式2： <strong>公网地址( 万维网使用)和 私有地址( 局域网使用)。192.168.开头的就是私有址址，范围即为192.168.0.0–192.168.255.255，专门为组织机构内部使用</strong></li></ol><h4 id="2-端口号"><a href="#2-端口号" class="headerlink" title="2.端口号"></a>2.端口号</h4><ol><li>标识正在计算机上运行的进程（程序）,不同的进程有不同的端口号</li><li>被规定为一个 16 位的整数 0~65535</li><li>端口分类:<ol><li><strong>公认端口：0~1023</strong>。被预先定义的服务通信占用（如：HTTP占用端口80，FTP占用端口21，Telnet占用端口23）</li><li><strong>注册端口：1024~49151</strong>。分配给用户进程或应用程序。（如：Tomcat占用端口8080，MySQL占用端口3306，Oracle占用端口1521等）</li><li><strong>动态/ 私有端口：49152~65535</strong>.</li></ol></li></ol><p><strong>IP地址与端口号的组合得出一个网络套接字：Socket。</strong></p><h4 id="3-InetAddress类"><a href="#3-InetAddress类" class="headerlink" title="3.InetAddress类"></a>3.InetAddress类</h4><ol><li><p>Internet上的主机有两种方式表示地址：</p><p><strong>域名(hostName)</strong>：<a href="http://www.zhangligong.xyz" target="_blank" rel="noopener">www.zhangligong.xyz</a><br><strong>IP 地址(hostAddress)</strong>：220.250.64.225</p></li><li><p>InetAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address。</p></li><li><p>域名容易记忆，当在连接网络时输入一个主机的域名后，<strong>域名服务器(DNS)负责将域名转化成IP地址</strong>，这样才能和主机建立连接。(先找本机hosts，是否有输入的域名地址，没有的话，再通过DNS服务器，找主机。) ——- <strong>域名解析</strong></p></li><li><p>InetAddress 类没有提供公共的构造器，而是提供了如下几个静态方法来获取InetAddress 实例</p><p><code>public static InetAddress getLocalHost()</code><br><code>public static InetAddress getByName(String host)</code></p></li><li><p>InetAddress 提供了如下几个常用的方法</p><p><strong>public String getHostAddress()</strong> ：返回 IP 地址字符串（以文本表现形式）。<br><strong>public String getHostName()</strong> ：获取此 IP 地址的主机名<br><strong>public boolean isReachable(int timeout)</strong>： ：测试是否可以达到该地址</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一、网络编程中有两个主要的问题：</span></span><br><span class="line"><span class="comment"> * 1.如何准确地定位网络上一台或多台主机；定位主机上的特定的应用</span></span><br><span class="line"><span class="comment"> * 2.找到主机后如何可靠高效地进行数据传输</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 二、网络编程中的两个要素：</span></span><br><span class="line"><span class="comment"> * 1.对应问题一：IP和端口号</span></span><br><span class="line"><span class="comment"> * 2.对应问题二：提供网络通信协议：TCP/IP参考模型（应用层、传输层、网络层、物理+数据链路层）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 三、通信要素一：IP和端口号</span></span><br><span class="line"><span class="comment"> * 1. IP:唯一的标识 Internet 上的计算机（通信实体）</span></span><br><span class="line"><span class="comment"> * 2. 在Java中使用InetAddress类代表IP</span></span><br><span class="line"><span class="comment"> * 3. IP分类：IPv4 和 IPv6 ; 万维网 和 局域网</span></span><br><span class="line"><span class="comment"> * 4. 域名:   www.baidu.com   www.mi.com  www.sina.com  www.jd.com</span></span><br><span class="line"><span class="comment"> *            www.vip.com</span></span><br><span class="line"><span class="comment"> * 5. 本地回路地址：127.0.0.1 对应着：localhost</span></span><br><span class="line"><span class="comment"> * 6. 如何实例化InetAddress:两个方法：getByName(String host) 、 getLocalHost()</span></span><br><span class="line"><span class="comment"> *        两个常用方法：getHostName() / getHostAddress()</span></span><br><span class="line"><span class="comment"> * 7. 端口号：正在计算机上运行的进程。</span></span><br><span class="line"><span class="comment"> * 要求：不同的进程有不同的端口号</span></span><br><span class="line"><span class="comment"> * 范围：被规定为一个 16 位的整数 0~65535。</span></span><br><span class="line"><span class="comment"> * 8. 端口号与IP地址的组合得出一个网络套接字：Socket</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-10-16 1:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAdressTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ipTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//根据域名返回InetAddress对象</span></span><br><span class="line">            InetAddress inet = InetAddress.getByName(<span class="string">"zhangligong.com"</span>);</span><br><span class="line">            System.out.println(inet);   <span class="comment">// zhangligong.com/220.250.64.225</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取本地ip</span></span><br><span class="line">            InetAddress lh = InetAddress.getByName(<span class="string">"localhost"</span>);</span><br><span class="line">            System.out.println(lh);  <span class="comment">// localhost/127.0.0.1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取本地ip</span></span><br><span class="line">            InetAddress localHost = InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(localHost);  <span class="comment">// IT-Xiaobai/169.254.34.219</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取IP名</span></span><br><span class="line">            String hostName = localHost.getHostName();</span><br><span class="line">            System.out.println(hostName);   <span class="comment">// IT-Xiaobai</span></span><br><span class="line">            <span class="comment">//获取IP地址</span></span><br><span class="line">            String hostAddress = localHost.getHostAddress();</span><br><span class="line">            System.out.println(hostAddress);    <span class="comment">// 169.254.34.219</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="四-通信协议"><a href="#四-通信协议" class="headerlink" title="四:通信协议"></a>四:通信协议</h3><p><strong>计算机网络中实现通信必须有一些约定，即通信协议，对速率、传输代码、代码结构、传输控制步骤、出错控制等制定标准。</strong></p><h4 id="1-TCP-IP协议簇"><a href="#1-TCP-IP协议簇" class="headerlink" title="1.TCP/IP协议簇"></a>1.TCP/IP协议簇</h4><ol><li>传输层协议中有两个非常重要的协议：<strong>传输控制协议TCP(Transmission Control Protocol) 和 用户数据报协议UDP(User Datagram Protocol)</strong>。</li><li><strong>TCP/IP  以其两个主要协议：传输控制协议(TCP) 和网络互联协议(IP)</strong>而得名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。</li><li>IP(Internet Protocol)协议是<strong>网络层</strong>的主要协议，支持网间互连的数据通信。</li><li>TCP/IP协议模型从更实用的角度出发，形成了高效的四层体系结构，即 <strong>物理链路层、IP 层、传输层和应用层。</strong></li></ol><h4 id="2-TCP协议"><a href="#2-TCP协议" class="headerlink" title="2.TCP协议"></a>2.TCP协议</h4><ol><li>使用TCP协议前，须先<strong>建立TCP连接，形成传输数据通道</strong></li><li>传输前，采用“ <strong>三次握手</strong>”方式，<strong>点对点通信，是可靠的</strong></li><li>TCP协议进行通信的两个应用进程：<strong>客户端、服务端</strong></li><li>在连接中可<strong>进行大数据量的传输</strong></li><li>传输完毕，需<strong>释放已建立的连接，效率低</strong></li></ol><h4 id="3-UDP协议"><a href="#3-UDP协议" class="headerlink" title="3.UDP协议"></a>3.UDP协议</h4><ol><li>将数据、源、目的封装成数据包，<strong>不需要建立连接</strong></li><li>每个数据报的大小<strong>限制在64K内</strong></li><li>发送不管对方是否准备好，接收方收到也不确认，故是<strong>不可靠的</strong></li><li>可以广播发送</li><li>发送数据结束时<strong>无需释放资源，开销小，速度快</strong></li></ol><h4 id="4-TCP三次握手"><a href="#4-TCP三次握手" class="headerlink" title="4.TCP三次握手"></a>4.TCP三次握手</h4><p><img src="/2019/10/20/blog023/hexo03.png" alt="TCP三次握手"></p><h4 id="5-TCP四次挥手"><a href="#5-TCP四次挥手" class="headerlink" title="5.TCP四次挥手"></a>5.TCP四次挥手</h4><p><img src="/2019/10/20/blog023/hexo04.png" alt="TCP四次挥手"></p><h4 id="6-Socket套接字"><a href="#6-Socket套接字" class="headerlink" title="6.Socket套接字"></a>6.Socket套接字</h4><ol><li><p><strong>网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符套接字。</strong></p></li><li><p>通信的两端都要有Socket，是两台机器间通信的端点。网络通信其实就是Socket间的通信。</p></li><li><p>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。</p></li><li><p>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端。</p></li><li><p>Socket分类：</p><ol><li><strong>流套接字（stream socket）：使用TCP提供可依赖的字节流服务</strong></li><li><strong>数据报套接字（datagram socket）：使用UDP提供“尽力而为”的数据报服务</strong></li></ol></li><li><p>常用API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Socket 类的常用构造器 ：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Socket</span><span class="params">(InetAddress address,<span class="keyword">int</span> port)</span>创建一个流套接字并将其连接到指定IP地址的指定端口号。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Socket</span><span class="params">(String host,<span class="keyword">int</span> port)</span>创建一个流套接字并将其连接到指定主机上的指定端口号。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// Socket 类的常用方法：</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">()</span>返回此套接字的输入流。可以用于接收网络消息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OutputStream <span class="title">getOutputStream</span><span class="params">()</span>返回此套接字的输出流。可以用于发送网络消息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InetAddress <span class="title">getInetAddress</span><span class="params">()</span>此套接字连接到的远程 IP 地址；如果套接字是未连接的，则返回 <span class="keyword">null</span>。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InetAddress <span class="title">getLocalAddress</span><span class="params">()</span>获取套接字绑定的本地地址。 即本端的IP地址</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span>此套接字连接到的远程端口号；如果尚未连接套接字，则返回0。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLocalPort</span><span class="params">()</span>返回此套接字绑定到的本地端口。 如果尚未绑定套接字，则返回-1。即本端的端口号。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>关闭此套接字。套接字被关闭后，便不可在以后的网络连接中使用（即无法重新连接或重新绑定）。需要创建新的套接字对象。 关闭此套接字也将会关闭该套接字的InputStream 和OutputStream。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdownInput</span><span class="params">()</span>如果在套接字上调用 <span class="title">shutdownInput</span><span class="params">()</span> 后从套接字输入流读取内容，则流将返回 EOF（文件结束符）。即不能在从此套接字的输入流中接收任何数据。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdownOutput</span><span class="params">()</span>禁用此套接字的输出流。对于 TCP 套接字，任何以前写入的数据都将被发送，并且后跟 TCP 的正常连接终止序列。 如果在套接字上调用 <span class="title">shutdownOutput</span><span class="params">()</span> 后写入套接字输出流，则该流将抛出 IOException。 即不能通过此套接字的输出流发送任何数据。</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NIO.2概念及相关类的使用</title>
      <link href="/2019/10/19/blog022/"/>
      <url>/2019/10/19/blog022/</url>
      
        <content type="html"><![CDATA[<h3 id="NIO概述"><a href="#NIO概述" class="headerlink" title="NIO概述"></a>NIO概述</h3><ol><li>Java NIO (New IO，Non-Blocking IO)是从Java 1.4版本开始引入的一套新的IO API，可以替代标准的Java IO API。NIO与原来的IO有同样的作用和目的，但是使用的方式完全不同，<strong>NIO支持面向缓冲区的(IO是面向流的)、基于通道的IO操作。</strong>NIO将以更加高效的方式进行文件的读写操作。</li><li>Java API中提供了两套NIO，<strong>一套是针对标准输入输出NIO，另一套就是网络编程NIO。</strong><ol><li><code>java.nio.channels.Channel</code><ol><li>FileChannel: 处理本地文件  (标准输入输出NIO)</li><li>SocketChannel: TCP网络编程的客户端的Channel</li><li>ServerSocketChannel: TCP网络编程的服务器端的Channel</li><li>DatagramChannel：UDP网络编程中发送端和接收端的Channel</li></ol></li></ol></li><li>随着 <strong>JDK 7 的发布</strong>，Java对NIO进行了极大的扩展，增强了对文件处理和文件系统特性的支持，以至于我们称他们为 NIO.2。</li></ol><h3 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h3><ol><li>早期java只提供了File类访问文件系统,File类功能有限,提供的性能也不高,并且<strong>大多数方法在出错时仅返回失败，并不会提供异常信息</strong>.</li><li>NIO.2为了弥补不足,引入了<strong>Path接口</strong>,代表一个平台无关的平台路径,扫描了目录结构中文件的置.<strong>Path可以看成是File类的升级版本，实际引用的资源也可以不存在。</strong></li><li>NIO.2在java.nio.file包下还提供了<strong>Files、Paths工具类</strong>，<strong>Files包含了大量静态的工具方法来操作文件；Paths则包含了两个返回Path的静态工厂方法。</strong></li><li>Paths 类提供的静态 get() 方法用来获取 Path 对象：<ol><li><code>static Path get(String first, String … more)</code> : 用于将多个字符串串连成路径</li><li><code>static Path get(URI uri)</code>: 返回指定uri对应的Path路径</li></ol></li><li>示例:<ol><li><code>import java.io.File;</code><br><code>File file = new File(&quot;index.html&quot;);</code></li><li><code>import java.nio.file.Path;</code><br><code>import java.nio.file.Paths;</code><br><code>Path path = Paths.get(&quot;index.html&quot;);</code></li></ol></li></ol><h3 id="Path接口"><a href="#Path接口" class="headerlink" title="Path接口"></a>Path接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Path常用方法</span></span><br><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span> ： 返回调用 Path 对象的字符串表示形式</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String path)</span> : 判断是否以 path 路径开始</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String path)</span> : 判断是否以 path 路径结束</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAbsolute</span><span class="params">()</span> : 判断是否是绝对路径</span></span><br><span class="line"><span class="function">Path <span class="title">getParent</span><span class="params">()</span> ：返回Path对象包含整个路径，不包含 Path 对象指定的文件路径</span></span><br><span class="line"><span class="function">Path <span class="title">getRoot</span><span class="params">()</span> ：返回调用 Path 对象的根路径</span></span><br><span class="line"><span class="function">Path <span class="title">getFileName</span><span class="params">()</span> : 返回与调用 Path 对象关联的文件名</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNameCount</span><span class="params">()</span> : 返回Path 根目录后面元素的数量</span></span><br><span class="line"><span class="function">Path <span class="title">getName</span><span class="params">(<span class="keyword">int</span> idx)</span> : 返回指定索引位置 idx 的路径名称</span></span><br><span class="line"><span class="function">Path <span class="title">toAbsolutePath</span><span class="params">()</span> : 作为绝对路径返回调用 Path 对象<span class="params">(***)</span></span></span><br><span class="line"><span class="function">Path <span class="title">resolve</span><span class="params">(Path p)</span> :合并两个路径，返回合并后的路径对应的Path对象</span></span><br><span class="line"><span class="function">File <span class="title">toFile</span><span class="params">()</span>: 将Path转化为File类的对象<span class="params">(***)</span></span></span><br></pre></td></tr></table></figure><h3 id="Files类"><a href="#Files类" class="headerlink" title="Files类"></a>Files类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.nio.file.Files  用于操作文件或目录的工具类。</span></span><br><span class="line"><span class="comment">// Files 常用方法：</span></span><br><span class="line"><span class="function">Path <span class="title">copy</span><span class="params">(Path src, Path dest, CopyOption … how)</span> : 文件的复制</span></span><br><span class="line"><span class="function">Path <span class="title">createDirectory</span><span class="params">(Path path, FileAttribute&lt;?&gt; … attr)</span> : 创建一个目录<span class="params">(***)</span></span></span><br><span class="line"><span class="function">Path <span class="title">createFile</span><span class="params">(Path path, FileAttribute&lt;?&gt; … arr)</span> : 创建一个文件<span class="params">(***)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Path path)</span> : 删除一个文件/目录，如果不存在，执行报错</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteIfExists</span><span class="params">(Path path)</span> : Path对应的文件/目录如果存在，执行删除<span class="params">(***)</span></span></span><br><span class="line"><span class="function">Path <span class="title">move</span><span class="params">(Path src, Path dest, CopyOption…how)</span> : 将 src 移动到 dest 位置</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">size</span><span class="params">(Path path)</span> : 返回 path 指定文件的大小<span class="params">(***)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// Files 常用方法：用于判断</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(Path path, LinkOption … opts)</span> : 判断文件是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">(Path path, LinkOption … opts)</span> : 判断是否是目录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isRegularFile</span><span class="params">(Path path, LinkOption … opts)</span> : 判断是否是文件</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isHidden</span><span class="params">(Path path)</span> : 判断是否是隐藏文件</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isReadable</span><span class="params">(Path path)</span> : 判断文件是否可读</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isWritable</span><span class="params">(Path path)</span> : 判断文件是否可写</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">notExists</span><span class="params">(Path path, LinkOption … opts)</span> : 判断文件是否不存在</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// Files 常用方法：用于操作内容</span></span></span><br><span class="line"><span class="function">SeekableByteChannel <span class="title">newByteChannel</span><span class="params">(Path path, OpenOption…how)</span> : 获取与指定文件的连接，how 指定打开方式。</span></span><br><span class="line"><span class="function">DirectoryStream&lt;Path&gt; <span class="title">newDirectoryStream</span><span class="params">(Path path)</span> : 打开 path 指定的目录</span></span><br><span class="line"><span class="function">InputStream <span class="title">newInputStream</span><span class="params">(Path path, OpenOption…how)</span>:获取 InputStream 对象</span></span><br><span class="line"><span class="function">OutputStream <span class="title">newOutputStream</span><span class="params">(Path path, OpenOption…how)</span> : 获取 OutputStream 对象</span></span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="Path接口示例"><a href="#Path接口示例" class="headerlink" title="Path接口示例"></a>Path接口示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.jdk 7.0 时，引入了 Path、Paths、Files三个类。</span></span><br><span class="line"><span class="comment"> * 2.此三个类声明在：java.nio.file包下。</span></span><br><span class="line"><span class="comment"> * 3.Path可以看做是java.io.File类的升级版本。也可以表示文件或文件目录，与平台无关</span></span><br><span class="line"><span class="comment"> * 4.如何实例化Path:使用Paths.</span></span><br><span class="line"><span class="comment"> * static Path get(String first, String … more) : 用于将多个字符串串连成路径</span></span><br><span class="line"><span class="comment"> * static Path get(URI uri): 返回指定uri对应的Path路径</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 下午 2:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如何使用Paths实例化Path</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Path path1 = Paths.get(<span class="string">"d:\\nio\\hello.txt"</span>);<span class="comment">//new File(String filepath)</span></span><br><span class="line"></span><br><span class="line">        Path path2 = Paths.get(<span class="string">"d:\\"</span>, <span class="string">"nio\\hello.txt"</span>);<span class="comment">//new File(String parent,String filename);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(path1);</span><br><span class="line">        System.out.println(path2);</span><br><span class="line"></span><br><span class="line">        Path path3 = Paths.get(<span class="string">"d:\\"</span>, <span class="string">"nio"</span>);</span><br><span class="line">        System.out.println(path3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Path中的常用方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Path path1 = Paths.get(<span class="string">"d:\\"</span>, <span class="string">"nio\\nio1\\nio2\\hello.txt"</span>);</span><br><span class="line">        Path path2 = Paths.get(<span class="string">"hello.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//String toString() ： 返回调用 Path 对象的字符串表示形式</span></span><br><span class="line">        System.out.println(path1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean startsWith(String path) : 判断是否以 path 路径开始</span></span><br><span class="line">        System.out.println(path1.startsWith(<span class="string">"d:\\nio"</span>));</span><br><span class="line"><span class="comment">//boolean endsWith(String path) : 判断是否以 path 路径结束</span></span><br><span class="line">        System.out.println(path1.endsWith(<span class="string">"hello.txt"</span>));</span><br><span class="line"><span class="comment">//boolean isAbsolute() : 判断是否是绝对路径</span></span><br><span class="line">        System.out.println(path1.isAbsolute() + <span class="string">"~"</span>);</span><br><span class="line">        System.out.println(path2.isAbsolute() + <span class="string">"~"</span>);</span><br><span class="line"><span class="comment">//Path getParent() ：返回Path对象包含整个路径，不包含 Path 对象指定的文件路径</span></span><br><span class="line">        System.out.println(path1.getParent());</span><br><span class="line">        System.out.println(path2.getParent());</span><br><span class="line"><span class="comment">//Path getRoot() ：返回调用 Path 对象的根路径</span></span><br><span class="line">        System.out.println(path1.getRoot());</span><br><span class="line">        System.out.println(path2.getRoot());</span><br><span class="line"><span class="comment">//Path getFileName() : 返回与调用 Path 对象关联的文件名</span></span><br><span class="line">        System.out.println(path1.getFileName() + <span class="string">"~"</span>);</span><br><span class="line">        System.out.println(path2.getFileName() + <span class="string">"~"</span>);</span><br><span class="line"><span class="comment">//int getNameCount() : 返回Path 根目录后面元素的数量</span></span><br><span class="line"><span class="comment">//Path getName(int idx) : 返回指定索引位置 idx 的路径名称</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; path1.getNameCount(); i++) &#123;</span><br><span class="line">            System.out.println(path1.getName(i) + <span class="string">"*****"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Path toAbsolutePath() : 作为绝对路径返回调用 Path 对象</span></span><br><span class="line">        System.out.println(path1.toAbsolutePath());</span><br><span class="line">        System.out.println(path2.toAbsolutePath());</span><br><span class="line"><span class="comment">//Path resolve(Path p) :合并两个路径，返回合并后的路径对应的Path对象</span></span><br><span class="line">        Path path3 = Paths.get(<span class="string">"d:\\"</span>, <span class="string">"nio"</span>);</span><br><span class="line">        Path path4 = Paths.get(<span class="string">"nioo\\hi.txt"</span>);</span><br><span class="line">        path3 = path3.resolve(path4);</span><br><span class="line">        System.out.println(path3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//File toFile(): 将Path转化为File类的对象</span></span><br><span class="line">        File file = path1.toFile();<span class="comment">//Path---&gt;File的转换</span></span><br><span class="line"></span><br><span class="line">        Path newPath = file.toPath();<span class="comment">//File---&gt;Path的转换</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Files类示例"><a href="#Files类示例" class="headerlink" title="Files类示例"></a>Files类示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SeekableByteChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Files工具类的使用：操作文件或目录的工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 下午 2:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilesTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">Path path1 = Paths.get(<span class="string">"d:\\nio"</span>, <span class="string">"hello.txt"</span>);</span><br><span class="line">Path path2 = Paths.get(<span class="string">"atguigu.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Path copy(Path src, Path dest, CopyOption … how) : 文件的复制</span></span><br><span class="line"><span class="comment">//要想复制成功，要求path1对应的物理上的文件存在。path1对应的文件没有要求。</span></span><br><span class="line"><span class="comment">//Files.copy(path1, path2, StandardCopyOption.REPLACE_EXISTING);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Path createDirectory(Path path, FileAttribute&lt;?&gt; … attr) : 创建一个目录</span></span><br><span class="line"><span class="comment">//要想执行成功，要求path对应的物理上的文件目录不存在。一旦存在，抛出异常。</span></span><br><span class="line">Path path3 = Paths.get(<span class="string">"d:\\nio\\nio1"</span>);</span><br><span class="line"><span class="comment">//Files.createDirectory(path3);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Path createFile(Path path, FileAttribute&lt;?&gt; … arr) : 创建一个文件</span></span><br><span class="line"><span class="comment">//要想执行成功，要求path对应的物理上的文件不存在。一旦存在，抛出异常。</span></span><br><span class="line">Path path4 = Paths.get(<span class="string">"d:\\nio\\hi.txt"</span>);</span><br><span class="line"><span class="comment">//Files.createFile(path4);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void delete(Path path) : 删除一个文件/目录，如果不存在，执行报错</span></span><br><span class="line"><span class="comment">//Files.delete(path4);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void deleteIfExists(Path path) : Path对应的文件/目录如果存在，执行删除.如果不存在，正常执行结束</span></span><br><span class="line">Files.deleteIfExists(path3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Path move(Path src, Path dest, CopyOption…how) : 将 src 移动到 dest 位置</span></span><br><span class="line"><span class="comment">//要想执行成功，src对应的物理上的文件需要存在，dest对应的文件没有要求。</span></span><br><span class="line"><span class="comment">//Files.move(path1, path2, StandardCopyOption.ATOMIC_MOVE);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//long size(Path path) : 返回 path 指定文件的大小</span></span><br><span class="line"><span class="keyword">long</span> size = Files.size(path2);</span><br><span class="line">System.out.println(size);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">Path path1 = Paths.get(<span class="string">"d:\\nio"</span>, <span class="string">"hello.txt"</span>);</span><br><span class="line">Path path2 = Paths.get(<span class="string">"atguigu.txt"</span>);</span><br><span class="line"><span class="comment">//boolean exists(Path path, LinkOption … opts) : 判断文件是否存在</span></span><br><span class="line">System.out.println(Files.exists(path2, LinkOption.NOFOLLOW_LINKS));</span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean isDirectory(Path path, LinkOption … opts) : 判断是否是目录</span></span><br><span class="line"><span class="comment">//不要求此path对应的物理文件存在。</span></span><br><span class="line">System.out.println(Files.isDirectory(path1, LinkOption.NOFOLLOW_LINKS));</span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean isRegularFile(Path path, LinkOption … opts) : 判断是否是文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean isHidden(Path path) : 判断是否是隐藏文件</span></span><br><span class="line"><span class="comment">//要求此path对应的物理上的文件需要存在。才可判断是否隐藏。否则，抛异常。</span></span><br><span class="line"><span class="comment">//System.out.println(Files.isHidden(path1));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean isReadable(Path path) : 判断文件是否可读</span></span><br><span class="line">System.out.println(Files.isReadable(path1));</span><br><span class="line"><span class="comment">//boolean isWritable(Path path) : 判断文件是否可写</span></span><br><span class="line">System.out.println(Files.isWritable(path1));</span><br><span class="line"><span class="comment">//boolean notExists(Path path, LinkOption … opts) : 判断文件是否不存在</span></span><br><span class="line">System.out.println(Files.notExists(path1, LinkOption.NOFOLLOW_LINKS));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * StandardOpenOption.READ:表示对应的Channel是可读的。</span></span><br><span class="line"><span class="comment"> * StandardOpenOption.WRITE：表示对应的Channel是可写的。</span></span><br><span class="line"><span class="comment"> * StandardOpenOption.CREATE：如果要写出的文件不存在，则创建。如果存在，忽略</span></span><br><span class="line"><span class="comment"> * StandardOpenOption.CREATE_NEW：如果要写出的文件不存在，则创建。如果存在，抛异常</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart 邮箱：shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">Path path1 = Paths.get(<span class="string">"d:\\nio"</span>, <span class="string">"hello.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//InputStream newInputStream(Path path, OpenOption…how):获取 InputStream 对象</span></span><br><span class="line">InputStream inputStream = Files.newInputStream(path1, StandardOpenOption.READ);</span><br><span class="line"></span><br><span class="line"><span class="comment">//OutputStream newOutputStream(Path path, OpenOption…how) : 获取 OutputStream 对象</span></span><br><span class="line">OutputStream outputStream = Files.newOutputStream(path1, StandardOpenOption.WRITE,StandardOpenOption.CREATE);</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"><span class="comment">//SeekableByteChannel newByteChannel(Path path, OpenOption…how) : 获取与指定文件的连接，how 指定打开方式。</span></span><br><span class="line">SeekableByteChannel channel = Files.newByteChannel(path1, StandardOpenOption.READ,StandardOpenOption.WRITE,StandardOpenOption.CREATE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//DirectoryStream&lt;Path&gt;  newDirectoryStream(Path path) : 打开 path 指定的目录</span></span><br><span class="line">Path path2 = Paths.get(<span class="string">"e:\\teach"</span>);</span><br><span class="line">DirectoryStream&lt;Path&gt; directoryStream = Files.newDirectoryStream(path2);</span><br><span class="line">Iterator&lt;Path&gt; iterator = directoryStream.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用jar包"><a href="#使用jar包" class="headerlink" title="使用jar包"></a>使用jar包</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用commons-io.jar包中的工具类FileUtils类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 上午 11:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtilsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用FailUtils类实现非文本的复制</span></span><br><span class="line">        File srcFile = <span class="keyword">new</span> File(<span class="string">"day10\\爱情与友情.jpg"</span>);</span><br><span class="line">        File destFile = <span class="keyword">new</span> File(<span class="string">"day10\\爱情与友情2.jpg"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyFile(srcFile,destFile);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机存取文件流</title>
      <link href="/2019/10/19/blog021/"/>
      <url>/2019/10/19/blog021/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li>RandomAccessFile声明在<code>java.io</code>包下，但直接继承<strong>Object类</strong>。并实现了<code>DataInput，DataOutput</code>这两个接口，意味着该类既可以读也可以写。</li><li>RandomAccessFile类支持”<strong>随机访问</strong>“的方式，程序可直接跳到文件的任意位置来读，写文件。<ol><li>支持只访问文件的部分内容</li><li>可以向已存在的文件后追加内容</li></ol></li><li>RandomAccessFile对象包含一个记录指针，用以标示当前读写的位置。RandomAccessFile类对象可以自由移动记录指针：<ol><li><code>long getFilePointer()</code>：获取文件记录指针的<strong>当前位置</strong></li><li><code>void seek(long pos)</code>：将文件记录指针<strong>定位</strong>到pos位置</li></ol></li></ol><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><ol><li>构造器<ol><li><code>public RandomAccessFile(File file, String mode)</code></li><li><code>public RandomAccessFile(String name, String mode)</code></li></ol></li><li>创建 RandomAccessFile 类实例需要指定一个 mode 参数，该参数指定 RandomAccessFile 的访问模式：<ol><li>r:  以<strong>只读方式</strong>打开</li><li>rw ：打开以<strong>读取和写入</strong></li><li>rwd: 打开以读取和 写入；同步文件内容的更新</li><li>rws: 打开以便读取和 写入； 同步文件内容和元数据的更新</li></ol></li><li>如果模式为<strong>只读r</strong>。则不会创建文件，而是会去读取一个已经存在的文件，如果读取的文件不存在则会出现异常。 如果模式为<strong>rw读写</strong>。如果文件不存在则会去创建文件，如果存在则不会创建。</li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="实现对图片的复制操作"><a href="#实现对图片的复制操作" class="headerlink" title="实现对图片的复制操作"></a>实现对图片的复制操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile raf = <span class="keyword">null</span>;</span><br><span class="line">      RandomAccessFile raf2 = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          raf = <span class="keyword">new</span> RandomAccessFile(<span class="string">"爱情与友情.jpg"</span>, <span class="string">"r"</span>);</span><br><span class="line">          raf2 = <span class="keyword">new</span> RandomAccessFile(<span class="string">"爱情与友情raf.jpg"</span>, <span class="string">"rw"</span>);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">          <span class="keyword">int</span> len;</span><br><span class="line">          <span class="keyword">while</span> ( (len = raf.read(buffer)) !=-<span class="number">1</span>)&#123;</span><br><span class="line">              raf2.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (raf != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  raf.close();</span><br><span class="line">              &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (raf2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  raf2.close();</span><br><span class="line">              &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h4 id="在原有内容某处进行数据插入操作"><a href="#在原有内容某处进行数据插入操作" class="headerlink" title="在原有内容某处进行数据插入操作"></a>在原有内容某处进行数据插入操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile raf = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            raf = <span class="keyword">new</span> RandomAccessFile(<span class="string">"hello.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">            <span class="comment">// 将从4个字符开始后的内容复制</span></span><br><span class="line">            raf.seek(<span class="number">3</span>);</span><br><span class="line">            <span class="comment">// 方式一</span></span><br><span class="line"><span class="comment">//            保存指针3后面的所有数据到StringBuilder中</span></span><br><span class="line">            <span class="comment">/*StringBuilder sb = new StringBuilder((int)new File("hello.txt").length());</span></span><br><span class="line"><span class="comment">            byte[] buffer = new byte[1024];</span></span><br><span class="line"><span class="comment">            int len;</span></span><br><span class="line"><span class="comment">            while ( (len = raf.read(buffer)) != -1)&#123;</span></span><br><span class="line"><span class="comment">                sb.append(new String(buffer,0,len));</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            <span class="comment">// 方式二</span></span><br><span class="line">            baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = raf.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//再次将指针调到角标为3的位置</span></span><br><span class="line">            raf.seek(<span class="number">3</span>);</span><br><span class="line">            <span class="comment">//在原有内容上进行覆盖操作，并不会覆盖原文件的所有内容</span></span><br><span class="line">            raf.write(<span class="string">"xyz"</span>.getBytes());</span><br><span class="line">            <span class="comment">//写入复制的内容</span></span><br><span class="line">            <span class="comment">// 方式一</span></span><br><span class="line">            <span class="comment">//将StringBuilder中的数据写入到文件中</span></span><br><span class="line"><span class="comment">//            raf.write(sb.toString().getBytes());</span></span><br><span class="line">            <span class="comment">// 方式二</span></span><br><span class="line">            raf.write(baos.toString().getBytes());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (baos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (raf != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    raf.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象流(处理流)</title>
      <link href="/2019/10/14/blog020/"/>
      <url>/2019/10/14/blog020/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li><p><code>ObjectInputStream</code>和<code>OjbectOutputSteam</code></p><p>用于存储和读取 <strong>基本数据类型</strong>数据或 <strong>对象</strong>的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</p></li><li><p><strong>序列化</strong>：用<code>ObjectOutputStream</code>类 <strong>保存</strong>基本类型数据或对象的机制 (<strong>数据转为二进制流</strong>)</p></li><li><p><strong>反序列化</strong>：用<code>ObjectInputStream</code>类 <strong>读取</strong>基本类型数据或对象的机制 (<strong>二进制流还原为数据</strong>)</p></li><li><p><code>ObjectOutputStream</code>和<code>ObjectInputStream</code>不能序列化<strong><code>static</code></strong>和<strong><code>transient</code></strong>修饰的成员变量</p></li></ol><h3 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h3><ol><li><p>对象序列化机制允许把内存中的<strong>Java对象</strong>转换成平台无关的<strong>二进制流</strong>，从而允许把这种二进制流持久地<strong>保存在磁盘</strong>上，或通过网络将这种二进制流<strong>传输到另一个网络节点</strong>。(反序列化)当其它程序获取了这种二进制流，就可以恢复成原来的Java对象</p></li><li><p>序列化的好处在于可将任何实现了<code>Serializable</code>接口的<strong>对象转化为 字节数据</strong>，使其在<strong>保存和传输</strong>时可被还原</p></li><li><p>序列化是 RMI（Remote Method Invoke – 远程方法调用）过程的参数和返回值都必须实现的机制，而 RMI 是 JavaEE 的基础。因此序列化机制是JavaEE 平台的基础</p></li><li><p>如果需要让某个对象支持序列化机制，则必须让对象所属的<strong>类及其属性</strong>是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一。否则，会抛出<strong><code>NotSerializableException</code></strong>异常</p><p><strong><code>Serializable</code></strong><br><code>Externalizable</code></p></li><li><p>实现了<code>Serializable</code> 接口的对象，可将它们转换成<strong>一系列字节</strong>，并可在以后完全恢复回原来的样子。 <strong>这一过程亦可通过网络进行。这意味着序列化机制能自动补偿操作系统间的差异。</strong>在 换句话说，可以先在Windows 机器上创台 建一个对象，对其序列化，然后通过网络发给一台Unix 机器，然后在那里准确无误地重新“装配”。不必关心数据在不同机器上如何表示，也不必关心字节的顺序或者其他任何细节。(序列化接口的理解)</p></li><li><p>由于大部分作为参数的类如<code>String</code> 、<code>Integer</code> 等都实现了<code>java.io.Serializable</code> 的接口，也可以利用多态的性质，作为参数使接口更灵活。(序列化接口是空方法接口)</p></li></ol><h3 id="序列化版本标识符"><a href="#序列化版本标识符" class="headerlink" title="序列化版本标识符"></a>序列化版本标识符</h3><ol><li><p>凡是实现Serializable接口的类都有一个表示<strong>序列化版本标识符的静态变量</strong>：</p><p><code>private static final long serialVersionUID</code>;<br><code>serialVersionUID</code>用来表明类的不同版本间的兼容性。 简言之，其目的是以序列化对象进行版本控制，有关各版本反序列化时是否兼容。<br>如果类没有显示定义这个静态常量，它的值是Java运行时环境根据<strong>类的内部细节自动生成</strong>的。若类的<strong>实例变量做了修改</strong>，<code>serialVersionUID</code> 可能发生变化。故建议，<strong>显式声明</strong>。</p></li><li><p>简单来说，Java的序列化机制是通过在运行时判断类的<code>serialVersionUID</code>来验证<strong>版本一致性</strong>的。在进行反序列化时，JVM会把传来的<strong>字节流</strong>中的<code>serialVersionUID</code>与<strong>本地相应实体</strong><code>serialVersionUID</code>进行比较，如果相同就认为是一致的，可以进行<strong>反序列化</strong>，否则就会出现序列化版本不一致的异常。(<code>InvalidCastException</code>)</p></li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ol><li><p>若某个类实现了 <code>Serializable</code> 接口，该类的对象就是可序列化的：</p><p>创建一个 <code>ObjectOutputStream</code><br>调用 <code>ObjectOutputStream</code>  对象的 <code>writeObject</code>( 对象)  方法输出可 序列化对象<br>注意写出一次，操作<code>flush()</code> 一次</p></li><li><p>反序列化</p><p>创建一个 <code>ObjectInputStream</code><br>调用 <code>readObject()</code>  方法读取流中的对象</p></li><li><p>强调：如果某个类的属性不是基本数据类型或 String 类型，而是另一个引用类型，那么这个引用类型必须是<strong>可序列化</strong>的，否则拥有该类型的<code>Field</code> 的类也不能序列化</p></li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象流的使用</span></span><br><span class="line"><span class="comment"> * 1.ObjectInputStream 和 ObjectOutputStream</span></span><br><span class="line"><span class="comment"> * 2.作用：用于存储和读取基本数据类型数据或对象的处理流。</span></span><br><span class="line"><span class="comment"> * 它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.要想一个java对象是可序列化的，需要满足相应的要求。见Person.java</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 4.序列化机制：</span></span><br><span class="line"><span class="comment"> * 对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种</span></span><br><span class="line"><span class="comment"> * 二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。</span></span><br><span class="line"><span class="comment"> * 当其它程序获取了这种二进制流，就可以恢复成原来的Java对象。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-10-13 23:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化过程：将内存中的java对象保存到磁盘中或通过网络传输出去</span></span><br><span class="line"><span class="comment">     * 使用ObjectOutputStream实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">objectOutputStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"person.dat"</span>));</span><br><span class="line"></span><br><span class="line">            oos.writeObject( <span class="keyword">new</span> Person(<span class="string">"jack"</span>,<span class="number">18</span>,<span class="keyword">new</span> Card(<span class="number">1278234L</span>)));</span><br><span class="line">            oos.flush();    <span class="comment">//刷新操作</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (oos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化：将磁盘文件中的对象或网络中传输的二进制流还原为内存中的一个java对象</span></span><br><span class="line"><span class="comment">     * 使用ObjectInputStream来实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">objectInputStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"person.dat"</span>));</span><br><span class="line"></span><br><span class="line">            Person person = (Person) ois.readObject();</span><br><span class="line">            System.out.println(person);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ois != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ois.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Person类"><a href="#Person类" class="headerlink" title="Person类"></a>Person类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Person需要满足如下的要求，方可序列化</span></span><br><span class="line"><span class="comment"> * 1.需要实现接口：Serializable</span></span><br><span class="line"><span class="comment"> * 2.当前类提供一个全局常量：serialVersionUID</span></span><br><span class="line"><span class="comment"> * 3.除了当前Person类需要实现Serializable接口之外，还必须保证其内部所有属性</span></span><br><span class="line"><span class="comment"> *   也必须是可序列化的。（默认情况下，基本数据类型及包装类，String都已实现序列化）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意：ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量</span></span><br><span class="line"><span class="comment"> * static不是类所私有的，transient是修饰不用序列化的成员变量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-10-14 0:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"><span class="comment">//序列化的类需要显式声明序列化版本标识符</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">12421351542L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Card card;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Card <span class="title">getCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCard</span><span class="params">(Card card)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String username, Integer age, Card card)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", card="</span> + card +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String username, Integer age)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Card类"><a href="#Card类" class="headerlink" title="Card类"></a>Card类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Card</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"><span class="comment">//序列化的类需要显式声明序列化版本标识符</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">54635742L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long ID;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Card&#123;"</span> +</span><br><span class="line">                <span class="string">"ID="</span> + ID +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setID</span><span class="params">(Long ID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ID = ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Card</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Card</span><span class="params">(Long ID)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.ID = ID;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>其他流(处理流)</title>
      <link href="/2019/10/13/blog019/"/>
      <url>/2019/10/13/blog019/</url>
      
        <content type="html"><![CDATA[<h3 id="标准输入、输出流"><a href="#标准输入、输出流" class="headerlink" title="标准输入、输出流"></a>标准输入、输出流</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ol><li><p><strong>System.in</strong>和<strong>System.out</strong>分别代表了系统标准的输入和输出设备</p></li><li><p>默认输入设备是：键盘，输出设备是：显示器</p></li><li><p>System.in的类型是<strong>InputStream</strong></p></li><li><p>System.out的类型是<strong>PrintStream</strong>，其是OutputStream的子类FilterOutputStream 的子类</p></li><li><p>重定向：通过System类的<strong>setIn</strong>，<strong>setOut</strong>方法对默认设备进行改变。</p><p><code>public static void setIn(InputStream in)</code><br><code>public static void setOut(PrintStream out)</code></p></li></ol><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.标准的输入，输出流</span></span><br><span class="line"><span class="comment">     * System.in:标准的输入流，默认从键盘输入     返回 InputStream</span></span><br><span class="line"><span class="comment">       System.out:标准的输出流，默认从控制台输出   返回 PrintStream</span></span><br><span class="line"><span class="comment">       System类的setIn(InputStream is) / setOut(PrintStream ps)方式重新指定输入和输出的流。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 从键盘输入字符串，要求将读取到的整行字符串转成大写输出。然后继续进行输入操作，</span></span><br><span class="line"><span class="comment">        直至当输入“e”或者“exit”时，退出程序。</span></span><br><span class="line"><span class="comment">     方法一：使用Scanner实现，调用next()返回一个字符串</span></span><br><span class="line"><span class="comment">     Scanner s = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">s.nextInt();</span></span><br><span class="line"><span class="comment">s.next();</span></span><br><span class="line"><span class="comment">     方法二：使用System.in实现。System.in  ---&gt;  转换流 ---&gt; BufferedReader的readLine()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 把"标准"输入流(键盘输入)这个字节流包装成字符流,再包装成缓冲流</span></span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"请输入字符串："</span>);</span><br><span class="line">                String data = br.readLine();   <span class="comment">// 读取用户输入的一行数据 --&gt; 阻塞程序</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"e"</span>.equalsIgnoreCase(data) || <span class="string">"exit"</span>.equalsIgnoreCase(data)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"程序结束"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">   <span class="comment">// 将读取到的整行字符串转成大写输出</span></span><br><span class="line">                String str = data.toUpperCase();</span><br><span class="line">                System.out.println(str);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (br != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();<span class="comment">// 关闭过滤流时,会自动关闭它包装的底层节点流</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ol><li><p>实现将 <strong>基本数据类型</strong>的数据格式转化为 <strong>字符串</strong>输出</p></li><li><p>打印流：<strong><code>PrintStream</code></strong>和<strong><code>PrintWriter</code></strong>，都是输出流</p><p>提供了一系列重载的print()和println()方法，用于多种<strong>数据类型的输出</strong><br><code>PrintStream</code>和<code>PrintWriter</code>的输出<strong>不会抛出IOException异常</strong><br><code>PrintStream</code>和<code>PrintWriter</code>有<strong>自动flush功能</strong><br><code>PrintStream</code> 打印的所有字符都使用平台的默认字符编码转换为<strong>字节</strong>。<br>在需要写入<strong>字符</strong>而不是写入字节的情况下，应该使用 <code>PrintWriter</code> 类。<br>System.out返回的是<strong>PrintStream的实例</strong></p></li></ol><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印流：PrintStream 和PrintWriter ：都是输出流</span></span><br><span class="line"><span class="comment">       提供了一系列重载的print() 和 println()</span></span><br><span class="line"><span class="comment">     * 练习：使用打印输出流将ASCII码写入到文本中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建打印输出流,设置为自动刷新模式(写入换行符或字节 '\n' 时都会刷新输出缓冲区)</span></span><br><span class="line">            ps = <span class="keyword">new</span> PrintStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"text.txt"</span>),<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//重新指定打印流</span></span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;   <span class="comment">// 把标准输出流(控制台输出)改成文件</span></span><br><span class="line">                System.setOut(ps);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//循环写入ASCII</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)i);</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">50</span> == <span class="number">0</span>) &#123;  <span class="comment">//每50个数据一行</span></span><br><span class="line">                    System.out.println();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><ol><li><p>为了方便地操作Java语言的<strong>基本数据类型</strong>和<strong>String</strong>的数据，可以使用数据流。</p></li><li><p>数据流有两个类：(用于读取和写出基本数据类型、String类的数据）</p><p><code>**DataInputStream**</code> 和 <strong><code>DataOutputStream</code></strong><br>在 分别“套接”在 <code>InputStream</code> 和 和 <code>OutputStream</code>  子类的流 上</p></li><li><p>DataInputStream 中的方法</p><p><code>boolean readBoolean()</code>         <code>byte readByte()</code><br><code>char readChar()</code>             <code>float readFloat()</code><br><code>double readDouble()</code>         <code>short readShort()</code><br><code>long readLong()</code>             <code>int readInt()</code><br><code>String readUTF()</code>             <code>void readFully(byte[] b)</code></p></li><li><p>DataOutputStream 中的方法</p><p>将上述的方法的read改为相应的write即可。</p></li></ol><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据流</span></span><br><span class="line"><span class="comment">     3.1 DataInputStream 和 DataOutputStream</span></span><br><span class="line"><span class="comment">     3.2 作用：用于读取或写出基本数据类型的变量或字符串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     练习：将内存中的字符串、基本数据类型的变量写出到文件中。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataOutputStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DataOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 创建连接到指定文件的数据输出流对象</span></span><br><span class="line">            dos = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"data.txt"</span>));</span><br><span class="line"><span class="comment">// 写UTF字符串</span></span><br><span class="line">            dos.writeUTF(<span class="string">"小明"</span>);</span><br><span class="line">            dos.flush();    <span class="comment">//刷新操作，将内存中的数据写入文件</span></span><br><span class="line">            dos.writeInt(<span class="number">18</span>);</span><br><span class="line">            dos.flush();</span><br><span class="line">            dos.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">            dos.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (dos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据流</span></span><br><span class="line"><span class="comment">      将文件中存储的基本数据类型变量和字符串读取到内存中，保存在变量中。</span></span><br><span class="line"><span class="comment">      注意点：读取不同类型的数据的顺序要与当初写入文件时，保存的数据的顺序一致！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataInputStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DataInputStream dis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"data.txt"</span>));</span><br><span class="line"></span><br><span class="line">            String name = dis.readUTF();</span><br><span class="line">            <span class="keyword">int</span> age = dis.readInt();</span><br><span class="line">            <span class="keyword">boolean</span> isMale = dis.readBoolean();</span><br><span class="line">            System.out.println(<span class="string">"name="</span> + name + <span class="string">", age="</span> + age + <span class="string">", isMale="</span> + isMale);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符编码</title>
      <link href="/2019/10/13/blog018/"/>
      <url>/2019/10/13/blog018/</url>
      
        <content type="html"><![CDATA[<h3 id="编码表由来"><a href="#编码表由来" class="headerlink" title="编码表由来"></a>编码表由来</h3><p>计算机只能识别二进制数据，早期由来是电信号。为了方便应用计算机，让它可以识别各个国家的文字。就将各个国家的文字用数字来表示，并一一对应，形成一张表。这就是编码表。</p><h3 id="常见编码表"><a href="#常见编码表" class="headerlink" title="常见编码表"></a>常见编码表</h3><p><strong>ASCII</strong>：美国标准信息交换码。用一个字节的7位可以表示。<br><strong>ISO8859-1</strong>：拉丁码表。欧洲码表。用一个字节的8位表示。<br><strong>GB2312</strong>：中国的中文编码表。最多两个字节编码所有字符<br><strong>GBK</strong>：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码<br><strong>Unicode</strong>：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。<br><strong>UTF-8</strong>：变长的编码方式，可用1-4个字节来表示一个字符。</p><h3 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h3><p><img src="/2019/10/13/blog018/hexo01.png" alt="图例"></p><p>ANSI与Unicode</p><p><img src="/2019/10/13/blog018/hexo03.png" alt></p><h3 id="Unicode问题"><a href="#Unicode问题" class="headerlink" title="Unicode问题"></a>Unicode问题</h3><ol><li>Unicode不完美，这里就有三个问题，一个是，我们已经知道，英文字母只用一个字节表示就够了，第二个问题是如何才能区别Unicode和ASCII？计算机怎么知道两个字节表示一个符号，而不是分别表示两个符号呢？第三个，如果和GBK等双字节编码方式一样，用最高位是1或0表示两个字节和一个字节，就少了很多值无法用于表示字符，不够表示所有字符。Unicode在很长一段时间内无法推广，直到互联网的出现。</li><li>面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。</li><li>Unicode只是定义了一个庞大的、全球通用的字符集，并为每个字符规定了唯一确定的编号，具体存储成什么样的字节流，取决于字符编码方案。推荐的Unicode编码是UTF-8和UTF-16</li></ol><p><img src="/2019/10/13/blog018/hexo02.png" alt="原理"></p><h3 id="编码与解码"><a href="#编码与解码" class="headerlink" title="编码与解码"></a>编码与解码</h3><p>编码：字符数组、<strong>字符串</strong> —&gt; 字节、<strong>字节数组</strong>      <strong>OutputStreamWriter</strong>(写入)</p><p>解码：字节、<strong>字节数组</strong>  —&gt;字符数组、<strong>字符串</strong>      <strong>InputStreamReader</strong>(读取)</p>]]></content>
      
      
      <categories>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转换流(处理流)</title>
      <link href="/2019/10/13/blog017/"/>
      <url>/2019/10/13/blog017/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li><p>转换流提供了在<strong>字节流和字符流</strong>之间的转换</p></li><li><p>javaAPI提供了两个转换流：</p><p><strong><code>InputStreamReader</code></strong>：将InputStream转换为Reader</p><p><strong><code>OutPutStreamWriter</code></strong>：将Writer转换为OutputStream</p></li><li><p>字节流中的数据都是字符时，转成字符流操作更高效</p></li><li><p>可以使用转换流来处理<strong>文件乱码</strong>问题。实现编码和解码功能</p></li></ol><h3 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h3><ol><li><p><code>InputStreamReader</code></p><p>实现将<strong>字节</strong>的输入流按指定<strong>字符集</strong>转换为<strong>字符</strong>的输入流</p><p>需要和 <strong>InputStream</strong> “套接”</p><p>构造器：</p><p>​    <code>public InputStreamReader(InputStream in)</code></p><p>​    <code>public InputStreamReader(InputStream in, String charsetName)</code></p><p>如：<code>Reader isr = new InputStreamReader(System.in, &quot;gbk&quot;);</code></p></li><li><p><code>OutputStreamWriter</code></p><p>实现将<strong>字符</strong>的输出流按指定<strong>字符集</strong>转换为<strong>字节</strong>的输出流</p><p>需要和 <strong>OutputStream</strong> “套接”</p><p>构造器：</p><p>​    <code>public OutputStreamWriter(OutputStream out)</code></p><p>​    <code>public OutputStreamWriter(OutputStream out, String charsetName)</code></p></li></ol><h3 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h3><p><img src="/2019/10/13/blog017/hexo01.png" alt="示例图"></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理流之二：转换流的使用</span></span><br><span class="line"><span class="comment"> * 1.转换流：属于字符流</span></span><br><span class="line"><span class="comment"> *   InputStreamReader：将一个字节的输入流转换为字符的输入流</span></span><br><span class="line"><span class="comment"> *   OutputStreamWriter：将一个字符的输出流转换为字节的输出流</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.作用：提供字节流与字符流之间的转换</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3. 解码：字节、字节数组  ---&gt;字符数组、字符串      InputStreamReader(读取)</span></span><br><span class="line"><span class="comment"> *    编码：字符数组、字符串 ---&gt; 字节、字节数组      OutputStreamWriter(写入)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-10-10 23:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将utf-8编码的dbcp.txt文件复制转为gbk编码的dbcp_gbk.txt文件</span></span><br><span class="line"><span class="comment">     * 系统(idea)默认字符集是utf-8</span></span><br><span class="line"><span class="comment">     * 参数2指明了字符集，具体使用哪个字符集，取决于文件dbcp.txt保存时使用的字符集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transformStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InputStreamReader isr = <span class="keyword">null</span>;</span><br><span class="line">        OutputStreamWriter osr = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//stream实例化</span></span><br><span class="line">            isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"dbcp.txt"</span>),<span class="string">"utf-8"</span>);</span><br><span class="line">            osr = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"dbcp_gbk.txt"</span>),<span class="string">"gbk"</span>);</span><br><span class="line">            <span class="comment">//数据处理</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ( (len = isr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                osr.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭流</span></span><br><span class="line">            <span class="keyword">if</span>( osr != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    osr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( isr != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    isr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓冲流(处理流)</title>
      <link href="/2019/10/08/blog016/"/>
      <url>/2019/10/08/blog016/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li>为了提高数据读写的速度，Java API提供了带缓冲功能的流类，在使用这些流类时，会创建一个内部缓冲区数组，缺省使用8192个字节(8Kb)的缓冲区。</li></ol><p><img src="/2019/10/08/blog016/hexo01.png" alt="default"></p><ol start="2"><li><p>缓冲流要“套接”在相应的节点流之上，根据数据操作单位可以把缓冲流分为：</p><p><code>BufferedInputStream</code> 和 和 <code>BufferedOutputStream</code><br><code>BufferedReader</code> 和 和 <code>BufferedWriter</code></p></li></ol><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>当读取数据时，数据按块读入缓冲区，其后的读操作则直接访问缓冲区</li><li>当使用<code>BufferedInputStream</code>读取字节文件时，<code>BufferedInputStream</code>会一次性从文件中读取8192个(8Kb)，存在缓冲区中，直到缓冲区装满了，才重新从文件读取下一个8192个字节数组。</li><li>向流中写入字节时，不会直接写到文件，先写到缓冲区中直到缓冲区写满，<code>BufferedOutputStream</code>才会把缓冲区中的数据一次性写到文件里。使用方法<code>flush()</code>可以强制将缓冲区的内容全部写入输出流</li><li>关闭流的顺序和打开流的顺序相反。只要关闭最外层流即可，关闭最外层流也会相应关闭内层节点流</li><li><code>flush()</code>方法的使用：手动将buffer中内容写入文件</li><li>如果是带缓冲区的流对象的<code>close()</code>方法，不但会关闭流，还会在关闭流之前刷新缓冲区，关闭后不能再写出</li></ol><p><img src="/2019/10/08/blog016/hexo02.png" alt="原理"></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓冲流的使用(处理流的一种)</span></span><br><span class="line"><span class="comment"> * 1.缓冲流</span></span><br><span class="line"><span class="comment"> *  BufferedInputStream</span></span><br><span class="line"><span class="comment"> *  BufferedOutputStream</span></span><br><span class="line"><span class="comment"> *  BufferedReader</span></span><br><span class="line"><span class="comment"> *  BufferedWriter</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.作用：提供流的读取、写入的速度</span></span><br><span class="line"><span class="comment"> *   提高读写速度的原因：内部提供了一个缓冲区</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.处理流，就是“套接”在已有的流的基础上。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-10-08 23:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现非文本文件的复制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFileTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String srcPath = <span class="string">"D:\\BaiduNetdiskDownload\\videotest.avi"</span>;</span><br><span class="line">        String destPath = <span class="string">"D:\\BaiduNetdiskDownload\\videotest_dest2.avi"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        copyFile(srcPath,destPath);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"复制完成！耗时："</span>+(end-start)+<span class="string">"ms！"</span>);   <span class="comment">// 792ms  1850ms</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装文件复制的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(String srcPath,String destPath)</span></span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.file实例化</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destPath);</span><br><span class="line">            <span class="comment">//2.stream实例化</span></span><br><span class="line">            <span class="comment">//2.1filestream实例化</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="comment">//2.2bufferedstream实例化</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">            <span class="comment">//3.data处理</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ( (len = bis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line"><span class="comment">//              bos.flush();//刷新缓冲区</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.stream关闭</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line">            <span class="keyword">if</span> (bis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span></span><br><span class="line"><span class="comment">//          fos.close();</span></span><br><span class="line"><span class="comment">//          fis.close();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用BufferedReader和BufferedWriter实现文本文件的复制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferedCharStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//stream实例化</span></span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"dbcp.txt"</span>));</span><br><span class="line">            bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"dbcp_dest.txt"</span>));</span><br><span class="line">            <span class="comment">//data处理</span></span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//            char[] cbuf = new char[1024];</span></span><br><span class="line"><span class="comment">//            int len;</span></span><br><span class="line"><span class="comment">//            while ( (len = br.read(cbuf)) != -1)&#123;</span></span><br><span class="line"><span class="comment">//                bw.write(cbuf,0,len);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="comment">//方式二：</span></span><br><span class="line">            String data;</span><br><span class="line">            <span class="keyword">while</span> ( (data = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                bw.write(data);     <span class="comment">//data中不包含换行符</span></span><br><span class="line">                bw.newLine();   <span class="comment">//提供换行的操作</span></span><br><span class="line"><span class="comment">//                bw.write(data + "\n");//data中不包含换行符</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//stream关闭</span></span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bw != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="图片的加密与解密"><a href="#图片的加密与解密" class="headerlink" title="图片的加密与解密"></a>图片的加密与解密</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PicTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片的加密</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"爱情与友情.jpg"</span>);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"爱情与友情secret.jpg"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//字节数组进行修改</span></span><br><span class="line">                <span class="comment">//错误的</span></span><br><span class="line">                <span class="comment">//            for(byte b : buffer)&#123;</span></span><br><span class="line">                <span class="comment">//                b = (byte) (b ^ 5);</span></span><br><span class="line">                <span class="comment">//            &#125;</span></span><br><span class="line">                <span class="comment">//正确的</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                    buffer[i] = (<span class="keyword">byte</span>) (buffer[i] ^ <span class="number">5</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片的解密</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"爱情与友情secret.jpg"</span>);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"爱情与友情4.jpg"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//字节数组进行修改</span></span><br><span class="line">                <span class="comment">//错误的</span></span><br><span class="line">                <span class="comment">//            for(byte b : buffer)&#123;</span></span><br><span class="line">                <span class="comment">//                b = (byte) (b ^ 5);</span></span><br><span class="line">                <span class="comment">//            &#125;</span></span><br><span class="line">                <span class="comment">//正确的</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                    buffer[i] = (<span class="keyword">byte</span>) (buffer[i] ^ <span class="number">5</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取文本上字符出现的次数-把数据写入文件"><a href="#获取文本上字符出现的次数-把数据写入文件" class="headerlink" title="获取文本上字符出现的次数,把数据写入文件"></a>获取文本上字符出现的次数,把数据写入文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取文本上字符出现的次数,把数据写入文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> * 1.遍历文本每一个字符</span></span><br><span class="line"><span class="comment"> * 2.字符出现的次数存在Map中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Map&lt;Character,Integer&gt; map = new HashMap&lt;Character,Integer&gt;();</span></span><br><span class="line"><span class="comment"> * map.put('a',18);</span></span><br><span class="line"><span class="comment"> * map.put('你',2);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.把map中的数据写入文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    说明：如果使用单元测试，文件相对路径为当前module</span></span><br><span class="line"><span class="comment">          如果使用main()测试，文件相对路径为当前工程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWordCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Map集合</span></span><br><span class="line">            Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.遍历每一个字符,每一个字符出现的次数放到map中</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(<span class="string">"dbcp.txt"</span>);</span><br><span class="line">            <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((c = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//int 还原 char</span></span><br><span class="line">                <span class="keyword">char</span> ch = (<span class="keyword">char</span>) c;</span><br><span class="line">                <span class="comment">// 判断char是否在map中第一次出现</span></span><br><span class="line">                <span class="keyword">if</span> (map.get(ch) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    map.put(ch, <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put(ch, map.get(ch) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.把map中数据存在文件count.txt</span></span><br><span class="line">            <span class="comment">//3.1 创建Writer</span></span><br><span class="line">            bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"wordcount.txt"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.2 遍历map,再写入数据</span></span><br><span class="line">            Set&lt;Map.Entry&lt;Character, Integer&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Character, Integer&gt; entry : entrySet) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (entry.getKey()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">' '</span>:</span><br><span class="line">                        bw.write(<span class="string">"空格="</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\t'</span>:<span class="comment">//\t表示tab 键字符</span></span><br><span class="line">                        bw.write(<span class="string">"tab键="</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\r'</span>:<span class="comment">//</span></span><br><span class="line">                        bw.write(<span class="string">"回车="</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\n'</span>:<span class="comment">//</span></span><br><span class="line">                        bw.write(<span class="string">"换行="</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        bw.write(entry.getKey() + <span class="string">"="</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                bw.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关流</span></span><br><span class="line">            <span class="keyword">if</span> (fr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bw != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件流(节点流)</title>
      <link href="/2019/10/08/blog015/"/>
      <url>/2019/10/08/blog015/</url>
      
        <content type="html"><![CDATA[<h3 id="FileReader-FileWriter应用"><a href="#FileReader-FileWriter应用" class="headerlink" title="FileReader/FileWriter应用"></a>FileReader/FileWriter应用</h3><h4 id="将hello-txt文件内容读入程序中，并输出到控制台"><a href="#将hello-txt文件内容读入程序中，并输出到控制台" class="headerlink" title="将hello.txt文件内容读入程序中，并输出到控制台"></a>将hello.txt文件内容读入程序中，并输出到控制台</h4><p>说明点：</p><ol><li><code>read()</code>的理解：返回读入的一个字符。如果达到文件末尾，返回<strong>-1</strong></li><li>异常的处理：为了保证流资源一定可以执行关闭操作。需要使用<code>try-catch-finally</code>处理</li><li>读入的文件一定要存在，否则就会报<code>FileNotFoundException</code>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileReaderTest1</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">       FileReader fileReader = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.实例化File对象</span></span><br><span class="line">           File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">           <span class="comment">//2.提供具体流</span></span><br><span class="line">           fileReader = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">           <span class="comment">//3.数据读取</span></span><br><span class="line">           <span class="comment">//read():返回读入的一个字符。如果达到文件末尾，返回-1</span></span><br><span class="line">           <span class="keyword">int</span> data = -<span class="number">1</span>;</span><br><span class="line">           <span class="keyword">while</span> ( (data = fileReader.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">               System.out.print((<span class="keyword">char</span>) data);  <span class="comment">//将int类强制转化为char输出</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">//4.关闭流</span></span><br><span class="line">           <span class="keyword">if</span>(fileReader != <span class="keyword">null</span>)&#123; <span class="comment">//先判断是否为null，避免NullPointerException</span></span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   fileReader.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="对read-操作升级"><a href="#对read-操作升级" class="headerlink" title="对read()操作升级"></a>对read()操作升级</h4><p>使用read的重载方法 (read(char[] cbuf))</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileReaderTest2</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        FileReader fileReader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.File类的实例化</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">            <span class="comment">//2.具体流的提供</span></span><br><span class="line">            fileReader = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">            <span class="comment">//3.数据读取</span></span><br><span class="line">            <span class="comment">//read(char[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-1</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = fileReader.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//第一种写法：</span></span><br><span class="line"><span class="comment">//                for(int i =0;i&lt;len;i++)&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuf[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//错误写法</span></span><br><span class="line"><span class="comment">//                for(int i=0;i&lt;cbuf.length;i++)&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuf[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//第二种写法：</span></span><br><span class="line">                String data = <span class="keyword">new</span> String(cbuf,<span class="number">0</span>,len);</span><br><span class="line">                System.out.print(data);</span><br><span class="line">                <span class="comment">//错误写法</span></span><br><span class="line"><span class="comment">//                String data = new String(cbuf);</span></span><br><span class="line"><span class="comment">//                System.out.print(data);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fileReader!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//4.流的关闭</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileReader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="从内存中写出数据到硬盘的文件里"><a href="#从内存中写出数据到硬盘的文件里" class="headerlink" title="从内存中写出数据到硬盘的文件里"></a>从内存中写出数据到硬盘的文件里</h4><p>说明：</p><ol><li>输出操作，对应的File可以不存在的。并不会报异常</li><li>File对应的硬盘中的文件<br>如果不存在，在输出的过程中，会自动创建此文件。<br>如果存在：<br>如果流使用的构造器是：<code>FileWriter(file,false) / FileWriter(file)</code>:对原有文件的覆盖<br>如果流使用的构造器是：<code>FileWriter(file,true)</code>:不会对原有文件覆盖，而是在原有文件基础上追加内容</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileWriterTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       FileWriter fileWriter = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.File类实例化</span></span><br><span class="line">           File file = <span class="keyword">new</span> File(<span class="string">"hello1.txt"</span>);</span><br><span class="line">           <span class="comment">//2.具体流实例化</span></span><br><span class="line">           fileWriter = <span class="keyword">new</span> FileWriter(file,<span class="keyword">false</span>);</span><br><span class="line">           <span class="comment">//3.数据写入</span></span><br><span class="line">           fileWriter.write(<span class="string">"I have a dream!\n"</span>);</span><br><span class="line">           fileWriter.write(<span class="string">"You need to have a dream!"</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>(fileWriter!=<span class="keyword">null</span>)&#123;</span><br><span class="line">               <span class="comment">//4.关闭流</span></span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   fileWriter.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="实现文本文件的复制"><a href="#实现文本文件的复制" class="headerlink" title="实现文本文件的复制"></a>实现文本文件的复制</h4><p>1.源文件必须存在<br>2.目标文件可以不存在<br>3.读取时常用：<code>read(char[] cbuf)</code><br>   写入时常用：<code>write(char[] cbuf,int off,int len)</code><br>4.不能使用字符流来处理图片等字节数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFileTest</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">       FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">       FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//File实例化</span></span><br><span class="line">           File srcFile = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">           File destFile = <span class="keyword">new</span> File(<span class="string">"hello2.txt"</span>);</span><br><span class="line">           <span class="comment">//具体流实例化</span></span><br><span class="line">           fr = <span class="keyword">new</span> FileReader(srcFile);</span><br><span class="line">           fw = <span class="keyword">new</span> FileWriter(destFile);</span><br><span class="line">           <span class="comment">//数据读取与写入</span></span><br><span class="line">           <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];  <span class="comment">//每次读取5个字符并存放在数组中</span></span><br><span class="line">           <span class="keyword">int</span> len;    <span class="comment">//记录每次读入到cbuf数组中的字符的个数</span></span><br><span class="line">           <span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">               <span class="comment">//每次写出len个字符</span></span><br><span class="line">               fw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">//关闭流</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span>(fr!=<span class="keyword">null</span>)</span><br><span class="line">               fr.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;   <span class="comment">//若第一个try-catch发送异常，会进行处理，后面语句会执行</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span>(fw!=<span class="keyword">null</span>)</span><br><span class="line">               fw.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="FileInputStream-FileOutputStream应用"><a href="#FileInputStream-FileOutputStream应用" class="headerlink" title="FileInputStream/FileOutputStream应用"></a>FileInputStream/FileOutputStream应用</h3><h4 id="处理文本文件，可能出现乱码"><a href="#处理文本文件，可能出现乱码" class="headerlink" title="处理文本文件，可能出现乱码"></a>处理文本文件，可能出现乱码</h4><ul><li>1.若文本没有中文，是没有乱码（英文对应的ASCII码，一个字节）</li><li>2.若有中文时，可能会主线乱码（一个中文占三个字节）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyDocFileTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//实例化File</span></span><br><span class="line">           File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">           <span class="comment">//实例化Stream</span></span><br><span class="line">           fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">           <span class="comment">//数据操作</span></span><br><span class="line">           <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">           <span class="keyword">int</span> len;</span><br><span class="line">           <span class="keyword">while</span>( (len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">               String str = <span class="keyword">new</span> String(buffer,<span class="number">0</span>,len);</span><br><span class="line">               System.out.println(str);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>( fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">               <span class="comment">//关闭Stream</span></span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   fis.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="实现对图片的复制操作"><a href="#实现对图片的复制操作" class="headerlink" title="实现对图片的复制操作"></a>实现对图片的复制操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyImgFileTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">       FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//实例化File</span></span><br><span class="line">           File srcFile = <span class="keyword">new</span> File(<span class="string">"爱情与友情.jpg"</span>);</span><br><span class="line">           File destFile = <span class="keyword">new</span> File(<span class="string">"爱情与友情dest.jpg"</span>);</span><br><span class="line">           <span class="comment">//实例化Stream</span></span><br><span class="line">           fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">           fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">           <span class="comment">//数据操作</span></span><br><span class="line">           <span class="keyword">byte</span>[] buffer =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">           <span class="keyword">int</span> len;</span><br><span class="line">           <span class="keyword">while</span>( (len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">               fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">//关闭Stream</span></span><br><span class="line">           <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   fis.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   fos.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="封装复制操作方法，对指定路径下文件复制"><a href="#封装复制操作方法，对指定路径下文件复制" class="headerlink" title="封装复制操作方法，对指定路径下文件复制"></a>封装复制操作方法，对指定路径下文件复制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFileTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//对非文本文件复制操作</span></span><br><span class="line"><span class="comment">//        String srcPath = "D:\\BaiduNetdiskDownload\\videotest.avi";</span></span><br><span class="line"><span class="comment">//        String destPath = "D:\\BaiduNetdiskDownload\\videotest_dest.avi";</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//对文本文件复制操作</span></span><br><span class="line">        String srcPath = <span class="string">"hello.txt"</span>;</span><br><span class="line">        String destPath = <span class="string">"hello_dest.txt"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        copyFile(srcPath,destPath);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"复制完成！耗时："</span>+(end-start)+<span class="string">"ms！"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非文本或文本文件都可以使用字节流进行复制操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(String srcPath, String destPath)</span></span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化File</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destPath);</span><br><span class="line">            <span class="comment">//实例化Stream</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="comment">//数据操作</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>( (len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭Stream</span></span><br><span class="line">            <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li><ol><li>对于<strong>文本</strong>文件(.txt,.java,.c,.cpp)，使用<strong>字符流</strong>处理</li><li>对于<strong>非文本</strong>文件(.jpg,.mp3,.mp4,.avi,.doc,.ppt,.xsl,…)，使用<strong>字节流</strong>处理</li><li>对于<strong>复制</strong>操作，文本文件也可以使用<strong>字节流</strong>处理，相当于进行底层搬运；</li></ol><p>反之，非文本文件，是不可以用字符流来处理的</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流体系结构</title>
      <link href="/2019/10/08/blog013/"/>
      <url>/2019/10/08/blog013/</url>
      
        <content type="html"><![CDATA[<h3 id="IO流原理"><a href="#IO流原理" class="headerlink" title="IO流原理"></a>IO流原理</h3><p> I/O是Input/Output的缩写， I/O技术是非常实用的技术，<strong>用于处理设备之间的数据传输</strong>。如读/写文件，网络通讯等。</p><p><strong>输入input</strong>：读取外部数据（磁盘、光盘等存储设备的数据）到程序（内存）中。<br><strong>输出output</strong>：将程序（内存）数据输出到磁盘、光盘等存储设备中。</p><p>Java程序中，对于数据的输入/输出操作以 <strong>流(stream)</strong>的方式进行。</p><p> java.io包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过<strong>标准的方法</strong>输入或输出数据。</p><h3 id="IO流分类"><a href="#IO流分类" class="headerlink" title="IO流分类"></a>IO流分类</h3><p><strong>操作单元</strong>：字节流和字符流<br><strong>流的流向</strong>：输入流和输出流<br><strong>流的角色</strong>：节点流和处理流</p><p><img src="/2019/10/08/blog013/hexo04.png" alt="流的分类"></p><h3 id="IO流体系结构"><a href="#IO流体系结构" class="headerlink" title="IO流体系结构"></a>IO流体系结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">抽象基本类           节点流(文件流)                                 缓冲流(处理流的一种)</span><br><span class="line"><span class="function">InputStream          <span class="title">FileInputStream</span> <span class="params">(read(<span class="keyword">byte</span>[] buffer)</span>)         <span class="title">BufferedInputStream</span> <span class="params">(read(<span class="keyword">byte</span>[] buffer)</span>)</span></span><br><span class="line"><span class="function">OutputStream         <span class="title">FileOutputStream</span> <span class="params">(write(<span class="keyword">byte</span>[] buffer,<span class="number">0</span>,len)</span>  <span class="title">BufferedOutputStream</span> <span class="params">(write(<span class="keyword">byte</span>[] buffer,<span class="number">0</span>,len)</span> / <span class="title">flush</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Reader               <span class="title">FileReader</span> <span class="params">(read(<span class="keyword">char</span>[] cbuf)</span>)                <span class="title">BufferedReader</span> <span class="params">(read(<span class="keyword">char</span>[] cbuf)</span> / <span class="title">readLine</span><span class="params">()</span>)</span></span><br><span class="line"><span class="function">Writer               <span class="title">FileWriter</span> <span class="params">(write(<span class="keyword">char</span>[] cbuf,<span class="number">0</span>,len)</span>          <span class="title">BufferedWriter</span> <span class="params">(write(<span class="keyword">char</span>[] cbuf,<span class="number">0</span>,len)</span> / <span class="title">flush</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h3 id="抽象基本类"><a href="#抽象基本类" class="headerlink" title="抽象基本类"></a>抽象基本类</h3><h4 id="InputStream-amp-Reader"><a href="#InputStream-amp-Reader" class="headerlink" title="InputStream &amp; Reader"></a>InputStream &amp; Reader</h4><ol><li><p><strong>InputStream</strong> 和 <strong>Reader</strong> 是所有 输入流的基类。</p></li><li><p>InputStream（典型实现：FileInputStream）</p><p><code>int read()</code><br><code>int read(byte[] b)</code><br><code>int read(byte[] b, int off, int len)</code></p></li><li><p>Reader（典型实现：FileReader）</p><p><code>int read()</code><br><code>int read(char [] c)</code><br><code>int read(char [] c, int off, int len)</code></p></li><li><p>程序中打开的文件 IO 资源不属于内存里的资源，垃圾回收机制无法回收该资源，所以应该件 <strong>显式关闭文件 IO  资源</strong>。</p></li><li><p>FileInputStream 从文件系统中的某个文件中获得输入字节。FileInputStream用于读取非文本数据之类的原始字节流。要读取字符流，需要使用 FileReader</p></li></ol><h4 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h4><ol><li><p><code>int read()</code></p><p>从输入流中读取数据的下一个字节。返回 0 到 255 范围内的 int 字节值。如果因为已经到达流末尾而没有可用的字节，则返回值 -1。</p></li><li><p><code>int read(byte[] b)</code></p><p>从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。如果因为已经到达流末尾而没有可用的字节，则返回值 -1。否则<strong>以整数形式返回实际读取的字节数</strong>。</p></li><li><p><code>int read(byte[] b, int off,int len)</code></p><p>将输入流中最多 len 个数据字节读入 byte 数组。尝试读取 len 个字节，但读取的字节也可能小于该值。以整数形式返回实际读取的字节数。如果因为流位于文件末尾而没有可用的字节，则返回值-1。</p></li><li><p><code>public void close() throws IOException</code></p><p>关闭此输入流并释放与该流关联的所有系统资源</p></li></ol><h4 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h4><ol><li><p><code>int read()</code></p><p>读取单个字符。作为整数读取的字符，范围在 0 到 65535 之间 (0x00-0xffff)（2个字节的Unicode码），如果已到达流的末尾，则返回 -1</p></li><li><p><code>int read(char[] cbuf)</code></p><p>将字符读入数组。如果已到达流的末尾，则返回 -1。否则返回本次读取的字符数。</p></li><li><p><code>int read(char[] cbuf,int off,int len)</code></p><p>将字符读入数组的某一部分。存到数组cbuf中，从off处开始存储，最多读len个字符。如果已到达流的末尾，则返回 -1。否则返回本次读取的字符数。</p></li><li><p><code>public void close() throws IOException</code></p><p>关闭此输入流并释放与该流关联的所有系统资源</p></li></ol><h4 id="OutputStream-amp-Writer"><a href="#OutputStream-amp-Writer" class="headerlink" title="OutputStream &amp; Writer"></a>OutputStream &amp; Writer</h4><ol><li><p>OutputStream 和 Writer 也非常相似：</p><p><code>void write(int b/int c);</code><br><code>void write(byte[] b/char[] cbuf);</code><br><code>void write(byte[] b/char[] buff, int off, int len);</code><br><code>void flush();</code><br><code>void close();</code> 需要先刷新，再关闭此流</p></li><li><p>因为字符流直接以字符作为操作单位，所以 Writer 可以用字符串来替换字符数组，即以 String 对象作为参数</p><p><code>void write(String str);</code><br><code>void write(String str, int off, int len);</code></p></li><li><p>FileOutputStream 从文件系统中的某个文件中获得输出字节。FileOutputStream用于写出非文本数据之类的原始字节流。要写出字符流，需要使用 FileWriter</p></li></ol><h4 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h4><ol><li><p><code>void write(int b)</code></p><p>将指定的字节写入此输出流。write 的常规协定是：向输出流写入一个字节。要写入的字节是参数 b 的八个低位。b 的 24 个高位将被忽略。 即写入0~255范围的。</p></li><li><p><code>void write(byte[] b)</code></p><p>将 b.length 个字节从指定的 byte 数组写入此输出流。write(b) 的常规协定是：应该与调用 write(b, 0, b.length) 的效果完全相同。</p></li><li><p><code>void write(byte[] b,int off,int len)</code></p><p>将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流。</p></li><li><p><code>public void flush()throws IOException</code></p><p>刷新此输出流并强制写出所有缓冲的输出字节，调用此方法指示应将这些字节立即写入它们预期的目标。</p></li><li><p><code>public void close() throws IOException</code></p><p>关闭此输出流并释放与该流关联的所有系统资源</p></li></ol><h4 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h4><ol><li><p><code>void write(int c)</code></p><p>写入单个字符。要写入的字符包含在给定整数值的 16 个低位中，16 高位被忽略。 即写入0 到 65535 之间的Unicode码。</p></li><li><p><code>void write(char[] cbuf)</code></p><p>写入字符数组。</p></li><li><p><code>void write(char[] cbuf,int off,int len)</code></p><p>写入字符数组的某一部分。从off开始，写入len个字符</p></li><li><p><code>void write(String str)</code></p><p>写入字符串。</p></li><li><p><code>void write(String str,int off,int len)</code></p><p>写入字符串的某一部分。</p></li><li><p><code>void flush()</code></p><p>刷新该流的缓冲，则立即将它们写入预期目标。</p></li><li><p><code>public void close() throws IOException</code></p><p>关闭此输出流并释放与该流关联的所有系统资源</p></li></ol><h3 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3><h4 id="IO流体系"><a href="#IO流体系" class="headerlink" title="IO流体系"></a>IO流体系</h4><p><img src="/2019/10/08/blog013/hexo03.png" alt="IO流体系"></p><h4 id="操作方式分类结构图"><a href="#操作方式分类结构图" class="headerlink" title="操作方式分类结构图"></a>操作方式分类结构图</h4><p><img src="/2019/10/08/blog013/hexo01.png" alt="操作方式分类结构图"></p><h4 id="操作对象分类结构图"><a href="#操作对象分类结构图" class="headerlink" title="操作对象分类结构图"></a>操作对象分类结构图</h4><p><img src="/2019/10/08/blog013/hexo02.png" alt="操作对象分类结构图"></p>]]></content>
      
      
      <categories>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File类的使用</title>
      <link href="/2019/10/08/blog014/"/>
      <url>/2019/10/08/blog014/</url>
      
        <content type="html"><![CDATA[<h3 id="File类的使用"><a href="#File类的使用" class="headerlink" title="File类的使用"></a>File类的使用</h3><blockquote><p>  java.io.File类：<strong>文件和文件目录</strong>路径的抽象表示形式，与平台无关<br>  1.File 能<strong>新建、删除、重命名</strong>文件和目录，但 File 不能访问文件内容本身。如果需要访问文件内容本身，则需要使用输入/输出流。<br>  2.想要在Java程序中表示一个真实存在的文件或目录，那么必须有一个File对象，但是Java程序中的一个File对象，可能没有一个真实存在的文件或目录。<br>  3.File对象可以作为<strong>参数传递给流的构造器</strong></p></blockquote><h3 id="常用构造器"><a href="#常用构造器" class="headerlink" title="常用构造器"></a>常用构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String pathname)</span></span></span><br><span class="line"><span class="function">以pathname为路径创建File对象，可以是 绝对路径或者相对路径，如果pathname是相对路径，则默认的当前路径在系统属性user.dir中存储。</span></span><br><span class="line"><span class="function"> 绝对路径：是一个固定的路径,从盘符开始</span></span><br><span class="line"><span class="function"> 相对路径：是相对于某个位置开始</span></span><br><span class="line"><span class="function">2.<span class="keyword">public</span> <span class="title">File</span><span class="params">(String parent,String child)</span></span></span><br><span class="line"><span class="function">以parent为父路径，child为子路径创建File对象。</span></span><br><span class="line"><span class="function">3.<span class="keyword">public</span> <span class="title">File</span><span class="params">(File parent,String child)</span></span></span><br><span class="line"><span class="function">根据一个父File对象和子文件路径创建File对象</span></span><br></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="获取功能"><a href="#获取功能" class="headerlink" title="获取功能"></a>获取功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span> ：获取路径</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> ：获取名称</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getParent</span><span class="params">()</span>：获取上层文件目录路径。若无，返回<span class="keyword">null</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">length</span><span class="params">()</span> ：获取文件长度（即：字节数）。不能获取目录的长度。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lastModified</span><span class="params">()</span> ：获取最后一次的修改时间，毫秒值</span></span><br><span class="line"><span class="function">适用于文件目录:</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String[] <span class="title">list</span><span class="params">()</span> ：获取指定目录下的所有文件或者文件目录的名称数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> File[] <span class="title">listFiles</span><span class="params">()</span> ：获取指定目录下的所有文件或者文件目录的File数组</span></span><br></pre></td></tr></table></figure><h4 id="重命名功能"><a href="#重命名功能" class="headerlink" title="重命名功能"></a>重命名功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">renameTo</span><span class="params">(File dest)</span>:把文件重命名为指定的文件路径<span class="params">(移动/重命名)</span></span></span><br></pre></td></tr></table></figure><h4 id="判断功能"><a href="#判断功能" class="headerlink" title="判断功能"></a>判断功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">()</span>：判断是否是文件目录</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFile</span><span class="params">()</span> ：判断是否是文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span> ：判断是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">()</span> ：判断是否可读</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">()</span> ：判断是否可写</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHidden</span><span class="params">()</span> ：判断是否隐藏</span></span><br></pre></td></tr></table></figure><h4 id="创建功能"><a href="#创建功能" class="headerlink" title="创建功能"></a>创建功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createNewFile</span><span class="params">()</span> ：创建文件。若文件存在，则不创建，返回<span class="keyword">false</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdir</span><span class="params">()</span> ：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdirs</span><span class="params">()</span> ：创建文件目录。如果上层文件目录不存在，一并创建</span></span><br><span class="line"><span class="function">注意事项：如果你创建文件或者文件目录没有写盘符路径，那么， 默认在项目路径下</span></span><br></pre></td></tr></table></figure><h4 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">()</span>：删除文件或者文件夹</span></span><br><span class="line"><span class="function">    删除注意事项：</span></span><br><span class="line"><span class="function">        Java中的删除不走回收站。</span></span><br><span class="line"><span class="function">        要删除一个文件目录，请注意该文件目录内不能包含文件或者文件目录</span></span><br></pre></td></tr></table></figure><h3 id="File类使用示例"><a href="#File类使用示例" class="headerlink" title="File类使用示例"></a>File类使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cykj.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.File类的一个对象，代表一个文件或一个文件目录</span></span><br><span class="line"><span class="comment"> * 2.File类声明在java.io包下</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-10-06 15:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 常用构造器：</span></span><br><span class="line"><span class="comment">     * 1.如何创建File类的实例</span></span><br><span class="line"><span class="comment">     *      File(String filepath)</span></span><br><span class="line"><span class="comment">     *      File(String parent,String child)</span></span><br><span class="line"><span class="comment">     *      File(File parent,String child)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2.相对路径：相较于某个路径下，指明的路径</span></span><br><span class="line"><span class="comment">     *   绝对路径：包含盘符在内的文件或文件目录的路径</span></span><br><span class="line"><span class="comment">     * IDEA中：</span></span><br><span class="line"><span class="comment">        如果大家开发使用JUnit中的单元测试方法测试，相对路径即为当前Module下。</span></span><br><span class="line"><span class="comment">        如果大家使用main()测试，相对路径即为当前的Project下。</span></span><br><span class="line"><span class="comment">       Eclipse中：</span></span><br><span class="line"><span class="comment">        不管使用单元测试方法还是使用main()测试，相对路径都是当前的Project下。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3.路径分隔符</span></span><br><span class="line"><span class="comment">     *      windows：\\</span></span><br><span class="line"><span class="comment">     *      unix：/</span></span><br><span class="line"><span class="comment">     *      通用：File.separator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器1</span></span><br><span class="line">        <span class="comment">//相对于当前module</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">        <span class="comment">//绝对路径</span></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"E:\\ideaworkspace\\java-high\\io\\he.txt"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file1);  <span class="comment">// hello.txt</span></span><br><span class="line">        System.out.println(file2);  <span class="comment">// E:\ideaworkspace\java-high\io\he.txt</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器2</span></span><br><span class="line">        File file3 = <span class="keyword">new</span> File(<span class="string">"E:\\ideaworkspace"</span>, <span class="string">"java-high"</span>);</span><br><span class="line">        System.out.println(file3);  <span class="comment">// E:\ideaworkspace\java-high</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器3</span></span><br><span class="line">        File file4 = <span class="keyword">new</span> File(file3, <span class="string">"hi.txt"</span>);</span><br><span class="line">        System.out.println(file4);  <span class="comment">// E:\ideaworkspace\java-high\hi.txt</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 常用方法：</span></span><br><span class="line"><span class="comment">     * 1.获取功能</span></span><br><span class="line"><span class="comment">     public String getAbsolutePath()：获取绝对路径</span></span><br><span class="line"><span class="comment">     public String getPath() ：获取路径</span></span><br><span class="line"><span class="comment">     public String getName() ：获取名称</span></span><br><span class="line"><span class="comment">     public String getParent()：获取上层文件目录路径。若无，返回null</span></span><br><span class="line"><span class="comment">     public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。</span></span><br><span class="line"><span class="comment">     public long lastModified() ：获取最后一次的修改时间，毫秒值</span></span><br><span class="line"><span class="comment">     适用于文件目录:</span></span><br><span class="line"><span class="comment">     public String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组</span></span><br><span class="line"><span class="comment">     public File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">        System.out.println(file1.getAbsolutePath());</span><br><span class="line">        System.out.println(file1.getPath());</span><br><span class="line">        System.out.println(file1.getName());    <span class="comment">//文件名称</span></span><br><span class="line">        System.out.println(file1.getParent());  <span class="comment">//形参为相对路径，找不到上一级</span></span><br><span class="line"></span><br><span class="line">        System.out.println(file1.length());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date(file1.lastModified()));</span><br><span class="line"></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"E:\\ideaworkspace"</span>, <span class="string">"java-high"</span>);</span><br><span class="line">        <span class="keyword">for</span>(String s:file2.list())&#123;     <span class="comment">//名称数组</span></span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(File f:file2.listFiles())&#123;  <span class="comment">//File数组</span></span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.重命名功能</span></span><br><span class="line"><span class="comment">     public boolean renameTo(File dest):把文件重命名为指定的文件路径(移动/重命名)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>); <span class="comment">//目标文件不存在</span></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"hi.txt"</span>);    <span class="comment">//原文件存在</span></span><br><span class="line">        <span class="keyword">boolean</span> bool = file2.renameTo(file1);</span><br><span class="line">        System.out.println(bool);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.判断功能</span></span><br><span class="line"><span class="comment">     public boolean isDirectory()：判断是否是文件目录</span></span><br><span class="line"><span class="comment">     public boolean isFile() ：判断是否是文件</span></span><br><span class="line"><span class="comment">     public boolean exists() ：判断是否存在</span></span><br><span class="line"><span class="comment">     public boolean canRead() ：判断是否可读</span></span><br><span class="line"><span class="comment">     public boolean canWrite() ：判断是否可写</span></span><br><span class="line"><span class="comment">     public boolean isHidden() ：判断是否隐藏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">        System.out.println(file.isDirectory());     <span class="comment">//是否是文件夹</span></span><br><span class="line">        System.out.println(file.isFile());          <span class="comment">//是否是文件</span></span><br><span class="line">        System.out.println(file.exists());          <span class="comment">//是否存在</span></span><br><span class="line">        System.out.println(file.canRead());</span><br><span class="line">        System.out.println(file.canWrite());</span><br><span class="line">        System.out.println(file.isHidden());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4.创建功能</span></span><br><span class="line"><span class="comment">     public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false</span></span><br><span class="line"><span class="comment">     public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。</span></span><br><span class="line"><span class="comment">     public boolean mkdirs() ：创建文件目录。如果上层文件目录不存在，一并创建</span></span><br><span class="line"><span class="comment">     注意事项：如果你创建文件或者文件目录没有写盘符路径，那么， 默认在项目路径下</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//文件创建</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"world.txt"</span>);</span><br><span class="line">        <span class="keyword">if</span>(!file1.exists())&#123;</span><br><span class="line">            file1.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">"创建成功！"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            file1.delete();</span><br><span class="line">            System.out.println(<span class="string">"删除成功！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5.删除功能</span></span><br><span class="line"><span class="comment">     public boolean delete()：删除文件或者文件夹</span></span><br><span class="line"><span class="comment">     删除注意事项：</span></span><br><span class="line"><span class="comment">        Java中的删除不走回收站。</span></span><br><span class="line"><span class="comment">        要删除一个文件目录，请注意该文件目录内不能包含文件或者文件目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">        <span class="comment">//删除文件或文件夹</span></span><br><span class="line">        deleteDirectory(file);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除文件或文件夹</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteDirectory</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果file是文件，直接delete</span></span><br><span class="line">        <span class="comment">// 如果file是目录，先把它的下一级干掉，然后删除自己</span></span><br><span class="line">        <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">            File[] all = file.listFiles();</span><br><span class="line">            <span class="comment">// 循环删除的是file的下一级</span></span><br><span class="line">            <span class="keyword">for</span> (File f : all) &#123;<span class="comment">// f代表file的每一个下级</span></span><br><span class="line">                deleteDirectory(f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除自己</span></span><br><span class="line">        file.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="查找指定文件"><a href="#查找指定文件" class="headerlink" title="查找指定文件"></a>查找指定文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 应用：判断指定目录下是否有后缀名为.jpg的文件，如果有，就输出该文件名称</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindJPGFileTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">File srcFile = <span class="keyword">new</span> File(<span class="string">"d:\\code"</span>);</span><br><span class="line"></span><br><span class="line">String[] fileNames = srcFile.list();</span><br><span class="line"><span class="keyword">for</span>(String fileName : fileNames)&#123;</span><br><span class="line"><span class="keyword">if</span>(fileName.endsWith(<span class="string">".jpg"</span>))&#123;</span><br><span class="line">System.out.println(fileName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">File srcFile = <span class="keyword">new</span> File(<span class="string">"d:\\code"</span>);</span><br><span class="line"></span><br><span class="line">File[] listFiles = srcFile.listFiles();</span><br><span class="line"><span class="keyword">for</span>(File file : listFiles)&#123;</span><br><span class="line"><span class="keyword">if</span>(file.getName().endsWith(<span class="string">".jpg"</span>))&#123;</span><br><span class="line">System.out.println(file.getAbsolutePath());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * File类提供了两个文件过滤器方法</span></span><br><span class="line"><span class="comment"> * public String[] list(FilenameFilter filter)</span></span><br><span class="line"><span class="comment"> * public File[] listFiles(FileFilter filter)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">File srcFile = <span class="keyword">new</span> File(<span class="string">"d:\\code"</span>);</span><br><span class="line"></span><br><span class="line">File[] subFiles = srcFile.listFiles(<span class="keyword">new</span> FilenameFilter() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name.endsWith(<span class="string">".jpg"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(File file : subFiles)&#123;</span><br><span class="line">System.out.println(file.getAbsolutePath());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历指定目录"><a href="#遍历指定目录" class="headerlink" title="遍历指定目录"></a>遍历指定目录</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 应用：遍历指定目录所有文件名称，包括子文件目录中的文件。</span></span><br><span class="line"><span class="comment">拓展1：并计算指定目录占用空间的大小</span></span><br><span class="line"><span class="comment">拓展2：删除指定文件目录及其下的所有文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListFilesTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 递归:文件目录</span></span><br><span class="line"><span class="comment">/** 打印出指定目录所有文件名称，包括子文件目录中的文件 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建目录对象</span></span><br><span class="line">File dir = <span class="keyword">new</span> File(<span class="string">"E:\\teach\\01_javaSE\\_尚硅谷Java编程语言\\3_软件"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.打印目录的子文件</span></span><br><span class="line">printSubFile(dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printSubFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 打印目录的子文件</span></span><br><span class="line">File[] subfiles = dir.listFiles();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (File f : subfiles) &#123;</span><br><span class="line"><span class="keyword">if</span> (f.isDirectory()) &#123;<span class="comment">// 文件目录</span></span><br><span class="line">printSubFile(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// 文件</span></span><br><span class="line">System.out.println(f.getAbsolutePath());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：循环实现</span></span><br><span class="line"><span class="comment">// 列出file目录的下级内容，仅列出一级的话</span></span><br><span class="line"><span class="comment">// 使用File类的String[] list()比较简单</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listSubFiles</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">String[] all = file.list();</span><br><span class="line"><span class="keyword">for</span> (String s : all) &#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(file + <span class="string">"是文件！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列出file目录的下级，如果它的下级还是目录，接着列出下级的下级，依次类推</span></span><br><span class="line"><span class="comment">// 建议使用File类的File[] listFiles()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listAllSubFiles</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">System.out.println(file);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">File[] all = file.listFiles();</span><br><span class="line"><span class="comment">// 如果all[i]是文件，直接打印</span></span><br><span class="line"><span class="comment">// 如果all[i]是目录，接着再获取它的下一级</span></span><br><span class="line"><span class="keyword">for</span> (File f : all) &#123;</span><br><span class="line">listAllSubFiles(f);<span class="comment">// 递归调用：自己调用自己就叫递归</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拓展1：求指定目录所在空间的大小</span></span><br><span class="line"><span class="comment">// 求任意一个目录的总大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDirectorySize</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line"><span class="comment">// file是文件，那么直接返回file.length()</span></span><br><span class="line"><span class="comment">// file是目录，把它的下一级的所有大小加起来就是它的总大小</span></span><br><span class="line"><span class="keyword">long</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">size += file.length();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">File[] all = file.listFiles();<span class="comment">// 获取file的下一级</span></span><br><span class="line"><span class="comment">// 累加all[i]的大小</span></span><br><span class="line"><span class="keyword">for</span> (File f : all) &#123;</span><br><span class="line">size += getDirectorySize(f);<span class="comment">// f的大小;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拓展2：删除指定的目录</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteDirectory</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 如果file是文件，直接delete</span></span><br><span class="line"><span class="comment">// 如果file是目录，先把它的下一级干掉，然后删除自己</span></span><br><span class="line"><span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">File[] all = file.listFiles();</span><br><span class="line"><span class="comment">// 循环删除的是file的下一级</span></span><br><span class="line"><span class="keyword">for</span> (File f : all) &#123;<span class="comment">// f代表file的每一个下级</span></span><br><span class="line">deleteDirectory(f);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除自己</span></span><br><span class="line">file.delete();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6入门</title>
      <link href="/2019/09/15/blog012/"/>
      <url>/2019/09/15/blog012/</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是es6"><a href="#1-什么是es6" class="headerlink" title="1.什么是es6"></a>1.什么是es6</h3><p>ECMAScript 6.0（以下简称ES6）是JavaScript语言的下一代标准，已经在2015年6月正式发布了。它的目标，是使得JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p><p>ECMAScript和JavaScript的关系是，前者是后者的规格，后者是前者的一种实现。</p><p>es6入门文档：<a href="http://caibaojian.com/es6/" target="_blank" rel="noopener">http://caibaojian.com/es6/</a></p><h3 id="2-node中使用es6"><a href="#2-node中使用es6" class="headerlink" title="2.node中使用es6"></a>2.node中使用es6</h3><p><a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a>是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。</p><p>2.1配置文件 .babelrc</p><p>Babel的配置文件是<code>.babelrc</code>，存放在项目的根目录下。使用Babel的第一步，就是配置这个文件。该文件用来设置转码规则和插件，基本格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [],</span><br><span class="line">  <span class="string">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2安装es6转换模块</p><p><code>presets</code>字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES2015转码规则</span></span><br><span class="line">$ npm install --save-dev babel-preset-es2015</span><br><span class="line"></span><br><span class="line"><span class="comment">// react转码规则</span></span><br><span class="line">$ npm install --save-dev babel-preset-react</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></span><br><span class="line">$ npm install --save-dev babel-preset-stage<span class="number">-0</span></span><br><span class="line">$ npm install --save-dev babel-preset-stage<span class="number">-1</span></span><br><span class="line">$ npm install --save-dev babel-preset-stage<span class="number">-2</span></span><br><span class="line">$ npm install --save-dev babel-preset-stage<span class="number">-3</span></span><br></pre></td></tr></table></figure><p>然后，将这些规则加入<code>.babelrc</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>: [</span><br><span class="line">      <span class="string">"es2015"</span>,</span><br><span class="line">      <span class="string">"react"</span>,</span><br><span class="line">      <span class="string">"stage-2"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，Babel工具和模块的使用，都必须先写好<code>.babelrc</code>。</p><p>2.3全局安装命令行工具</p><p>Babel提供<code>babel-cli</code>工具，用于命令行转码。</p><blockquote><p>  cnpm install babel‐cli ‐g</p></blockquote><p>2.4使用</p><blockquote><p>  babel-node js文件名</p></blockquote><h3 id="3-语法新特性"><a href="#3-语法新特性" class="headerlink" title="3.语法新特性"></a>3.语法新特性</h3><h4 id="3-1-变量声明let"><a href="#3-1-变量声明let" class="headerlink" title="3.1 变量声明let"></a>3.1 变量声明let</h4><p>在es6之前，var关键字声明变量。无论声明在何处，都会被视为声明在函数的最顶部，这是函数变量的提升。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bool) &#123;</span><br><span class="line">        <span class="comment">//声明变量</span></span><br><span class="line">        <span class="keyword">var</span> test = <span class="string">'hello man'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(test)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码实际是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> test <span class="comment">// 变量提升</span></span><br><span class="line">    <span class="keyword">if</span>(bool) &#123;</span><br><span class="line">        test = <span class="string">'hello man'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//此处访问test 值为undefined</span></span><br><span class="line">        <span class="built_in">console</span>.log(test)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//此处访问test 值为undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>es6后，通常用let和const来声明，let表示变量、const表示常量。let和const都是块级作用域(在一个函数内部 ，在一个代码块内部)。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量声明let</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b)&#123;</span><br><span class="line">        <span class="comment">//var 全局变量; let 局部变量</span></span><br><span class="line">        <span class="keyword">let</span> a = <span class="string">'abc'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//a 在此处访问不到</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125; </span><br><span class="line">test(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>终端运行：<code>node demo1</code>，会报错：<code>ReferenceError: a is not defined</code></p><h4 id="3-2-常量声明"><a href="#3-2-常量声明" class="headerlink" title="3.2 常量声明"></a>3.2 常量声明</h4><p>const用于常量声明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常量声明，常量不能进行改变</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'abc'</span>;</span><br><span class="line"><span class="comment">// name = "xyz";//再次赋值会报错</span></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure><h4 id="3-3-模板字符串"><a href="#3-3-模板字符串" class="headerlink" title="3.3 模板字符串"></a>3.3 模板字符串</h4><p>反引号(``)，是es6模板字符串</p><p><strong>1.字符串格式化</strong></p><p>将表达式嵌入字符串中进行拼接。用<code>${}</code>来界定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.字符串拼接</span></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'abc'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"你好，"</span>+name+<span class="string">"欢迎来到十次方世界"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6  模板字符串</span></span><br><span class="line"><span class="keyword">let</span> name2 = <span class="string">'xyz'</span>;</span><br><span class="line"><span class="comment">//反引号`是esc键下面的英文符 $&#123;&#125;界定</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`你好，<span class="subst">$&#123;name2&#125;</span>欢迎来到十次方世界`</span>);</span><br></pre></td></tr></table></figure><p><strong>2.换行</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.换行</span></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> info = <span class="string">"Hi \</span></span><br><span class="line"><span class="string">    man!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">var</span> info = <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;span&gt;hello world&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span></span><br></pre></td></tr></table></figure><h4 id="3-4-函数默认参数"><a href="#3-4-函数默认参数" class="headerlink" title="3.4 函数默认参数"></a>3.4 函数默认参数</h4><p>es6为函数参数提供了默认值。在定义函数时便初始化函数参数，以便在参数没有被传递前去使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">num = <span class="number">200</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line">test(<span class="number">500</span>);</span><br></pre></td></tr></table></figure><h4 id="3-5-箭头函数"><a href="#3-5-箭头函数" class="headerlink" title="3.5 箭头函数"></a>3.5 箭头函数</h4><p>就是函数的快捷写法。最直观的三个特点：</p><p><strong>1.不需要function关键字来创建函数</strong><br><strong>2.省略return关键字</strong><br><strong>3.继承当前上下文的 this 关键字</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">var</span> add2 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当函数体中只有return语句时，可简写成下面</span></span><br><span class="line"><span class="keyword">var</span> add3 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">100</span>,<span class="number">200</span>));</span><br><span class="line"><span class="built_in">console</span>.log(add2(<span class="number">100</span>,<span class="number">200</span>));</span><br><span class="line"><span class="built_in">console</span>.log(add3(<span class="number">100</span>,<span class="number">200</span>));</span><br></pre></td></tr></table></figure><h4 id="3-6-对象初始化简写"><a href="#3-6-对象初始化简写" class="headerlink" title="3.6 对象初始化简写"></a>3.6 对象初始化简写</h4><p>ES6允许在对象之中，直接写变量。这时，属性名为变量名, 属性值为变量的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;x, y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">x</span>: x, <span class="attr">y</span>: y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// Object &#123;x: 1, y: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//JSON.stringify()把jsonObject转化为jsonString</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(people(<span class="string">"abc"</span>,<span class="number">12</span>)));</span><br></pre></td></tr></table></figure><p>除了属性简写，方法也可以简写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> birth = <span class="string">'2000/01/01'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Person = &#123;</span><br><span class="line">  name: <span class="string">'张三'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//等同于birth: birth</span></span><br><span class="line">  birth,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 等同于hello: function ()...</span></span><br><span class="line">  hello() &#123; <span class="built_in">console</span>.log(<span class="string">'我的名字是'</span>, <span class="keyword">this</span>.name); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-7-变量的解构赋值"><a href="#3-7-变量的解构赋值" class="headerlink" title="3.7 变量的解构赋值"></a>3.7 变量的解构赋值</h4><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构(Destructuring)。本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。</p><p><strong>1.数组的解构赋值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line">foo <span class="comment">// 1</span></span><br><span class="line">bar <span class="comment">// 2</span></span><br><span class="line">baz <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</span><br><span class="line">third <span class="comment">// "baz"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">head <span class="comment">// 1</span></span><br><span class="line">tail <span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解构不成功，变量的值都会等于`undefined`</span></span><br><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">'a'</span>];</span><br><span class="line">x <span class="comment">// "a"</span></span><br><span class="line">y <span class="comment">// undefined</span></span><br><span class="line">z <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组</span></span><br><span class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br><span class="line">d <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认值</span></span><br><span class="line"><span class="keyword">var</span> [foo = <span class="literal">true</span>] = [];</span><br><span class="line">foo <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>]; <span class="comment">// x='a', y='b'</span></span><br><span class="line">[x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>, <span class="literal">undefined</span>]; <span class="comment">// x='a', y='b'</span></span><br></pre></td></tr></table></figure><p><strong>2.对象的解构赋值</strong></p><p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.属性名与变量名一致</span></span><br><span class="line"><span class="keyword">var</span> &#123; bar, foo &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</span><br><span class="line">foo <span class="comment">// "aaa"</span></span><br><span class="line">bar <span class="comment">// "bbb"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</span><br><span class="line">baz <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.属性名与变量名不一致</span></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">'aaa'</span>, <span class="attr">bar</span>: <span class="string">'bbb'</span> &#125;;</span><br><span class="line">baz <span class="comment">// "aaa"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">first</span>: <span class="string">'hello'</span>, <span class="attr">last</span>: <span class="string">'world'</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">first</span>: f, <span class="attr">last</span>: l &#125; = obj;</span><br><span class="line">f <span class="comment">// 'hello'</span></span><br><span class="line">l <span class="comment">// 'world'</span></span><br></pre></td></tr></table></figure><p>对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</span><br><span class="line">baz <span class="comment">// "aaa"</span></span><br><span class="line">foo <span class="comment">// error: foo is not defined</span></span><br></pre></td></tr></table></figure><p><code>foo</code>是匹配的模式，<code>baz</code>才是变量。真正被赋值的是变量<code>baz</code>，而不是模式<code>foo</code>。注意，采用这种写法时，变量的声明和赋值是一体的。对于<code>let</code>和<code>const</code>来说，变量不能重新声明，所以一旦赋值的变量以前声明过，就会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo;</span><br><span class="line">(&#123;foo&#125; = &#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;); <span class="comment">// 成功</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> baz;</span><br><span class="line">(&#123;<span class="attr">bar</span>: baz&#125; = &#123;<span class="attr">bar</span>: <span class="number">1</span>&#125;); <span class="comment">// 成功</span></span><br></pre></td></tr></table></figure><p><code>let</code>命令下面一行的圆括号是必须的，否则会报错。因为解析器会将起首的大括号，理解成一个代码块，而不是赋值语句。</p><p>解构也可以用于嵌套结构的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  p: [</span><br><span class="line">    <span class="string">'Hello'</span>,</span><br><span class="line">    &#123; <span class="attr">y</span>: <span class="string">'World'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line">x <span class="comment">// "Hello"</span></span><br><span class="line">y <span class="comment">// "World"</span></span><br></pre></td></tr></table></figure><p>注意，这时<code>p</code>是模式，不是变量，因此不会被赋值。</p><h4 id="3-8-Spread-Operator"><a href="#3-8-Spread-Operator" class="headerlink" title="3.8 Spread Operator"></a>3.8 Spread Operator</h4><p><strong>扩展运算符（<code>...</code>）</strong>组装对象或数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组装数组</span></span><br><span class="line"><span class="keyword">const</span> color = [<span class="string">'red'</span>,<span class="string">'green'</span>]</span><br><span class="line"><span class="keyword">const</span> colorful = [...color,<span class="string">'pink'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(colorful)<span class="comment">//[ 'red', 'green', 'pink' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//组装对象</span></span><br><span class="line"><span class="keyword">const</span> people = &#123;<span class="attr">name</span>: <span class="string">'xyz'</span>, <span class="attr">address</span>: <span class="string">'aaaaa'</span>&#125;</span><br><span class="line"><span class="keyword">const</span> peopleful = &#123;...people, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">JSON</span>.stringify(peopleful))<span class="comment">//&#123;"name":"xyz","address":"aaaaa","age":18&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-9-import和export"><a href="#3-9-import和export" class="headerlink" title="3.9 import和export"></a>3.9 import和export</h4><p>import导入模块、export导出模块。</p><p>创建lib.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn0 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fno...'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;fn0&#125;</span><br></pre></td></tr></table></figure><p>创建demo9.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;fn0&#125; <span class="keyword">from</span> <span class="string">'./lib'</span></span><br><span class="line"></span><br><span class="line">fn0()</span><br></pre></td></tr></table></figure><p>注意：node(v8.x)本身并不支持import关键字，所以我们需要使用babel的命令行工具来执行</p><blockquote><p>  babel-node demo9</p></blockquote><h4 id="3-10-Promise对象"><a href="#3-10-Promise对象" class="headerlink" title="3.10 Promise对象"></a>3.10 Promise对象</h4><p>所谓<code>Promise</code>，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。Promise提供统一的API，各种异步操作都可以用同样的方法进行处理。</p><p><code>Promise</code>对象有以下两个特点：</p><p>1.对象的状态不受外界影响。<code>Promise</code>对象代表一个异步操作，有三种状态：<code>Pending</code>（进行中）、<code>Resolved</code>（已完成，又称Fulfilled）和<code>Rejected</code>（已失败）。</p><p>2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。<code>Promise</code>对象的状态改变，只有两种可能：从<code>Pending</code>变为<code>Resolved</code>和从<code>Pending</code>变为<code>Rejected</code>。</p><p><strong>基本用法：</strong></p><p>ES6规定，Promise对象是一个构造函数，用来生成Promise实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。它们是两个函数，由JavaScript引擎提供，不用自己部署。</p><p>Promise实例生成以后，可以用<code>then</code>方法分别指定<code>Resolved</code>状态和<code>Reject</code>状态的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise新建后就会立即执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise'</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Resolved.'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hi!'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise</span></span><br><span class="line"><span class="comment">// Hi!</span></span><br><span class="line"><span class="comment">// Resolved</span></span><br></pre></td></tr></table></figure><p>Promise新建后立即执行，所以首先输出的是“Promise”。然后，<code>then</code>方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以“Resolved”最后输出。</p><p>下面是一个用Promise对象实现的Ajax操作的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getJSON = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    client.open(<span class="string">"GET"</span>, url);</span><br><span class="line">    client.onreadystatechange = handler;</span><br><span class="line">    client.responseType = <span class="string">"json"</span>;</span><br><span class="line">    client.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">    client.send();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(<span class="keyword">this</span>.response);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getJSON(<span class="string">"/posts.json"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Contents: '</span> + json);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'出错了'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>getJSON</code>是对XMLHttpRequest对象的封装，用于发出一个针对JSON数据的HTTP请求，并且返回一个Promise对象。需要注意的是，在<code>getJSON</code>内部，<code>resolve</code>函数和<code>reject</code>函数调用时，都带有参数。</p><p>如果调用<code>resolve</code>函数和<code>reject</code>函数时带有参数，那么它们的参数会被传递给回调函数。<code>reject</code>函数的参数通常是Error对象的实例，表示抛出的错误；<code>resolve</code>函数的参数除了正常的值以外，还可能是另一个Promise实例，表示异步操作的结果有可能是一个值，也有可能是另一个异步操作。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack入门</title>
      <link href="/2019/09/15/blog011/"/>
      <url>/2019/09/15/blog011/</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是webpack"><a href="#1-什么是webpack" class="headerlink" title="1.什么是webpack"></a>1.什么是webpack</h3><p>webpack是一个前端资源加载/打包工具。它根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p><p>官网地址：<a href="https://www.webpackjs.com/" target="_blank" rel="noopener">https://www.webpackjs.com/</a></p><p><img src="/2019/09/15/blog011/hexo01.png" alt="webpack图示"></p><p>从上图看出，webpack可以将多种静态资源js，css，less转换成一个静态文件，减少页面的请求。</p><h3 id="2-webpack安装"><a href="#2-webpack安装" class="headerlink" title="2.webpack安装"></a>2.webpack安装</h3><p>全局安装：</p><blockquote><p>  npm install webpack -g</p><p>  npm install webpack-cli -g</p></blockquote><p>查看版本号：</p><blockquote><p>  webpack -v</p></blockquote><h3 id="3-快速入门"><a href="#3-快速入门" class="headerlink" title="3.快速入门"></a>3.快速入门</h3><h4 id="3-1-js打包"><a href="#3-1-js打包" class="headerlink" title="3.1 js打包"></a>3.1 js打包</h4><p>1.创建src文件，src里创建bar.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bar</span></span><br><span class="line">exports.info = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.src里创建logic.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//logic</span></span><br><span class="line">exports.add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.src里创建main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">var</span> bar = <span class="built_in">require</span>(<span class="string">"./bar"</span>);</span><br><span class="line"><span class="keyword">var</span> logic = <span class="built_in">require</span>(<span class="string">"./logic"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./css1.css'</span>);</span><br><span class="line"></span><br><span class="line">bar.info(<span class="string">"hello world! "</span>+logic.add(<span class="number">100</span>,<span class="number">200</span>));</span><br></pre></td></tr></table></figure><p>4.创建配置文件webpack.config.js，与src处于同级目录</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 读取src文件夹中的main.js(入口文件)</span></span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line"><span class="comment">// path.resolve解析当前相对路径的绝对路径 path.join</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>含义：读取当前目录下src文件夹中的main.js（入口文件）内容，把对应的js文件打包，打包后的文件放入当前目录的dist文件夹下，打包后的js文件名为bundle.js。</p><p>5.执行编译命令</p><blockquote><p>  webpack</p></blockquote><p>编译后查看dist文件夹下的bundle.js文件，会发现该文件包含了上面两个js文件的内容</p><p>6.创建index.html页面，引用bundle.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开index.html页面，查看页面效果</p><h4 id="3-2-css打包"><a href="#3-2-css打包" class="headerlink" title="3.2 css打包"></a>3.2 css打包</h4><p>1.安装style-loader和css-loader</p><p>webpack本身只能处理JavaScript模块，若要处理其他类型的文件，需要使用loader进行转换。</p><p>Loader 可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。这样，我们就可以通过 require 来加载任何类型的模块或文件，比如CoffeeScript、 JSX、 LESS 或图片。首先我们需要安装相关Loader插件，css-loader 是将 css 装载到 javascript；style-loader 是让 javascript 认识css</p><blockquote><p>  cnpm install style‐loader css‐loader ‐‐save‐dev</p></blockquote><p>2.修改webpack.config.js，添加module</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line"><span class="comment">// path.resolve解析当前相对路径的绝对路径 path.join</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [</span><br><span class="line">  <span class="comment">// webpack读取loader时,是从右到左</span></span><br><span class="line">  <span class="comment">// loader执行顺序是从右到左以管道方式链式调用</span></span><br><span class="line">  <span class="comment">// css-loader是将css装载到javascript,style-loader是让javascript认识css</span></span><br><span class="line">  &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>] &#125;</span><br><span class="line">]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3.src里创建css文件夹，css下创建css1.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.修改main.js，引入css1.css</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'./css1.css'</span>);</span><br></pre></td></tr></table></figure><p>5.重新运行webpack</p><p>6.运行index.html，查看页面背景色</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm入门</title>
      <link href="/2019/09/15/blog010/"/>
      <url>/2019/09/15/blog010/</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是npm"><a href="#1-什么是npm" class="headerlink" title="1.什么是npm"></a>1.什么是npm</h3><p>npm全称<strong>node package manager</strong>，是node包管理和分发工具。可以理解为前端的maven。通过npm可以很方便的下载js库，管理前端工程。node已经集成npm工具，在cmd中输入<code>npm -v</code>查看当前npm版本。</p><p>官网地址：<a href="https://www.npmjs.cn/" target="_blank" rel="noopener">https://www.npmjs.cn/</a></p><h3 id="2-npm命令"><a href="#2-npm命令" class="headerlink" title="2.npm命令"></a>2.npm命令</h3><h4 id="2-1初始化工程"><a href="#2-1初始化工程" class="headerlink" title="2.1初始化工程"></a>2.1初始化工程</h4><p><strong>init</strong>命令是工程初始化命令。建立一个空文件夹，cmd中输入</p><blockquote><p>  npm init</p></blockquote><p>按照提示输入相关信息，如果是用默认值则直接回车即可。<br><strong>name</strong>: 项目名称<br><strong>version</strong>: 项目版本号<br><strong>description</strong>: 项目描述<br><strong>keywords</strong>: {Array}关键词，便于用户搜索到我们的项目<br>最后会生成package.json文件，这个是<strong>包的配置文件</strong>，相当于maven的pom.xml</p><h4 id="2-2本地安装"><a href="#2-2本地安装" class="headerlink" title="2.2本地安装"></a>2.2本地安装</h4><p><strong>install</strong>命令用于安装某个模块，若想安装express模块(node的web框架),输出命令为：</p><blockquote><p>  npm install express</p></blockquote><p>在该目录下已经出现了一个node_modules文件夹 和package-lock.json文件。<br><strong>node_modules</strong>文件夹用于存放下载的js库（相当于maven的本地仓库）；<br><strong>package-lock.json</strong>是当 node_modules 或 package.json 发生变化时自动生成的文件。这个文件主要功能是确定当前安装的包的依赖，以便后续重新安装的时候生成相同的依赖，而忽略项目开发过程中有些依赖已经发生的更新。<br>我们再打开package.json文件，发现刚才下载的express已经添加到依赖列表中了.</p><p>关于版本号定义：</p><blockquote><p>  指定版本：比如1.2.2，遵循“大版本.次要版本.小版本”的格式规定，安装时只安装指定版<br>  本。<br>  <strong>波浪号</strong>（tilde）+指定版本：比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但<br>  是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。<br>  <strong>插入号</strong>（caret）+指定版本：比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但<br>  是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插<br>  入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。<br>  <strong>latest</strong>：安装最新版本。</p></blockquote><h4 id="2-3全局安装"><a href="#2-3全局安装" class="headerlink" title="2.3全局安装"></a>2.3全局安装</h4><p>本地安装会将js库安装在当前目录，而使用全局安装会将库安装到全局目录下。全局目录的路径可以修改，修改详情请自行百度。</p><p>查看全局目录路径：</p><blockquote><p>  npm root -g</p></blockquote><p>若全局安装vue：</p><blockquote><p>  npm install vue -g</p></blockquote><h4 id="2-4批量下载"><a href="#2-4批量下载" class="headerlink" title="2.4批量下载"></a>2.4批量下载</h4><p>若从网上下载源码时，只有package.json，没有node_modules文件夹，可以通过<strong>install</strong>命令重新下载所依赖的js库。</p><p>进入package.json所在的目录，输入命令：</p><blockquote><p>  npm install</p></blockquote><p>npm会自动下载package.json中依赖的js库</p><h4 id="2-5淘宝npm镜像"><a href="#2-5淘宝npm镜像" class="headerlink" title="2.5淘宝npm镜像"></a>2.5淘宝npm镜像</h4><p>使用npm下载资源很慢，可以安装cnmp(淘宝镜像)来加快下载速度。</p><p>cmd中输入命令，全局安装cnmp：</p><blockquote><p>  npm install ‐g cnpm ‐‐registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p></blockquote><p>查看cnpm版本：</p><blockquote><p>  cnpm -v</p></blockquote><p>使用cnpm：</p><blockquote><p>  cnpm install 需要下载的js库</p></blockquote><h4 id="2-6运行工程"><a href="#2-6运行工程" class="headerlink" title="2.6运行工程"></a>2.6运行工程</h4><p>若想运行某个工程，使用<strong>run</strong>命令。</p><p>若package.json中定义的脚本为：</p><blockquote><p>  dev是开发阶段测试运行<br>  build是构建编译工程<br>  lint 是运行js代码检测</p></blockquote><p>运行dev：</p><blockquote><p>  npm run dev</p></blockquote><h4 id="2-7编译工程"><a href="#2-7编译工程" class="headerlink" title="2.7编译工程"></a>2.7编译工程</h4><p>代码编译后就可以将工程部署到<strong>nginx</strong>中了，编译后的代码会放在<strong>dist</strong>文件夹中。</p><p>编译命令：实质是底层调用webpack命令来实现打包的</p><blockquote><p>  npm run build</p></blockquote><p>编译后可以看到<strong>dist</strong>文件夹中只有静态页面和一个<strong>static</strong>文件夹，这种工程称之为单页web应用(single page web application，SPA)，就是只有一张web页面的应用，是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node入门</title>
      <link href="/2019/09/15/blog009/"/>
      <url>/2019/09/15/blog009/</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是node"><a href="#1-什么是node" class="headerlink" title="1.什么是node"></a>1.什么是node</h3><p>简单的说node.js就是运行在服务端的JavaScript</p><p>官网地址：<a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a></p><h3 id="2-node安装"><a href="#2-node安装" class="headerlink" title="2.node安装"></a>2.node安装</h3><p>2.1下载node</p><p>node下载：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p><p>2.2命令行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h3 id="3-快速入门"><a href="#3-快速入门" class="headerlink" title="3.快速入门"></a>3.快速入门</h3><h4 id="3-1控制台输出"><a href="#3-1控制台输出" class="headerlink" title="3.1控制台输出"></a>3.1控制台输出</h4><p>创建demo1.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a+b);</span><br></pre></td></tr></table></figure><p>cmd中输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node demo1.js<span class="comment">//结果为3</span></span><br></pre></td></tr></table></figure><h4 id="3-2使用函数"><a href="#3-2使用函数" class="headerlink" title="3.2使用函数"></a>3.2使用函数</h4><p>创建demo2.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用函数</span></span><br><span class="line"><span class="keyword">var</span> c = add(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cmd中输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node demo2.js<span class="comment">//结果为300</span></span><br></pre></td></tr></table></figure><h4 id="3-3模块化编程"><a href="#3-3模块化编程" class="headerlink" title="3.3模块化编程"></a>3.3模块化编程</h4><p>创建demo3_1.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被调用的模块</span></span><br><span class="line">exports.add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建demo3_2.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用模块</span></span><br><span class="line"><span class="keyword">var</span> demo = <span class="built_in">require</span>(<span class="string">"./demo3_1"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(demo.add(<span class="number">200</span>,<span class="number">300</span>));</span><br></pre></td></tr></table></figure><p>cmd中输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node demo3_2.js<span class="comment">//结果为500</span></span><br></pre></td></tr></table></figure><h4 id="3-4创建web服务器"><a href="#3-4创建web服务器" class="headerlink" title="3.4创建web服务器"></a>3.4创建web服务器</h4><p>参考node中文文档：<a href="http://nodejs.cn/api/" target="_blank" rel="noopener">http://nodejs.cn/api/</a></p><p>创建demo4.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建web服务器</span></span><br><span class="line"><span class="comment">//http为node内置的web模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>)</span><br><span class="line"><span class="comment">//创建服务</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 发送 HTTP 头部 </span></span><br><span class="line">    <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">    <span class="comment">// 内容类型: text/plain</span></span><br><span class="line"><span class="keyword">const</span> body = <span class="string">'hello world'</span>;</span><br><span class="line">response.writeHead(<span class="number">200</span>,&#123;</span><br><span class="line"><span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 发送响应数据 "Hello World"</span></span><br><span class="line">response.end(body);</span><br><span class="line">&#125;)</span><br><span class="line">.listen(<span class="number">8888</span>);<span class="comment">//监听8888端口</span></span><br></pre></td></tr></table></figure><p>cmd中输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node demo4.js</span><br></pre></td></tr></table></figure><p>服务启动后，输入网站：<a href="http://localhost:8888" target="_blank" rel="noopener">http://localhost:8888</a>  网页结果：”hello world”  按ctrl+c终止运行</p><h4 id="3-5服务端渲染"><a href="#3-5服务端渲染" class="headerlink" title="3.5服务端渲染"></a>3.5服务端渲染</h4><p>创建demo5.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//理解服务端渲染,循环输出hello world  10次</span></span><br><span class="line"><span class="comment">//客服端渲染可以看到for循环源码，而服务端渲染只能看到for循环的10次hello world结果</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 发送 HTTP 头部 </span></span><br><span class="line">    <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">    <span class="comment">// 内容类型: text/plain</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">    <span class="comment">// 发送响应数据 "Hello World"</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="comment">//write方法可以多次调用</span></span><br><span class="line">response.write(<span class="string">'Hello World\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//end方法只能调用一次，表示消息结束</span></span><br><span class="line">response.end(<span class="string">''</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure><p>cmd中输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node demo5.js</span><br></pre></td></tr></table></figure><p>服务启动后，输入网站：<a href="http://localhost:8888" target="_blank" rel="noopener">http://localhost:8888</a>  网页结果：10条”hello world”字符  按ctrl+c终止运行</p><p>右键“查看源代码”，并没有发现for循环语句，而是10条hello world，说明这个循环时在服务端完成的，而非客户端完成。这与jsp很相似。</p><h4 id="3-6接受参数"><a href="#3-6接受参数" class="headerlink" title="3.6接受参数"></a>3.6接受参数</h4><p>创建demo6.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接受参数</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">//引入url模块，解析url</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line"><span class="comment">//响应设置头信息</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">    <span class="comment">// 解析 url 参数，参考nodejs的api文档</span></span><br><span class="line">    <span class="keyword">var</span> params = url.parse(request.url, <span class="literal">true</span>).query;</span><br><span class="line">    response.write(<span class="string">"name:"</span> + params.name);</span><br><span class="line">    response.write(<span class="string">"\n"</span>);</span><br><span class="line">    response.end();</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure><p>cmd中输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node demo6.js</span><br></pre></td></tr></table></figure><p>服务启动后，输入网站：<a href="http://localhost:8888/?name=abc" target="_blank" rel="noopener">http://localhost:8888/?name=abc</a>  网页结果：”name:abc”  按ctrl+c终止运行</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离</title>
      <link href="/2019/09/15/blog008/"/>
      <url>/2019/09/15/blog008/</url>
      
        <content type="html"><![CDATA[<h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>前后端分离已成为互联网项目开发的业界标准使用方式，通过nginx+tomcat的方式（也可以中间加一个nodejs）有效的进行解耦，并且前后端分离会为以后的大型分布式架构、弹性计算架构、微服务架构、多端化服务（多种客户端，例如：浏览器，车载终端，安卓，IOS等等）打下坚实的基础。</p><p><img src="/2019/09/15/blog008/hexo01.png" alt="前后端分离"></p><h3 id="2-老的方式"><a href="#2-老的方式" class="headerlink" title="2.老的方式"></a>2.老的方式</h3><p>1.产品经理/领导/客户提出需求<br>2.UI做出设计图<br>3.前端工程师做出html页面<br>4.后端工程师将html页面套成jsp页面(前后端强依赖，后端必须要等前端的html做好才能套jsp。如果html发生变更，就更痛了，开发效率低)<br>5.集成出现问题<br>6.前端返工<br>7.后端返工<br>8.二次集成<br>9.集成成功<br>10.交付</p><h3 id="3-新的方式"><a href="#3-新的方式" class="headerlink" title="3.新的方式"></a>3.新的方式</h3><p>1.产品经理/领导/客户提出需求<br>2.UI做出设计图<br>3.前后端约定接口&amp;数据&amp;参数<br>4.前后端并行开发（无强依赖，可前后端并行开发，如果需求变更，只要接口&amp;参数不变，就不用两边都修改代码，开发效率高）<br>5.前后端集成<br>6.前端页面调整<br>7.集成成功<br>8.交付</p><h3 id="4-前端技术架构"><a href="#4-前端技术架构" class="headerlink" title="4.前端技术架构"></a>4.前端技术架构</h3><p><img src="/2019/09/15/blog008/hexo02.png" alt="前端技术栈"></p><p>架构描述：以Node.js为核心的Vue.js前端技术生态架构</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2019/09/02/test/"/>
      <url>/2019/09/02/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 图片 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之建造者模式</title>
      <link href="/2019/08/28/blog007/"/>
      <url>/2019/08/28/blog007/</url>
      
        <content type="html"><![CDATA[<h3 id="1-盖房项目问题"><a href="#1-盖房项目问题" class="headerlink" title="1.盖房项目问题"></a>1.盖房项目问题</h3><p>1)需要建房子：这一过程为打桩、砌墙、封顶<br>2)房子有各种各样的，比如普通房，高楼，别墅，各种房子的过程虽然一样，但是要求不要相同的.</p><p>1.1 思路分析：</p><p><img src="/2019/08/28/blog007/hexo1.png" alt="传统盖房解决方法"></p><p>1.2 传统应用</p><p>AbstractHouse.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHouse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打地基</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//砌墙</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//封顶</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">buildBasic();</span><br><span class="line">buildWalls();</span><br><span class="line">roofed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CommonHouse.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonHouse</span> <span class="keyword">extends</span> <span class="title">AbstractHouse</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"普通房子打地基"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"普通房子砌墙"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"普通房子封顶"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">CommonHouse commonHouse = <span class="keyword">new</span> CommonHouse();</span><br><span class="line">commonHouse.build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.3 传统方式优缺点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)优点是比较好理解，简单易操作。</span><br><span class="line"><span class="number">2</span>)设计的程序结构，过于简单，没有设计缓存层对象，程序的扩展和维护不好. 也就是说，这种设计方案，把产品(即：房子) 和 创建产品的过程(即：建房子流程) 封装在一起，耦合性增强了。</span><br><span class="line">解决方案：将产品和产品建造过程解耦  =&gt;建造者模式.</span><br></pre></td></tr></table></figure><h3 id="2-建造者模式"><a href="#2-建造者模式" class="headerlink" title="2.建造者模式"></a>2.建造者模式</h3><p>2.1 基本介绍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)建造者模式（Builder Pattern） 又叫生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。</span><br><span class="line">建造者模式 是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们， 用户不需要知道内部的具体构建细节。</span><br></pre></td></tr></table></figure><p>2.2 四个角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)Product（产品角色）： 一个具体的产品对象。</span><br><span class="line"><span class="number">2</span>)Builder（抽象建造者）： 创建一个 Product 对象的各个部件指定的 接口/抽象类。</span><br><span class="line"><span class="number">3</span>)ConcreteBuilder（具体建造者）： 实现接口，构建和装配各个部件。</span><br><span class="line"><span class="number">4</span>)Director（指挥者）： 构建一个使用 Builder 接口的对象。它主要是用于创建一个复杂的对象。它主要有两个作用，一是：隔离了客户与对象的生产过程，二是：负责控制产品对象的生产过程。</span><br></pre></td></tr></table></figure><p>2.3 原理类图<img src="/2019/08/28/blog007/hexo2.png" alt="建造者模式类图"></p><p>2.4 应用</p><p>uml类图：</p><p><img src="/2019/08/28/blog007/hexo3.png" alt="建造者模式uml图"></p><p>House.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//产品-&gt;Product</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">House</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String baise;</span><br><span class="line"><span class="keyword">private</span> String wall;</span><br><span class="line"><span class="keyword">private</span> String roofed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HouseBuilder.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象的建造者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> House house = <span class="keyword">new</span> House();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将建造的流程写好, 抽象的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建造房子好， 将产品(房子) 返回</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> House <span class="title">buildHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> house;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CommonHouse.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonHouse</span> <span class="keyword">extends</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">house.setBaise(<span class="string">"普通房子打地基"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">house.setWall(<span class="string">"普通房子砌墙"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">house.setRoofed(<span class="string">"普通房子封顶"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HighBuilding.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighBuilding</span> <span class="keyword">extends</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">house.setBaise(<span class="string">"高楼打地基"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">house.setWall(<span class="string">"高楼砌墙"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">house.setRoofed(<span class="string">"高楼封顶"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HouseDirector.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指挥者，指定制作流程，返回产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseDirector</span></span>&#123;</span><br><span class="line"></span><br><span class="line">HouseBuilder houseBuilder = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器传入 houseBuilder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HouseDirector</span><span class="params">(HouseBuilder houseBuilder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.houseBuilder = houseBuilder;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过setter 传入 houseBuilder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHouseBuilder</span><span class="params">(HouseBuilder houseBuilder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.houseBuilder = houseBuilder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如何处理建造房子的流程，交给指挥者</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> House <span class="title">constructHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">houseBuilder.buildBasic();</span><br><span class="line">houseBuilder.buildWalls();</span><br><span class="line">houseBuilder.roofed();</span><br><span class="line"><span class="keyword">return</span> houseBuilder.buildHouse();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 准备创建房子的指挥者</span></span><br><span class="line">HouseDirector houseDirector = <span class="keyword">new</span> HouseDirector(<span class="keyword">new</span> CommonHouse());</span><br><span class="line"><span class="comment">// 完成盖房子，返回产品(普通房子)</span></span><br><span class="line">House house = houseDirector.constructHouse();</span><br><span class="line">System.out.println(house);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"--------------------------------------------"</span>);</span><br><span class="line"><span class="comment">// 重置建造者</span></span><br><span class="line">houseDirector.setHouseBuilder(<span class="keyword">new</span> HighBuilding());</span><br><span class="line"><span class="comment">// 完成盖房子，返回产品(高楼)</span></span><br><span class="line">House house2 = houseDirector.constructHouse();</span><br><span class="line">System.out.println(house2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-在JDK的应用和源码分析"><a href="#3-在JDK的应用和源码分析" class="headerlink" title="3.在JDK的应用和源码分析"></a>3.在JDK的应用和源码分析</h3><p>java.lang.StringBuilder 中的建造者模式</p><p>代码说明+Debug 源码</p><p>3.1 builder.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//点击StringBuilder类，查看StringBuilder的源码</span></span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder(<span class="string">"hello,world"</span>);</span><br><span class="line">System.out.println(stringBuilder);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2 StringBuilder.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilder</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">CharSequence</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.append(str);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.3 AbstractStringBuilder.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title">Appendable</span>, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> appendNull();</span><br><span class="line">        <span class="keyword">int</span> len = str.length();</span><br><span class="line">        ensureCapacityInternal(count + len);</span><br><span class="line">        str.getChars(<span class="number">0</span>, len, value, count);</span><br><span class="line">        count += len;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.4 Appendable.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Appendable</span> </span>&#123;</span><br><span class="line">  <span class="function">Appendable <span class="title">append</span><span class="params">(CharSequence csq)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">  <span class="function">Appendable <span class="title">append</span><span class="params">(CharSequence csq, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">  <span class="function">Appendable <span class="title">append</span><span class="params">(<span class="keyword">char</span> c)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.5 角色分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)Appendable 接口定义了多个 append 方法(抽象方法), 即 Appendable 为抽象建造者, 定义了抽象方法</span><br><span class="line"><span class="number">2</span>)AbstractStringBuilder  实现了  Appendable  接口方法，这里的  AbstractStringBuilder已经是建造者，只是不能实例化</span><br><span class="line"><span class="number">3</span>)StringBuilder 即充当了指挥者角色，同时充当了具体的建造者，建造方法的实现是由 AbstractStringBuilder 完成 , 而 StringBuilder继承了 AbstractStringBuilder</span><br></pre></td></tr></table></figure><h3 id="4-注意事项和细节"><a href="#4-注意事项和细节" class="headerlink" title="4.注意事项和细节"></a>4.注意事项和细节</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)客户端(使用程序)不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象</span><br><span class="line"><span class="number">2</span>)每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者， 用户使用不同的具体建造者即可得到不同的产品对象</span><br><span class="line"><span class="number">3</span>)可以更加精细地控制产品的创建过程 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰， 也更方便使用程序来控制创建过程</span><br><span class="line"><span class="number">4</span>)增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”</span><br><span class="line"><span class="number">5</span>)建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</span><br><span class="line"><span class="number">6</span>)如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大，因此在这种情况下，要考虑是否选择建造者模式.</span><br><span class="line"><span class="number">7</span>)抽象工厂模式 VS 建造者模式</span><br><span class="line">抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式不需要关心构建过程，只关心什么产品由什么工厂生产即可。而建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之原型模式</title>
      <link href="/2019/08/27/blog006/"/>
      <url>/2019/08/27/blog006/</url>
      
        <content type="html"><![CDATA[<h3 id="1-克隆羊问题"><a href="#1-克隆羊问题" class="headerlink" title="1.克隆羊问题"></a>1.克隆羊问题</h3><p>现在有一只羊 tom，姓名为: tom, 年龄为：1，颜色为：白色，请编写程序创建和 tom 羊 属性完全相同的 10只羊。</p><p>1.1 思路分析：</p><p><img src="/2019/08/27/blog006/hexo1.png" alt="传统克隆羊解决方法"></p><p>1.2 传统应用</p><p>Sheep.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String color;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">(String name, <span class="keyword">int</span> age, String color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//传统的方法</span></span><br><span class="line">Sheep sheep = <span class="keyword">new</span> Sheep(<span class="string">"tom"</span>, <span class="number">1</span>, <span class="string">"白色"</span>);</span><br><span class="line"></span><br><span class="line">Sheep sheep2 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">Sheep sheep3 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">Sheep sheep4 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">Sheep sheep5 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"></span><br><span class="line">System.out.println(sheep);</span><br><span class="line">System.out.println(sheep2);</span><br><span class="line">System.out.println(sheep3);</span><br><span class="line">System.out.println(sheep4);</span><br><span class="line">System.out.println(sheep5);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.3 传统方式优缺点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)优点是比较好理解，简单易操作。</span><br><span class="line"><span class="number">2</span>)在创建新的对象时，总是需要重新获取原始对象的属性，如果创建的对象比较复杂时，效率较低</span><br><span class="line"><span class="number">3</span>)总是需要重新初始化对象，而不是动态地获得对象运行时的状态, 不够灵活</span><br><span class="line"><span class="number">4</span>)改进的思路分析</span><br><span class="line">思路：Java 中 Object 类是所有类的根类，Object 类提供了一个 clone()方法，该方法可以将一个 Java 对象复制一份，但是需要实现 clone 的 Java 类必须要实现一个接口 Cloneable，该接口表示该类能够复制且具有复制的能力  =&gt;  原型模式</span><br></pre></td></tr></table></figure><h3 id="2-原型模式"><a href="#2-原型模式" class="headerlink" title="2.原型模式"></a>2.原型模式</h3><p>2.1 基本介绍：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)原型模式(Prototype 模式)是指：用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象</span><br><span class="line"><span class="number">2</span>)原型模式是一种创建型设计模式，允许一个对象再创建另外一个可定制的对象，无需知道如何创建的细节</span><br><span class="line"><span class="number">3</span>)工作原理是:通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来实施创建，即 对象.clone()</span><br><span class="line"><span class="number">4</span>)形象的理解：孙大圣拔出猴毛， 变出其它孙大圣</span><br></pre></td></tr></table></figure><p>2.2 uml类图：</p><p><img src="/2019/08/27/blog006/hexo2.png" alt="原型模式类图"></p><blockquote><p>  原理结构图说明：<br>  1)Prototype : 原型类，声明一个克隆自己的接口<br>  2)ConcretePrototype: 具体的原型类,  实现一个克隆自己的操作<br>  3)Client: 让一个原型对象克隆自己，从而创建一个新的对象(属性一样）</p></blockquote><p>2.3 应用（浅拷贝）</p><p>Sheep.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现Cloneable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String color;</span><br><span class="line"><span class="keyword">private</span> String address = <span class="string">"蒙古羊"</span>;</span><br><span class="line"><span class="keyword">public</span> Sheep friend; <span class="comment">//是对象, 克隆是会如何处理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">(String name, <span class="keyword">int</span> age, String color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//克隆该实例，使用默认的clone方法来完成</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">Sheep sheep = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">sheep = (Sheep)<span class="keyword">super</span>.clone();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sheep;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"原型模式完成对象的创建"</span>);</span><br><span class="line">Sheep sheep = <span class="keyword">new</span> Sheep(<span class="string">"tom"</span>, <span class="number">1</span>, <span class="string">"白色"</span>);</span><br><span class="line"></span><br><span class="line">sheep.friend = <span class="keyword">new</span> Sheep(<span class="string">"jack"</span>, <span class="number">2</span>, <span class="string">"黑色"</span>);</span><br><span class="line"></span><br><span class="line">Sheep sheep2 = (Sheep)sheep.clone(); <span class="comment">//克隆</span></span><br><span class="line">Sheep sheep3 = (Sheep)sheep.clone(); <span class="comment">//克隆</span></span><br><span class="line">Sheep sheep4 = (Sheep)sheep.clone(); <span class="comment">//克隆</span></span><br><span class="line">Sheep sheep5 = (Sheep)sheep.clone(); <span class="comment">//克隆</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//输出的hashcode码都是一样的（浅拷贝）</span></span><br><span class="line">System.out.println(<span class="string">"sheep2 ="</span> + sheep2 + <span class="string">"sheep2.friend="</span> + sheep2.friend.hashCode());</span><br><span class="line">System.out.println(<span class="string">"sheep3 ="</span> + sheep3 + <span class="string">"sheep3.friend="</span> + sheep3.friend.hashCode());</span><br><span class="line">System.out.println(<span class="string">"sheep4 ="</span> + sheep4 + <span class="string">"sheep4.friend="</span> + sheep4.friend.hashCode());</span><br><span class="line">System.out.println(<span class="string">"sheep5 ="</span> + sheep5 + <span class="string">"sheep5.friend="</span> + sheep5.friend.hashCode());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-浅拷贝与深拷贝"><a href="#3-浅拷贝与深拷贝" class="headerlink" title="3.浅拷贝与深拷贝"></a>3.浅拷贝与深拷贝</h3><p>3.1 浅拷贝介绍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象。</span><br><span class="line"><span class="number">2</span>)对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值</span><br><span class="line"><span class="number">3</span>)前面我们克隆羊就是浅拷贝</span><br><span class="line"><span class="number">4</span>)浅拷贝是使用默认的 clone()方法来实现</span><br><span class="line">sheep = (Sheep) <span class="keyword">super</span>.clone();</span><br></pre></td></tr></table></figure><p>3.2 深拷贝介绍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)复制对象的所有基本数据类型的成员变量值</span><br><span class="line"><span class="number">2</span>)为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象。也就是说，对象进行深拷贝要对整个对象(包括对象的引用类型)进行拷贝</span><br><span class="line"><span class="number">3</span>)深拷贝实现方式 <span class="number">1</span>：重写 clone 方法来实现深拷贝</span><br><span class="line"><span class="number">4</span>)深拷贝实现方式 <span class="number">2</span>：通过对象序列化实现深拷贝(推荐)</span><br></pre></td></tr></table></figure><p>3.3 应用</p><p>DeepCloneableTarget.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepCloneableTarget</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">private</span> String cloneName;</span><br><span class="line"><span class="keyword">private</span> String cloneClass;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DeepCloneableTarget</span><span class="params">(String cloneName, String cloneClass)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cloneName = cloneName;</span><br><span class="line"><span class="keyword">this</span>.cloneClass = cloneClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为该类的属性，都是String , 因此我们这里使用默认的clone完成即可</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DeepProtoType.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepProtoType</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String name; <span class="comment">//String 属性</span></span><br><span class="line"><span class="keyword">public</span> DeepCloneableTarget deepCloneableTarget;<span class="comment">// 引用类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DeepProtoType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝 - 方式 1 使用clone 方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">Object deep = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//这里完成对基本数据类型(属性)和String的克隆</span></span><br><span class="line">deep = <span class="keyword">super</span>.clone(); </span><br><span class="line"><span class="comment">//对引用类型的属性，进行单独处理</span></span><br><span class="line">DeepProtoType deepProtoType = (DeepProtoType)deep;</span><br><span class="line">deepProtoType.deepCloneableTarget  = (DeepCloneableTarget)deepCloneableTarget.clone();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> deepProtoType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝 - 方式2 通过对象的序列化实现 (推荐)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建流对象</span></span><br><span class="line">ByteArrayOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">ByteArrayInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//序列化</span></span><br><span class="line">bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">oos.writeObject(<span class="keyword">this</span>); <span class="comment">//当前这个对象以对象流的方式输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">DeepProtoType copyObj = (DeepProtoType)ois.readObject();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> copyObj;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//关闭流</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bos.close();</span><br><span class="line">oos.close();</span><br><span class="line">bis.close();</span><br><span class="line">ois.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">System.out.println(e2.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">DeepProtoType p = <span class="keyword">new</span> DeepProtoType();</span><br><span class="line">p.name = <span class="string">"宋江"</span>;</span><br><span class="line">p.deepCloneableTarget = <span class="keyword">new</span> DeepCloneableTarget(<span class="string">"大牛"</span>, <span class="string">"小牛"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式1 完成深拷贝：hashcode码是不同的</span></span><br><span class="line"><span class="comment">//DeepProtoType p2 = (DeepProtoType) p.clone();</span></span><br><span class="line"><span class="comment">//System.out.println("p.name=" + p.name + "p.deepCloneableTarget=" + p.deepCloneableTarget.hashCode());</span></span><br><span class="line"><span class="comment">//System.out.println("p2.name=" + p.name + "p2.deepCloneableTarget=" + p2.deepCloneableTarget.hashCode());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2 完成深拷贝：hashcode码是不同的</span></span><br><span class="line">DeepProtoType p2 = (DeepProtoType) p.deepClone();</span><br><span class="line">System.out.println(<span class="string">"p.name="</span> + p.name + <span class="string">"p.deepCloneableTarget="</span> + p.deepCloneableTarget.hashCode());</span><br><span class="line">System.out.println(<span class="string">"p2.name="</span> + p.name + <span class="string">"p2.deepCloneableTarget="</span> + p2.deepCloneableTarget.hashCode());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-在Spring框架中的源码分析"><a href="#4-在Spring框架中的源码分析" class="headerlink" title="4.在Spring框架中的源码分析"></a>4.在Spring框架中的源码分析</h3><p>Spring 中原型 bean 的创建，就是原型模式的应用</p><p>代码分析+debug源码：</p><p>Monster.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Monster</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id = <span class="number">10</span> ;</span><br><span class="line"><span class="keyword">private</span> String nickname = <span class="string">"牛魔王"</span>;</span><br><span class="line"><span class="keyword">private</span> String skill = <span class="string">"芭蕉扇"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Monster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"monster 创建.."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 这里我们的 scope="prototype" 即 原型模式来创建 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"id01"</span> <span class="attr">class</span>=<span class="string">"com.cykj.spring.bean.Monster"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ProtoType.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtoType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line"><span class="comment">// 获取monster[通过id获取monster]</span></span><br><span class="line">      <span class="comment">//在下一行代码打断点进行debug，查看上下文中getBean()方法下的源码</span></span><br><span class="line">Object bean = applicationContext.getBean(<span class="string">"id01"</span>);</span><br><span class="line">System.out.println(<span class="string">"bean"</span> + bean); <span class="comment">// 输出 "牛魔王" .....</span></span><br><span class="line">Object bean2 = applicationContext.getBean(<span class="string">"id01"</span>);</span><br><span class="line">System.out.println(<span class="string">"bean2"</span> + bean2); <span class="comment">//输出 "牛魔王" .....</span></span><br><span class="line"></span><br><span class="line">System.out.println(bean == bean2); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ConfigurableApplicationContext</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="debug下的Spring源码："><a href="#debug下的Spring源码：" class="headerlink" title="debug下的Spring源码："></a>debug下的Spring源码：</h4><p>AbstractApplicationContext.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span><span class="comment">//970行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">assertBeanFactoryActive();</span><br><span class="line">     <span class="comment">//通过AbstractBeanFactory类中的getBean(name)方法</span></span><br><span class="line"><span class="keyword">return</span> getBeanFactory().getBean(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractBeanFactory.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span><span class="comment">//193行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> doGetBean(name, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)<span class="comment">//232行</span></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> Class&lt;T&gt; requiredType, <span class="keyword">final</span> Object[] args, <span class="keyword">boolean</span> typeCheckOnly)</span><span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> String beanName = transformedBeanName(name);</span><br><span class="line">Object bean;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">     <span class="comment">// Create bean instance.</span></span><br><span class="line">     <span class="keyword">if</span> (mbd.isSingleton()) &#123;<span class="comment">//299行</span></span><br><span class="line">       sharedInstance = getSingleton(beanName, <span class="keyword">new</span> ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">             destroySingleton(beanName);</span><br><span class="line">             <span class="keyword">throw</span> ex;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;<span class="comment">//318行</span></span><br><span class="line">       <span class="comment">// It's a prototype -&gt; create a new instance.</span></span><br><span class="line">       Object prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">         beforePrototypeCreation(beanName);</span><br><span class="line">         prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">finally</span> &#123;</span><br><span class="line">         afterPrototypeCreation(beanName);</span><br><span class="line">       &#125;</span><br><span class="line">       bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="5-注意事项和细节"><a href="#5-注意事项和细节" class="headerlink" title="5.注意事项和细节"></a>5.注意事项和细节</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率</span><br><span class="line"><span class="number">2</span>)不用重新初始化对象，而是动态地获得对象运行时的状态</span><br><span class="line"><span class="number">3</span>)如果原始对象发生变化(增加或者减少属性)，其它克隆对象的也会发生相应的变化，无需修改代码</span><br><span class="line"><span class="number">4</span>)在实现深克隆的时候可能需要比较复杂的代码</span><br><span class="line"><span class="number">5</span>)缺点：需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改其源代码，违背了 ocp 原则</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之工厂模式</title>
      <link href="/2019/08/26/blog005/"/>
      <url>/2019/08/26/blog005/</url>
      
        <content type="html"><![CDATA[<h3 id="一：简单工厂模式"><a href="#一：简单工厂模式" class="headerlink" title="一：简单工厂模式"></a>一：简单工厂模式</h3><h4 id="1-看一个具体需求"><a href="#1-看一个具体需求" class="headerlink" title="1.看一个具体需求"></a>1.看一个具体需求</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">看一个披萨的项目：要便于披萨种类的扩展，要便于维护</span><br><span class="line"><span class="number">1</span>)披萨的种类很多(比如 GreekPizz、CheesePizz 等)</span><br><span class="line"><span class="number">2</span>)披萨的制作有 prepare，bake, cut, box</span><br><span class="line"><span class="number">3</span>)完成披萨店订购功能。</span><br></pre></td></tr></table></figure><p>2.传统方式来完成</p><p><img src="/2019/08/26/blog005/hexo1.png" alt="工厂设计模式-传统方式"></p><p>编写 OrderPizza.java 去订购需要的各种 Pizza</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OrderPizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">String orderType; <span class="comment">// 订购披萨的类型</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">orderType = getType();</span><br><span class="line"><span class="keyword">if</span> (orderType.equals(<span class="string">"greek"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">pizza.setName(<span class="string">" 希腊披萨 "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">pizza.setName(<span class="string">" 奶酪披萨 "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> PepperPizza();</span><br><span class="line">pizza.setName(<span class="string">"胡椒披萨"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出pizza 制作过程</span></span><br><span class="line">pizza.prepare();</span><br><span class="line">pizza.bake();</span><br><span class="line">pizza.cut();</span><br><span class="line">pizza.box();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)优点是比较好理解，简单易操作。</span><br><span class="line"><span class="number">2</span>)缺点是违反了设计模式的 ocp 原则，即对扩展开放，对修改关闭。即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码.</span><br><span class="line"><span class="number">3</span>)比如我们这时要新增加一个 Pizza 的种类(Pepper 披萨)，只要是订购 Pizza 的代码都需要修改.</span><br></pre></td></tr></table></figure><p>改进的思路：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">分析：修改代码可以接受，但是如果我们在其它的地方也有创建 Pizza 的代码，就意味着，也需要修改，而创建 Pizza的代码，往往有多处。</span><br><span class="line">思路：把创建 Pizza 对象封装到一个类中，这样我们有新的 Pizza 种类时，只需要修改该类就可，其它有创建到 Pizza对象的代码就不需要修改了.-&gt; 简单工厂模式</span><br></pre></td></tr></table></figure><h4 id="3-基本介绍"><a href="#3-基本介绍" class="headerlink" title="3.基本介绍"></a>3.基本介绍</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)简单工厂模式是属于创建型模式，是工厂模式的一种。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式</span><br><span class="line"><span class="number">2</span>)简单工厂模式：定义了一个创建对象的类，由这个类来封装实例化对象的行为(代码)</span><br><span class="line"><span class="number">3</span>)在软件开发中，当我们会用到大量的创建某种、某类或者某批对象时，就会使用到工厂模式.</span><br></pre></td></tr></table></figure><p>4.使用简单工厂模式</p><p>简单工厂模式的设计方案: 定义一个可以实例化 Pizaa 对象的类，封装创建对象的代码</p><p><img src="/2019/08/26/blog005/hexo2.png" alt="简单工厂模式"></p><p>SimpleFactory.java类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更加orderType 返回对应的Pizza 对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String orderType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"使用简单工厂模式"</span>);</span><br><span class="line"><span class="keyword">if</span> (orderType.equals(<span class="string">"greek"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">pizza.setName(<span class="string">" 希腊披萨 "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">pizza.setName(<span class="string">" 奶酪披萨 "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> PepperPizza();</span><br><span class="line">pizza.setName(<span class="string">"胡椒披萨"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简单工厂模式 也叫 静态工厂模式 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Pizza <span class="title">createPizza2</span><span class="params">(String orderType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"使用简单工厂模式2"</span>);</span><br><span class="line"><span class="keyword">if</span> (orderType.equals(<span class="string">"greek"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">pizza.setName(<span class="string">" 希腊披萨 "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">pizza.setName(<span class="string">" 奶酪披萨 "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> PepperPizza();</span><br><span class="line">pizza.setName(<span class="string">"胡椒披萨"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderPizza.java类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个简单工厂对象</span></span><br><span class="line">SimpleFactory simpleFactory;</span><br><span class="line">Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OrderPizza</span><span class="params">(SimpleFactory simpleFactory)</span> </span>&#123;</span><br><span class="line">setFactory(simpleFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFactory</span><span class="params">(SimpleFactory simpleFactory)</span> </span>&#123;</span><br><span class="line">String orderType = <span class="string">""</span>; <span class="comment">//用户输入的</span></span><br><span class="line"><span class="keyword">this</span>.simpleFactory = simpleFactory; <span class="comment">//设置简单工厂对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">orderType = getType(); </span><br><span class="line">pizza = <span class="keyword">this</span>.simpleFactory.createPizza(orderType);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出pizza</span></span><br><span class="line"><span class="keyword">if</span>(pizza != <span class="keyword">null</span>) &#123; <span class="comment">//订购成功</span></span><br><span class="line">pizza.prepare();</span><br><span class="line">pizza.bake();</span><br><span class="line">pizza.cut();</span><br><span class="line">pizza.box();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">" 订购披萨失败 "</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写一个方法，可以获取客户希望订购的披萨种类</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BufferedReader strin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">System.out.println(<span class="string">"input pizza 种类:"</span>);</span><br><span class="line">String str = strin.readLine();</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用静态工厂模式：OrderPizza2.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">String orderType = <span class="string">""</span>;</span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OrderPizza2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">orderType = getType();</span><br><span class="line">pizza = SimpleFactory.createPizza2(orderType);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出pizza</span></span><br><span class="line"><span class="keyword">if</span> (pizza != <span class="keyword">null</span>) &#123; <span class="comment">// 订购成功</span></span><br><span class="line">pizza.prepare();</span><br><span class="line">pizza.bake();</span><br><span class="line">pizza.cut();</span><br><span class="line">pizza.box();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">" 订购披萨失败 "</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写一个方法，可以获取客户希望订购的披萨种类</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BufferedReader strin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">System.out.println(<span class="string">"input pizza 种类:"</span>);</span><br><span class="line">String str = strin.readLine();</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PizzaStore.java类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相当于一个客户端，发出订购</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//new OrderPizza();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用简单工厂模式</span></span><br><span class="line"><span class="comment">//new OrderPizza(new SimpleFactory());</span></span><br><span class="line"><span class="comment">//System.out.println("~~退出程序~~");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用静态工厂模式</span></span><br><span class="line"><span class="keyword">new</span> OrderPizza2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二：工厂方法模式"><a href="#二：工厂方法模式" class="headerlink" title="二：工厂方法模式"></a>二：工厂方法模式</h3><h4 id="1-新的需求"><a href="#1-新的需求" class="headerlink" title="1.新的需求"></a>1.新的需求</h4><p>披萨项目新的需求：客户在点披萨时，可以点不同口味的披萨，比如 北京的奶酪 pizza、北京的胡椒 pizza 或者是伦敦的奶酪 pizza、伦敦的胡椒 pizza</p><p>2.思路</p><p>2.1 使用简单工厂模式，创建不同的简单工厂类，比如 BJPizzaSimpleFactory、LDPizzaSimpleFactory 等等.从当前这个案例来说，也是可以的，但是考虑到项目的规模，以及软件的可维护性、可扩展性并不是特别好</p><p>2.2 使用工厂方法模式</p><h4 id="3-工厂方法模式介绍"><a href="#3-工厂方法模式介绍" class="headerlink" title="3.工厂方法模式介绍"></a>3.工厂方法模式介绍</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)工厂方法模式设计方案：将披萨项目的实例化功能抽象成抽象方法，在不同的口味点餐子类中具体实现。</span><br><span class="line"><span class="number">2</span>)工厂方法模式：定义了一个创建对象的抽象方法，由子类决定要实例化的类。工厂方法模式将对象的实例化推迟到子类。</span><br></pre></td></tr></table></figure><p>4.应用</p><h5 id="4-1-思路分析"><a href="#4-1-思路分析" class="headerlink" title="4.1 思路分析"></a>4.1 思路分析</h5><p><img src="/2019/08/26/blog005/hexo3.png" alt="工厂方法模式"></p><h5 id="4-2-OrderPizza-java类"><a href="#4-2-OrderPizza-java类" class="headerlink" title="4.2 OrderPizza.java类"></a>4.2 OrderPizza.java类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个抽象方法，createPizza , 让各个工厂子类自己实现</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Pizza <span class="title">createPizza</span><span class="params">(String orderType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OrderPizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">String orderType; <span class="comment">// 订购披萨的类型</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">orderType = getType();</span><br><span class="line">pizza = createPizza(orderType); <span class="comment">//抽象方法，由工厂子类完成</span></span><br><span class="line"><span class="comment">//输出pizza 制作过程</span></span><br><span class="line">pizza.prepare();</span><br><span class="line">pizza.bake();</span><br><span class="line">pizza.cut();</span><br><span class="line">pizza.box();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写一个方法，可以获取客户希望订购的披萨种类</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BufferedReader strin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">System.out.println(<span class="string">"input pizza 种类:"</span>);</span><br><span class="line">String str = strin.readLine();</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-BJOrderPizza-java类"><a href="#4-3-BJOrderPizza-java类" class="headerlink" title="4.3 BJOrderPizza.java类"></a>4.3 BJOrderPizza.java类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BJOrderPizza</span> <span class="keyword">extends</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Pizza <span class="title">createPizza</span><span class="params">(String orderType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(orderType.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> BJCheesePizza();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> BJPepperPizza();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-LDOrderPizza-java类"><a href="#4-4-LDOrderPizza-java类" class="headerlink" title="4.4 LDOrderPizza.java类"></a>4.4 LDOrderPizza.java类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LDOrderPizza</span> <span class="keyword">extends</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Pizza <span class="title">createPizza</span><span class="params">(String orderType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(orderType.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> LDCheesePizza();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> LDPepperPizza();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三：抽象工厂模式"><a href="#三：抽象工厂模式" class="headerlink" title="三：抽象工厂模式"></a>三：抽象工厂模式</h3><p>1.介绍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)抽象工厂模式：定义了一个 <span class="class"><span class="keyword">interface</span> 用于创建相关或有依赖关系的对象簇，而无需指明具体的类</span></span><br><span class="line"><span class="class">2)抽象工厂模式可以将简单工厂模式和工厂方法模式进行整合。</span></span><br><span class="line"><span class="class">3)从设计层面看，抽象工厂模式就是对简单工厂模式的改进(或者称为进一步的抽象)。</span></span><br><span class="line"><span class="class">将工厂抽象成两层，<span class="title">AbsFactory</span>(抽象工厂) 和 具体实现的工厂子类。程序员可以根据创建对象类型使用对应的工厂子类。这样将单个的简单工厂类变成了工厂簇，更利于代码的维护和扩展。</span></span><br></pre></td></tr></table></figure><p>2.应用</p><p>2.1 思路分析</p><p><img src="/2019/08/26/blog005/hexo4.png" alt="抽象工厂模式"></p><p>2.2 AbsFactory.java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个抽象工厂模式的抽象层(接口)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbsFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">//让下面的工厂子类来 具体实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String orderType)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.3 BJFactory.java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是工厂子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BJFactory</span> <span class="keyword">implements</span> <span class="title">AbsFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String orderType)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"~使用的是抽象工厂模式~"</span>);</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(orderType.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> BJCheesePizza();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>))&#123;</span><br><span class="line">pizza = <span class="keyword">new</span> BJPepperPizza();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.4 LDFactory.java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LDFactory</span> <span class="keyword">implements</span> <span class="title">AbsFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String orderType)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"~使用的是抽象工厂模式~"</span>);</span><br><span class="line">Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> LDCheesePizza();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> LDPepperPizza();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.5 OrderPizza.java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">AbsFactory factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OrderPizza</span><span class="params">(AbsFactory factory)</span> </span>&#123;</span><br><span class="line">setFactory(factory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setFactory</span><span class="params">(AbsFactory factory)</span> </span>&#123;</span><br><span class="line">Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">String orderType = <span class="string">""</span>; <span class="comment">// 用户输入</span></span><br><span class="line"><span class="keyword">this</span>.factory = factory;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">orderType = getType();</span><br><span class="line"><span class="comment">// factory 可能是北京的工厂子类，也可能是伦敦的工厂子类</span></span><br><span class="line">pizza = factory.createPizza(orderType);</span><br><span class="line"><span class="keyword">if</span> (pizza != <span class="keyword">null</span>) &#123; <span class="comment">// 订购ok</span></span><br><span class="line">pizza.prepare();</span><br><span class="line">pizza.bake();</span><br><span class="line">pizza.cut();</span><br><span class="line">pizza.box();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"订购失败"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写一个方法，可以获取客户希望订购的披萨种类</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BufferedReader strin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">System.out.println(<span class="string">"input pizza 种类:"</span>);</span><br><span class="line">String str = strin.readLine();</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四：在JDK-Calendar应用的源码分析"><a href="#四：在JDK-Calendar应用的源码分析" class="headerlink" title="四：在JDK-Calendar应用的源码分析"></a>四：在JDK-Calendar应用的源码分析</h3><p>JDK 中的 Calendar 类中，就使用了简单工厂模式</p><p>4.1 Factory.java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// getInstance 是 Calendar 静态方法</span></span><br><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line">    <span class="comment">// 注意月份下标从0开始，所以取月份要+1</span></span><br><span class="line">    System.out.println(<span class="string">"年:"</span> + cal.get(Calendar.YEAR));</span><br><span class="line">    System.out.println(<span class="string">"月:"</span> + (cal.get(Calendar.MONTH) + <span class="number">1</span>));       </span><br><span class="line">    System.out.println(<span class="string">"日:"</span> + cal.get(Calendar.DAY_OF_MONTH));</span><br><span class="line">    System.out.println(<span class="string">"时:"</span> + cal.get(Calendar.HOUR_OF_DAY));</span><br><span class="line">    System.out.println(<span class="string">"分:"</span> + cal.get(Calendar.MINUTE));</span><br><span class="line">    System.out.println(<span class="string">"秒:"</span> + cal.get(Calendar.SECOND));</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.2 Calendar.java类中方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createCalendar(TimeZone.getDefault(), Locale.getDefault(Locale.Category.FORMAT));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//根据 TimeZone zone, locale 创建对应的实例</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Calendar <span class="title">createCalendar</span><span class="params">(TimeZone zone,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           Locale aLocale)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        CalendarProvider provider =</span><br><span class="line">            LocaleProviderAdapter.getAdapter(CalendarProvider.class, aLocale)</span><br><span class="line">                                 .getCalendarProvider();</span><br><span class="line">        <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> provider.getInstance(zone, aLocale);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class="line">                <span class="comment">// fall back to the default instantiation</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Calendar cal = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (aLocale.hasExtensions()) &#123;</span><br><span class="line">            String caltype = aLocale.getUnicodeLocaleType(<span class="string">"ca"</span>);</span><br><span class="line">            <span class="keyword">if</span> (caltype != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (caltype) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"buddhist"</span>:</span><br><span class="line">                cal = <span class="keyword">new</span> BuddhistCalendar(zone, aLocale);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"japanese"</span>:</span><br><span class="line">                    cal = <span class="keyword">new</span> JapaneseImperialCalendar(zone, aLocale);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"gregory"</span>:</span><br><span class="line">                    cal = <span class="keyword">new</span> GregorianCalendar(zone, aLocale);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cal == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (aLocale.getLanguage() == <span class="string">"th"</span> &amp;&amp; aLocale.getCountry() == <span class="string">"TH"</span>) &#123;</span><br><span class="line">                cal = <span class="keyword">new</span> BuddhistCalendar(zone, aLocale);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aLocale.getVariant() == <span class="string">"JP"</span> &amp;&amp; aLocale.getLanguage() == <span class="string">"ja"</span></span><br><span class="line">                       &amp;&amp; aLocale.getCountry() == <span class="string">"JP"</span>) &#123;</span><br><span class="line">                cal = <span class="keyword">new</span> JapaneseImperialCalendar(zone, aLocale);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cal = <span class="keyword">new</span> GregorianCalendar(zone, aLocale);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cal;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="五：总结"><a href="#五：总结" class="headerlink" title="五：总结"></a>五：总结</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)工厂模式的意义将实例化对象的代码提取出来，放到一个类中统一管理和维护，达到和主项目的依赖关系的解耦。从而提高项目的扩展和维护性。</span><br><span class="line"><span class="number">2</span>)三种工厂模式 (简单工厂模式、工厂方法模式、抽象工厂模式)</span><br><span class="line"><span class="number">3</span>)设计模式的依赖抽象原则</span><br><span class="line">创建对象实例时，不要直接 <span class="keyword">new</span> 类, 而是把这个 <span class="keyword">new</span> 类的动作放在一个工厂的方法中，并返回。有的书上说， 变量不要直接持有具体类的引用。</span><br><span class="line">不要让类继承具体类，而是继承抽象类或者是实现 <span class="class"><span class="keyword">interface</span>(接口)</span></span><br><span class="line"><span class="class">不要覆盖基类中已经实现的方法。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之单例设计模式</title>
      <link href="/2019/08/25/blog004/"/>
      <url>/2019/08/25/blog004/</url>
      
        <content type="html"><![CDATA[<h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><h4 id="1-单例设计模式介绍"><a href="#1-单例设计模式介绍" class="headerlink" title="1.单例设计模式介绍"></a>1.单例设计模式介绍</h4><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例， 并且该类只提供一个取得其对象实例的方法(静态方法)。</p><p>比如 Hibernate 的 SessionFactory，它充当数据存储源的代理，并负责创建 Session 对象。SessionFactory 并不是轻量级的，一般情况下，一个项目通常只需要一个 SessionFactory 就够，这是就会使用到单例模式。</p><h4 id="2-单例设计模式5种方式"><a href="#2-单例设计模式5种方式" class="headerlink" title="2.单例设计模式5种方式"></a>2.单例设计模式5种方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）饿汉式（静态变量）</span><br><span class="line">   饿汉式（静态代码块）</span><br><span class="line"><span class="number">2</span>）懒汉式（线程不安全）</span><br><span class="line">   懒汉式（线程安全，同步方法）</span><br><span class="line">   懒汉式（线程不安全，同步代码块）</span><br><span class="line"><span class="number">3</span>）双重检查- 推荐使用</span><br><span class="line"><span class="number">4</span>）静态内部类- 推荐使用</span><br><span class="line"><span class="number">5</span>）枚举- 推荐使用</span><br></pre></td></tr></table></figure><h4 id="3-饿汉式（静态变量）"><a href="#3-饿汉式（静态变量）" class="headerlink" title="3.饿汉式（静态变量）"></a>3.饿汉式（静态变量）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式(静态变量)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"><span class="comment">//1.构造器私有化（防止new）</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//2.本类内部创建对象实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="comment">//3.提供公有静态方法，返回实例对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)优点：写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。</span><br><span class="line"><span class="number">2</span>)缺点：在类装载的时候就完成实例化，没有达到 Lazy Loading 的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费。</span><br><span class="line"><span class="number">3</span>)这种方式基于 classloder 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，在单例模式中大多数都是调用 getInstance 方法， 但是导致类装载的原因有很多种，因此不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 就没有达到 lazy loading 的效果。</span><br><span class="line"><span class="number">4</span>)结论：这种单例模式可用，可能造成内存浪费</span><br></pre></td></tr></table></figure><h4 id="4-饿汉式（静态代码块）"><a href="#4-饿汉式（静态代码块）" class="headerlink" title="4.饿汉式（静态代码块）"></a>4.饿汉式（静态代码块）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式(静态代码块)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"><span class="comment">//1.构造器私有化（防止new）</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//2.本类内部创建对象实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> &#123;<span class="comment">//在静态代码块中，创建单例对象</span></span><br><span class="line">    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.提供公有静态方法，返回实例对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点和上面是一样的。</span><br><span class="line"><span class="number">2</span>)结论：这种单例模式可用，但是可能造成内存浪费</span><br></pre></td></tr></table></figure><h4 id="5-懒汉式（线程不安全）"><a href="#5-懒汉式（线程不安全）" class="headerlink" title="5.懒汉式（线程不安全）"></a>5.懒汉式（线程不安全）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//懒汉式(线程不安全)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"><span class="comment">//声明实例变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"><span class="comment">//构造器私有化</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">//提供静态公有方法，当使用该方法是，才创建该对象实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">//当第一个线程还未执行下面语句时，第二个线程也进来了</span></span><br><span class="line">singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)起到了 Lazy Loading 的效果，但是只能在单线程下使用。</span><br><span class="line"><span class="number">2</span>)如果在多线程下，一个线程进入了 <span class="keyword">if</span> (singleton == <span class="keyword">null</span>)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式</span><br><span class="line"><span class="number">3</span>)结论：在实际开发中，不要使用这种方式.</span><br></pre></td></tr></table></figure><h4 id="6-懒汉式（线程安全-同步方法）"><a href="#6-懒汉式（线程安全-同步方法）" class="headerlink" title="6.懒汉式（线程安全,同步方法）"></a>6.懒汉式（线程安全,同步方法）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//懒汉式(线程安全，同步方法)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"><span class="comment">//声明实例变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"><span class="comment">//构造器私有化</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">//提供静态公有方法，加入同步处理代码，解决线程安全问题，效率较低</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)解决了线程安全问题</span><br><span class="line"><span class="number">2</span>)效率太低了，每个线程在想获得类的实例时候，执行 getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接 <span class="keyword">return</span> 就行了。方法进行同步效率太低</span><br><span class="line"><span class="number">3</span>)结论：在实际开发中，不推荐使用这种方式</span><br></pre></td></tr></table></figure><h4 id="7-懒汉式（线程不安全，同步代码块）"><a href="#7-懒汉式（线程不安全，同步代码块）" class="headerlink" title="7.懒汉式（线程不安全，同步代码块）"></a>7.懒汉式（线程不安全，同步代码块）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//懒汉式(线程不安全，同步代码块)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"><span class="comment">//声明实例变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"><span class="comment">//构造器私有化</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">//提供静态公有方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//同步代码块，解决不了线程安全问题，可解决效率</span></span><br><span class="line"><span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">线程不安全，不推荐使用</span><br></pre></td></tr></table></figure><h4 id="8-双重检查"><a href="#8-双重检查" class="headerlink" title="8.双重检查"></a>8.双重检查</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双重检查(线程安全，懒加载，效率较高)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"><span class="comment">//声明实例变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</span><br><span class="line"><span class="comment">//构造器私有化</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">//提供静态公有方法，加入双重检查，解决线程安全问题，同时解决懒加载，同时保证了效率，推荐使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//同步代码块，解决不了线程安全问题，可解决效率</span></span><br><span class="line"><span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="comment">//解决线程安全问题</span></span><br><span class="line"><span class="keyword">if</span>(singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)Double-Check 概念是多线程开发中常使用到的，如代码中所示，我们进行了两次 <span class="keyword">if</span> (singleton == <span class="keyword">null</span>)检查，这样就可以保证线程安全了。</span><br><span class="line"><span class="number">2</span>)这样，实例化代码只用执行一次，后面再次访问时，判断 <span class="keyword">if</span> (singleton == <span class="keyword">null</span>)，直接 <span class="keyword">return</span> 实例化对象，也避免的反复进行方法同步.</span><br><span class="line"><span class="number">3</span>)线程安全；延迟加载；效率较高</span><br><span class="line"><span class="number">4</span>)结论：在实际开发中，推荐使用这种单例设计模式</span><br></pre></td></tr></table></figure><h4 id="9-静态内部类"><a href="#9-静态内部类" class="headerlink" title="9.静态内部类"></a>9.静态内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态内部类(线程安全，懒加载，效率高)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"><span class="comment">//构造器私有化</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">//静态内部类，推荐使用</span></span><br><span class="line"><span class="comment">//加载Singleton类时不会加载静态内部类，保证了懒加载</span></span><br><span class="line"><span class="comment">//调用getInstance方法时，才加载静态内部类，利用jvm底层类加载机制，保证了线程的安全性</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//提供静态公有方法，</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)这种方式采用了类装载的机制来保证初始化实例时只有一个线程。</span><br><span class="line"><span class="number">2</span>)静态内部类方式在 Singleton 类被装载时并不会立即实例化，而是在需要实例化时，调用 getInstance 方法，才会装载 SingletonInstance 类，从而完成 Singleton 的实例化。</span><br><span class="line"><span class="number">3</span>)类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM 帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</span><br><span class="line"><span class="number">4</span>)优点：避免了线程不安全，利用静态内部类特点实现延迟加载，效率高</span><br><span class="line"><span class="number">5</span>)结论：推荐使用.</span><br></pre></td></tr></table></figure><h4 id="10-枚举"><a href="#10-枚举" class="headerlink" title="10.枚举"></a>10.枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//枚举(线程安全，懒加载)，推荐使用</span></span><br><span class="line"><span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">INSTANCE;<span class="comment">//属性</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"ok~"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)这借助 JDK1.5 中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。</span><br><span class="line"><span class="number">2</span>)这种方式是 Effective Java 作者 Josh Bloch  提倡的方式</span><br><span class="line"><span class="number">3</span>)结论：推荐使用</span><br></pre></td></tr></table></figure><h4 id="11-单例模式在JDK应用的源码分析"><a href="#11-单例模式在JDK应用的源码分析" class="headerlink" title="11.单例模式在JDK应用的源码分析"></a>11.单例模式在JDK应用的源码分析</h4><p>JDK中，java.lang.Runtime就是经典的单例模式（饿汉式）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runtime</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Runtime currentRuntime = <span class="keyword">new</span> Runtime();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title">getRuntime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> currentRuntime;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Runtime</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-单例模式注意事项和细节说明"><a href="#12-单例模式注意事项和细节说明" class="headerlink" title="12.单例模式注意事项和细节说明"></a>12.单例模式注意事项和细节说明</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)单例模式保证了 系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能</span><br><span class="line"><span class="number">2</span>)当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用 <span class="keyword">new</span></span><br><span class="line"><span class="number">3</span>)单例模式使用的场景：需要频繁的进行创建和销毁的对象、创建对象时耗时过多或耗费资源过多(即：重量级对象)，但又经常用到的对象、工具类对象、频繁访问数据库或文件的对象(比如数据源、session 工厂等)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式概念</title>
      <link href="/2019/08/24/blog003/"/>
      <url>/2019/08/24/blog003/</url>
      
        <content type="html"><![CDATA[<h3 id="一：设计模式的层次"><a href="#一：设计模式的层次" class="headerlink" title="一：设计模式的层次"></a>一：设计模式的层次</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第<span class="number">1</span>层:刚开始学编程不久,听说过什么是设计模式</span><br><span class="line">第<span class="number">2</span>层:有很长时间的编程经验, 自己写了很多代码,其中用到了设计模式,但是自己却不知道第<span class="number">3</span>层:学习过了设计模式,发现自己已经在使用了,并且发现了一些新的模式挺好用的</span><br><span class="line">第<span class="number">4</span>层:阅读了很多别人写的源码和框架,在其中看到别人设计模式,并且能够领会设计模式的精妙和带来的好处</span><br><span class="line">第<span class="number">5</span>层:代码写着写着,自己都没有意识到使用了设计模式,并且熟练的写了出来。</span><br></pre></td></tr></table></figure><h3 id="二：设计模式介绍"><a href="#二：设计模式介绍" class="headerlink" title="二：设计模式介绍"></a>二：设计模式介绍</h3><p>模式不是代码，而是某类问题的通用解决方案，设计模式代表了最佳的实践。<br>提高软件的维护性，通用性和扩展性，并降低软件的复杂度</p><h3 id="三：设计模式类型"><a href="#三：设计模式类型" class="headerlink" title="三：设计模式类型"></a>三：设计模式类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">设计模式分为三种类型，共<span class="number">23</span>种：</span><br><span class="line"><span class="number">1</span>)创建型模式:单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式。</span><br><span class="line"><span class="number">2</span>)结构型模式:适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。</span><br><span class="line"><span class="number">3</span>)行为型模式:模版方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式( Interpreter模式) 、状态模式、策略模式、职责链模式(责任链模式)。</span><br><span class="line">注意:不同的书籍上对分类和名称略有差别</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML类图及类之间关系</title>
      <link href="/2019/08/23/blog002/"/>
      <url>/2019/08/23/blog002/</url>
      
        <content type="html"><![CDATA[<h3 id="一：UML类图"><a href="#一：UML类图" class="headerlink" title="一：UML类图"></a>一：UML类图</h3><h4 id="1-UML基本介绍"><a href="#1-UML基本介绍" class="headerlink" title="1.UML基本介绍"></a>1.UML基本介绍</h4><p>UML：统一建模语言，是一种用于软件系统分析和设计的语言工具</p><p><img src="/2019/08/23/blog002/hexo1.png" alt="UML类图"></p><h4 id="2-UML图"><a href="#2-UML图" class="headerlink" title="2.UML图"></a>2.UML图</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UML图分类：</span><br><span class="line">用例图</span><br><span class="line">静态结构图：类图，对象图，包图，组件图，部署图</span><br><span class="line">动态行为图：交互图，状态图，活动图</span><br><span class="line">类图是描述类与类之间的关系的，是UML图中最核心的</span><br></pre></td></tr></table></figure><h4 id="3-UML类图"><a href="#3-UML类图" class="headerlink" title="3.UML类图"></a>3.UML类图</h4><p>用于描述系统中类(对象)本身的组成和类(对象)之间的各种静态关系<br>类之间的关系：依赖，泛化(继承)，实现，关联，聚合与组合</p><h5 id="3-1依赖关系"><a href="#3-1依赖关系" class="headerlink" title="3.1依赖关系"></a>3.1依赖关系</h5><p>只要在类中用到了对方，那么他们之间就存在依赖关系。如没有对方，连编译都通过不了</p><p><img src="/2019/08/23/blog002/hexo2.png" alt="依赖关系"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">小结：</span><br><span class="line"><span class="number">1</span>）类中用到了对方</span><br><span class="line"><span class="number">2</span>）如果是类的成员属性</span><br><span class="line"><span class="number">3</span>）如果是方法的返回类型</span><br><span class="line"><span class="number">4</span>）如果是方法接受的参数类型</span><br><span class="line"><span class="number">5</span>）方法中使用到(局部)</span><br></pre></td></tr></table></figure><h5 id="3-2泛化关系"><a href="#3-2泛化关系" class="headerlink" title="3.2泛化关系"></a>3.2泛化关系</h5><p>实际上就是继承关系，是依赖关系的特例</p><p><img src="/2019/08/23/blog002/hexo3.png" alt="继承"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">小结：</span><br><span class="line"><span class="number">1</span>）泛化关系实际上就是继承关系</span><br><span class="line"><span class="number">2</span>）如果A类继承了B类，就说A和B存在泛化关系</span><br></pre></td></tr></table></figure><h5 id="3-3实现关系"><a href="#3-3实现关系" class="headerlink" title="3.3实现关系"></a>3.3实现关系</h5><p>实际上是A类实现B接口，是依赖关系的特例</p><p><img src="/2019/08/23/blog002/hexo4.png" alt="实现"></p><h5 id="3-4关联关系"><a href="#3-4关联关系" class="headerlink" title="3.4关联关系"></a>3.4关联关系</h5><p>实际上就是类与类之间的联系，是依赖关系的特例<br>关联具有导航性：即双向关系或单向关系<br>关联具有多重性：一对多，多对一，多对多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单向一对一关系</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> IDCard card;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//双向一对一关系</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> IDCard card;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IDCard</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Person person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-5聚合关系"><a href="#3-5聚合关系" class="headerlink" title="3.5聚合关系"></a>3.5聚合关系</h5><p>聚合关系(Aggregation)表示的是整体和部分的关系,整体与部分可以分开。聚合关系是关联关系的特例,所以他具有关联的导航性与多重性。</p><p>如:一台电脑由键盘(keyboard)、显示器(monitor),鼠标等组成;组成电脑的各个配件是可以从电脑上分离出来的,使用带空心菱形的实线来表示:</p><p><img src="/2019/08/23/blog002/hexo5.png" alt="聚合"></p><h5 id="3-6组合关系"><a href="#3-6组合关系" class="headerlink" title="3.6组合关系"></a>3.6组合关系</h5><p>组合关系:也是整体与部分的关系,但是整体与部分不可以分开。<br>再看一个案例:在程序中我们定义实体: Person与IDCard, Head,那么Head和Person就是组合, IDCard和 Person就是聚合。<br>但是如果在程序中Person实体中定义了对IDCard进行级联删除,即删除Person时连同IDCard一起删除,那么IDCard和Person就是组合了。</p><p><img src="/2019/08/23/blog002/hexo6.png" alt="组合"></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式六大原则</title>
      <link href="/2019/08/22/blog001/"/>
      <url>/2019/08/22/blog001/</url>
      
        <content type="html"><![CDATA[<h3 id="一：设计模式七大原则"><a href="#一：设计模式七大原则" class="headerlink" title="一：设计模式七大原则"></a>一：设计模式七大原则</h3><h4 id="1-设计模式的目的"><a href="#1-设计模式的目的" class="headerlink" title="1.设计模式的目的"></a>1.设计模式的目的</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">编写软件过程中,程序员面临着来自耦合性,内聚性以及可维护性,可扩展性,重用性,灵活性等多方面的挑战,设计模式是为了让程序(软件),具有更好</span><br><span class="line">    <span class="number">1</span>)代码重用性(即:相同功能的代码,不用多次编写)</span><br><span class="line">    <span class="number">2</span>)可读性(即:编程规范性,便于其他程序员的阅读和理解)</span><br><span class="line">    <span class="number">3</span>)可扩展性(即:当需要增加新的功能时,非常的方便,称为可维护)</span><br><span class="line">    <span class="number">4</span>)可靠性(即:当我们增加新的功能后,对原来的功能没有影响)</span><br><span class="line">    <span class="number">5</span>)使程序呈现高内聚,低耦合的特性</span><br></pre></td></tr></table></figure><h4 id="2-设计模式七大原则"><a href="#2-设计模式七大原则" class="headerlink" title="2.设计模式七大原则"></a>2.设计模式七大原则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">设计模式原则,其实就是程序员在编程时,应当遵守的原则,也是各种设计模式的基础(即:设计模式为什么这样设计的依据)</span><br><span class="line">设计模式常用的七大原则有：</span><br><span class="line"><span class="number">1</span>）单一职责原则</span><br><span class="line"><span class="number">2</span>）接口隔离原则</span><br><span class="line"><span class="number">3</span>）依赖倒转原则</span><br><span class="line"><span class="number">4</span>）里氏替换原则</span><br><span class="line"><span class="number">5</span>）开闭原则</span><br><span class="line"><span class="number">6</span>）迪米特法则</span><br><span class="line"><span class="number">7</span>）合成复用原则</span><br></pre></td></tr></table></figure><h4 id="3-单一职责原则"><a href="#3-单一职责原则" class="headerlink" title="3.单一职责原则"></a>3.单一职责原则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.介绍：一个类应该只负责一项职责</span><br><span class="line"><span class="number">2</span>.注意事项和细节：</span><br><span class="line">    <span class="number">1</span>)降低类的复杂度,一个类只负责一项职责。</span><br><span class="line">    <span class="number">2</span>)提高类的可读性,可维护性</span><br><span class="line">    <span class="number">3</span>)降低变更引起的风险</span><br><span class="line">    <span class="number">4</span>)通常情况下,我们应当遵守单一职责原则,只有逻辑足够简单,才可以在代码级违反单一职责原则;只有类中方法数量足够少,可以在方法级别保持单一职责原则</span><br></pre></td></tr></table></figure><h4 id="4-接口隔离原则"><a href="#4-接口隔离原则" class="headerlink" title="4.接口隔离原则"></a>4.接口隔离原则</h4><p>介绍：一个类对另一个类的依赖应该建立在最小的接口上</p><p><img src="/2019/08/22/blog001/hexo1.png" alt="单一职责"></p><blockquote><p>  传统方法的问题：类A通过接口Interface依赖类B,类C通过接口Interface依赖类D,如果接口Interface对于类A和类c来说不是最小接口，那么类B和类D必须去实现他们不需要的方法<br>  接口隔离原则改进：接口interface中出现的方法，按实际情况拆分为多个接口</p></blockquote><h4 id="5-依赖倒转原则"><a href="#5-依赖倒转原则" class="headerlink" title="5.依赖倒转原则"></a>5.依赖倒转原则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.介绍：</span><br><span class="line"><span class="number">1</span>）细节应该依赖抽象</span><br><span class="line"><span class="number">2</span>）中心思想：面向接口编程</span><br><span class="line"><span class="number">3</span>）设计理念：相对于细节的多变性,抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在java中,抽象指的是接口或抽象类,细节就是具体的实现类</span><br><span class="line"><span class="number">4</span>）使用接口或抽象类的目的是制定好规范,而不涉及任何具体的操作,把展现细节的任务交给他们的实现类去完成</span><br><span class="line"><span class="number">2</span>.依赖关系传递的三种方式：</span><br><span class="line"><span class="number">1</span>）接口传递</span><br><span class="line"><span class="number">2</span>）构造方法传递</span><br><span class="line"><span class="number">3</span>）setter方式传递</span><br><span class="line"><span class="number">3</span>.注意事项和细节：</span><br><span class="line"><span class="number">1</span>)低层模块尽量都要有抽象类或接口,或者两者都有,程序稳定性更好.</span><br><span class="line">  <span class="number">2</span>)变量的声明类型尽量是抽象类或接口,这样我们的变量引用和实际对象间,就存在一个缓冲层,利于程序扩展和优化</span><br><span class="line">  <span class="number">3</span>)继承时遵循里氏替换原则</span><br></pre></td></tr></table></figure><h4 id="6-里氏替换原则"><a href="#6-里氏替换原则" class="headerlink" title="6.里氏替换原则"></a>6.里氏替换原则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.oo中的继承性的思考和说明：</span><br><span class="line">继承在给程序设计带来便利的同时,也带来了弊端。比如使用继承会给程序带来侵入性,程序的可移植性降低,·增加对象间的耦合性,如果一个类被其他的类所继承,则当这个类需要修改时,必须考虑到所有的子类,并且义类修改后,所有涉及到子类的功能都有可能产生故障</span><br><span class="line"><span class="number">2</span>.介绍：</span><br><span class="line"><span class="number">1</span>）所有引用基类的地方必须能透明地使用其子类的对象</span><br><span class="line"><span class="number">2</span>）使用继承时，在子类中尽量不要重写父类的方法</span><br><span class="line"><span class="number">3</span>）里氏原则告诉我们，继承实际让两个类耦合性增强了，在适当情况下，可以通过聚合，组合，依赖来解决问题</span><br><span class="line"><span class="number">3</span>.解决方法：</span><br><span class="line"><span class="number">1</span>）在实际编程中,我们常常会通过重写父类的方法完成新的功能,这样写起来虽然简单,但整个继承体系的复用性会比较差。特别是运行多态比较频繁的时候</span><br><span class="line"><span class="number">2</span>）方法：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖，聚合，组合等关系代替。</span><br></pre></td></tr></table></figure><h4 id="7-开闭原则"><a href="#7-开闭原则" class="headerlink" title="7.开闭原则"></a>7.开闭原则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.介绍：</span><br><span class="line"><span class="number">1</span>）开闭原则是编程中最基础，最重要的设计原则</span><br><span class="line"><span class="number">2</span>）类，模块和函数应该对扩展开放(提供方)，对修改关闭(使用方)。用抽象构建框架，用实现扩展细节。（即当给类增加新功能时，尽量不修改代码，或尽可能少修改代码）</span><br><span class="line"><span class="number">3</span>）当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化</span><br></pre></td></tr></table></figure><h4 id="8-迪米特法则"><a href="#8-迪米特法则" class="headerlink" title="8.迪米特法则"></a>8.迪米特法则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.介绍：</span><br><span class="line"><span class="number">1</span>）迪米特法则(Demeter Principle)又叫最少知道原则,即一个类对自己依赖的类知道的越少越好。也就是说,对于被依赖的类不管多么复杂,都尽量将逻辑封装在类的内部。对外除了提供的<span class="keyword">public</span>方法,不对外泄露任何信息</span><br><span class="line"><span class="number">2</span>）迪米特法则还有个更简单的定义:只与直接的朋友通信</span><br><span class="line"><span class="number">3</span>）直接的朋友:每个对象都会与其他对象有耦合关系,只要两个对象之间有耦合关系,我们就说这两个对象之间是朋友关系。耦合的方式很多,依赖,关联,组合,聚合等。其中,我们称出现成员变量,方法参数,方法返回值中的类为直接的朋友,而出现在局部变量中的类不是直接的朋友。也就是说,陌生的类最好不要以局部变量的形式出现在类的内部。</span><br><span class="line"><span class="number">2</span>.注意事项和细节</span><br><span class="line"><span class="number">1</span>）迪米特法则的核心是降低类之间的耦合</span><br><span class="line"><span class="number">2</span>）但是注意:由于每个类都减少了不必要的依赖,因此迪米特法则只是要求降低类间(对象间)耦合关系, 并不是要求完全没有依赖关系</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>firstBlog</title>
      <link href="/2019/08/21/firstBlog/"/>
      <url>/2019/08/21/firstBlog/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容</p><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://www.cnblogs.itzlg" target="_blank" rel="noopener">www.cnblogs.itzlg</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
