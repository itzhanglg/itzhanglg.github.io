<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LIGONG`S BLOG</title>
  
  <subtitle>技术分享及生活中的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhangligong.xyz/"/>
  <updated>2019-11-24T07:43:06.153Z</updated>
  <id>http://zhangligong.xyz/</id>
  
  <author>
    <name>ligong zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue axios应用</title>
    <link href="http://zhangligong.xyz/2019/11/24/blog036/"/>
    <id>http://zhangligong.xyz/2019/11/24/blog036/</id>
    <published>2019-11-24T07:27:56.000Z</published>
    <updated>2019-11-24T07:43:06.153Z</updated>
    
    <content type="html"><![CDATA[<p>编写小的demo应用axios异步请求.<br><strong>效果图示:</strong><br><img src="https://img-blog.csdnimg.cn/20191119025501372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>功能: 用户在输入框中输入信息进行搜索,并搜索状态随之改变(四种状态).</p><p><strong>项目目录:</strong><br><img src="https://img-blog.csdnimg.cn/20191119025822306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>代码:</strong></p><h3 id="1-index-html"><a href="#1-index-html" class="headerlink" title="1.index.html"></a>1.index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue_demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./static/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-main-js"><a href="#2-main-js" class="headerlink" title="2.main.js"></a>2.main.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-App-vue"><a href="#3-App-vue" class="headerlink" title="3.App.vue"></a>3.App.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Search</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">users-main</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Search <span class="keyword">from</span> <span class="string">'./components/Search'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">'./components/Main'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    data () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    components: &#123;</span><br><span class="line">      Search,</span><br><span class="line">      UsersMain: Main</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-Search-vue"><a href="#4-Search-vue" class="headerlink" title="4.Search.vue"></a>4.Search.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"jumbotron-heading"</span>&gt;</span>Search Github Users<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"enter the name you search"</span> <span class="attr">v-model</span>=<span class="string">"searchName"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"search"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">'pubsub-js'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        searchName: <span class="string">''</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      search() &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// 获取输入信息</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> searchName = <span class="keyword">this</span>.searchName.trim()</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(searchName)</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (searchName)&#123;  <span class="comment">// 当不为空字符串时</span></span></span><br><span class="line"><span class="javascript">          PubSub.publish(<span class="string">'searchInfo'</span>, searchName)  <span class="comment">// 发布搜索的消息:消息名和数据</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-Main-vue"><a href="#5-Main-vue" class="headerlink" title="5.Main.vue"></a>5.Main.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"firstView"</span>&gt;</span>请输入用户名进行搜素<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"loading"</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"errorMsg"</span>&gt;</span>&#123;&#123;errorMsg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span> <span class="attr">v-for</span>=<span class="string">"(user,index) in users"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"user.url"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"user.avatar_url"</span> <span class="attr">style</span>=<span class="string">'width: 100px'</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text"</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">'pubsub-js'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        firstView: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        loading: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        users: <span class="literal">null</span>,  <span class="comment">// [&#123;url: '', avatar_url: '', name: ''&#125;]</span></span></span><br><span class="line"><span class="javascript">        errorMsg: <span class="string">''</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 订阅搜索的消息,绑定监听; 在点击search按钮后发送ajax请求</span></span></span><br><span class="line"><span class="javascript">      PubSub.subscribe(<span class="string">'searchInfo'</span>,(msg, searchName) =&gt;&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义url</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> url = <span class="string">` https://api.github.com/search/users?q=<span class="subst">$&#123;searchName&#125;</span>`</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 更新状态(请求中)</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.firstView = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.loading = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.users = <span class="literal">null</span>   <span class="comment">// 这里需重新设置为null,不然加载时会显示上一次users信息</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.errorMsg = <span class="string">''</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 发送ajax请求</span></span></span><br><span class="line"><span class="javascript">        axios.get(url).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 请求成功</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> result = response.data</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> users = result.items.map(<span class="function"><span class="params">item</span> =&gt;</span> (&#123;</span></span><br><span class="line">            url: item.html_url,</span><br><span class="line">            avatar_url: item.avatar_url,</span><br><span class="line">            name: item.login</span><br><span class="line">          &#125;))</span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">// 更新状态(成功)</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.loading = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.users = users</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 请求失败(失败)</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.loading = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.errorMsg = <span class="string">'请求失败'</span></span></span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .card &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 33.333%;</span><br><span class="line">    padding: .75rem;</span><br><span class="line">    margin-bottom: 2rem;</span><br><span class="line">    border: 1px solid #efefef;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .card &gt; img &#123;</span><br><span class="line">    margin-bottom: .75rem;</span><br><span class="line">    border-radius: 100px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .card-text &#123;</span><br><span class="line">    font-size: 85%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编写小的demo应用axios异步请求.&lt;br&gt;&lt;strong&gt;效果图示:&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191119025501372.png?x-oss-process=image/waterma
      
    
    </summary>
    
      <category term="vue" scheme="http://zhangligong.xyz/categories/vue/"/>
    
    
      <category term="vue" scheme="http://zhangligong.xyz/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue router应用及总结</title>
    <link href="http://zhangligong.xyz/2019/11/24/blog035/"/>
    <id>http://zhangligong.xyz/2019/11/24/blog035/</id>
    <published>2019-11-24T07:26:23.000Z</published>
    <updated>2019-11-24T07:42:53.553Z</updated>
    
    <content type="html"><![CDATA[<p>编写一个小的demo，对router基础的应用学习和理解。<br><strong>效果图示：</strong><br><img src="https://img-blog.csdnimg.cn/2019112016113079.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>说明: 点击About在右边显示相关信息.<br><img src="https://img-blog.csdnimg.cn/20191120161142729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>说明: 点击Home，在下边显示相关信息，且Home下有两个路由链接，分别对应各自的路由组件.<br><img src="https://img-blog.csdnimg.cn/20191120161158922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>说明: Message下有三个路由链接，对应的路由组件只有一个，只是根据传入的参数不同显示不同数据。</p><p><strong>项目目录：</strong><br><img src="https://img-blog.csdnimg.cn/20191120162234692.png" alt="在这里插入图片描述"></p><p><strong>代码：</strong></p><h3 id="1-index-html"><a href="#1-index-html" class="headerlink" title="1.index.html"></a>1.index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>my-project<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./static/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.router-link-active</span> &#123;</span></span><br><span class="line">        color: red !important;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-index-js-router模块"><a href="#2-index-js-router模块" class="headerlink" title="2.index.js(router模块)"></a>2.index.js(router模块)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 路由器对象模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../views/Home'</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'../views/About'</span></span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">'../views/News'</span></span><br><span class="line"><span class="keyword">import</span> Message <span class="keyword">from</span> <span class="string">'../views/Message'</span></span><br><span class="line"><span class="keyword">import</span> MessageDetail <span class="keyword">from</span> <span class="string">"../views/MessageDetail"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明使用vue-router插件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">内部定义并注册了2个组件标签(router-link/router-view),</span></span><br><span class="line"><span class="comment">给组件对象添加了2个属性:</span></span><br><span class="line"><span class="comment">  1. $router: 路由器</span></span><br><span class="line"><span class="comment">  2. $route: 当前路由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">// 注册应用中所有的路由</span></span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/about'</span>,</span><br><span class="line">      name: <span class="string">'About'</span>,</span><br><span class="line">      component: About</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/home'</span>,</span><br><span class="line">      name: <span class="string">'Home'</span>,</span><br><span class="line">      component: Home,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/home/news'</span>,   <span class="comment">// 绝对路径：path左侧的'/'永远代表跟路由</span></span><br><span class="line">          name: <span class="string">'News'</span>,</span><br><span class="line">          component: News</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'message'</span>,  <span class="comment">// 相对路径</span></span><br><span class="line">          name: <span class="string">'Message'</span>,</span><br><span class="line">          component: Message,</span><br><span class="line">          children: [</span><br><span class="line">            &#123;</span><br><span class="line">              path: <span class="string">'detail/:id'</span>,  <span class="comment">// id是变化的, :id 占位符来显示</span></span><br><span class="line">              name: <span class="string">'MessageDetail'</span>,</span><br><span class="line">              component: MessageDetail</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">''</span>,</span><br><span class="line">          redirect: <span class="string">'news'</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      redirect: <span class="string">'/about'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-main-js"><a href="#3-main-js" class="headerlink" title="3.main.js"></a>3.main.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入口js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router2 <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;   <span class="comment">// 配置对象的属性名都是一些确定的名称，不能随便修改</span></span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123;App&#125;,  <span class="comment">// 映射组件标签</span></span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,   <span class="comment">// 指定需要渲染到页面的模板</span></span><br><span class="line">  router: router2   <span class="comment">// 注册路由器</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-App-vue"><a href="#4-App-vue" class="headerlink" title="4.App.vue"></a>4.App.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-offset-2 col-xs-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Router Test<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-2 col-xs-offset-2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--生成路由链接：链接与路由配置中path一致--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 缓存路由组件对象 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 显示当前组件，并向路由组件传递数据（属性携带数据），与props用法类似 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">msg</span>=<span class="string">"abc"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'App'</span>,</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-About-vue"><a href="#5-About-vue" class="headerlink" title="5.About.vue"></a>5.About.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">"About"</span>,</span></span><br><span class="line"><span class="javascript">    props: &#123;  <span class="comment">// 声明接受数据</span></span></span><br><span class="line"><span class="javascript">      msg: <span class="built_in">String</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-Home-vue"><a href="#6-Home-vue" class="headerlink" title="6.Home.vue"></a>6.Home.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home/news"</span>&gt;</span>News<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"message"</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 根据路由链接显示路由组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">"Header"</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-News-vue"><a href="#7-News-vue" class="headerlink" title="7.News.vue"></a>7.News.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(news, index) in newsArr"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>&#123;&#123;news&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">"News"</span>,</span></span><br><span class="line">    data () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        newsArr: [<span class="string">'news01'</span>,<span class="string">'news02'</span>,<span class="string">'news03'</span>,<span class="string">'news04'</span>]</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-Message-vue"><a href="#8-Message-vue" class="headerlink" title="8.Message.vue"></a>8.Message.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一个组件只能有一个根标签 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"message in messages"</span> <span class="attr">:key</span>=<span class="string">"message.id"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 这里to绑定表达式,链接是动态的;不能用相对路径,不然连续点链接时会出错 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"`/home/message/detail/$&#123;message.id&#125;`"</span>&gt;</span>&#123;&#123;message.title&#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"pushShow(message.id)"</span>&gt;</span>push查看<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"replaceShow(message.id)"</span>&gt;</span>replace查看<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$router.back()"</span>&gt;</span>回退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">"Message"</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        messages: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 模拟ajax异步从后台请求数据</span></span></span><br><span class="line"><span class="javascript">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> messages = [</span></span><br><span class="line">          &#123;</span><br><span class="line">            id: 1,</span><br><span class="line"><span class="javascript">            title: <span class="string">'message01'</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            id: 2,</span><br><span class="line"><span class="javascript">            title: <span class="string">'message02'</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            id: 3,</span><br><span class="line"><span class="javascript">            title: <span class="string">'message03'</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">        ]</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.messages = messages</span></span><br><span class="line">      &#125;, 1000)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      pushShow(id) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$router.push(<span class="string">`/home/message/detail/<span class="subst">$&#123;id&#125;</span>`</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      replaceShow(id) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$router.replace(<span class="string">`/home/message/detail/<span class="subst">$&#123;id&#125;</span>`</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-MessageDetail-vue"><a href="#9-MessageDetail-vue" class="headerlink" title="9.MessageDetail.vue"></a>9.MessageDetail.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>id: &#123;&#123;$route.params.id&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>title: &#123;&#123;detail.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>content: &#123;&#123;detail.content&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">"MessageDetail"</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        detail: &#123;&#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    mounted() &#123;  <span class="comment">// 改变当前路由组件参数数据时, 不会重新创建组件对象, mounted不会重新执行</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// setTimeout含义是定时器，到达一定的时间触发一次，在代码的执行时间上加1s</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 但是setInterval含义是计时器，到达一定时间触发一次，并且会持续触发</span></span></span><br><span class="line"><span class="javascript">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> messageDetails = [</span></span><br><span class="line">          &#123;</span><br><span class="line">            id: 1,</span><br><span class="line"><span class="javascript">            title: <span class="string">'message01'</span>,</span></span><br><span class="line"><span class="javascript">            content: <span class="string">'message01 content...'</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            id: 2,</span><br><span class="line"><span class="javascript">            title: <span class="string">'message02'</span>,</span></span><br><span class="line"><span class="javascript">            content: <span class="string">'message02 content...'</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            id: 3,</span><br><span class="line"><span class="javascript">            title: <span class="string">'message03'</span>,</span></span><br><span class="line"><span class="javascript">            content: <span class="string">'message03 content...'</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.messageDetails = messageDetails    <span class="comment">//初始化数据，声明全局messageDetails</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> id = <span class="keyword">this</span>.$route.params.id * <span class="number">1</span>  <span class="comment">// id有可能为文本，故乘以1</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.detail = messageDetails.find(<span class="function"><span class="params">detail</span> =&gt;</span> detail.id === id)</span></span><br><span class="line">      &#125;, 1000)</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    watch: &#123;</span><br><span class="line"><span class="javascript">      $route: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;   <span class="comment">// 改变当前路由组件参数数据时自动调用</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> id = value.params.id * <span class="number">1</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.detail = <span class="keyword">this</span>.messageDetails.find(<span class="function"><span class="params">detail</span> =&gt;</span> detail.id === id)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="1-路由组件跳转"><a href="#1-路由组件跳转" class="headerlink" title="1.路由组件跳转"></a>1.路由组件跳转</h4><p>路由跳转与页面跳转相似，页面跳转是从一个页面跳到另一个页面，但路由跳转是从一个路由组件跳到另一个路由组件，类似tab页切换和导航栏效果。</p><h5 id="页面跳转方式："><a href="#页面跳转方式：" class="headerlink" title="页面跳转方式："></a>页面跳转方式：</h5><ul><li>a链接  –  html</li><li>window.location.href  –  js</li></ul><h5 id="路由组件跳转方式："><a href="#路由组件跳转方式：" class="headerlink" title="路由组件跳转方式："></a>路由组件跳转方式：</h5><ul><li><strong>router-link</strong>  –  html,等同于 $router.push, replace默认为false</li><li><strong>router-link replace</strong>  –  当添加replace=true时等同于$router.replace</li><li><strong>$router.push</strong>  –  在 history 栈中添加新记录</li><li><strong>$router.replace</strong>  –  替换掉当前的 history 记录</li><li><strong>$router.back()</strong>  –  回退<br>都是在 <strong>router-view</strong> 标签定义的地方显示url指向的路由组件</li></ul><p><strong>router.push(location)</strong><br>这个方法会向 ==history 栈添加一个新的记录==，当用户点击浏览器后退按钮时，则回到之前的 URL。<br><strong>router.replace(location)</strong><br>这个方法不会向 history 添加新记录，而是跟它的方法名一样 —— ==替换掉当前的 history 记录==,点击返回按钮也不会回到之前的URL页面.</p><h4 id="2-路由组件跳转时传递数据"><a href="#2-路由组件跳转时传递数据" class="headerlink" title="2.路由组件跳转时传递数据"></a>2.路由组件跳转时传递数据</h4><h5 id="声明式"><a href="#声明式" class="headerlink" title="声明式:"></a>声明式:</h5><p><strong>router-link :to=”…”</strong>    path上传递参数<br><strong>params:</strong> <code>/home/message/detail/${message.id}</code><br><strong>query:</strong> <code>&#39;/home/message/detail?id=&#39;+message.id</code></p><p><strong>router-view :abc=”data”</strong>    属性携带参数<br>类似与同props进行组件通信,跳转的下一路由组件需声明接受属性props</p><h5 id="编程式"><a href="#编程式" class="headerlink" title="编程式:"></a>编程式:</h5><p><strong>router.push(…)</strong><br>该方法的参数可以是一个字符串路径，或者一个描述地址的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">router.push(<span class="string">'/home'</span>)<span class="comment">// 添加新记录</span></span><br><span class="line"><span class="comment">//push方法也可以传replace</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>: <span class="string">'/home'</span>, <span class="attr">replace</span>: <span class="literal">true</span>&#125;)<span class="comment">// 替换当前记录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>: <span class="string">'/login?url='</span> + <span class="keyword">this</span>.$route.path&#125;);</span><br><span class="line"><span class="comment">// 带查询参数，变成/backend/order?selected=2</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>: <span class="string">'/backend/order'</span>, <span class="attr">query</span>: &#123;<span class="attr">selected</span>: <span class="string">"2"</span>&#125;&#125;);</span><br><span class="line"><span class="comment">// 命名的路由</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'user'</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="number">123</span> &#125;&#125;)</span><br></pre></td></tr></table></figure><h5 id="params与query传参区别"><a href="#params与query传参区别" class="headerlink" title="params与query传参区别"></a>params与query传参区别</h5><ol><li>query 传参配置的是path，而params传参配置的是name，在params中配置path无效</li><li>query在路由配置不需要设置参数，而params必须设置</li><li>query传递的参数会显示在地址栏中</li><li>params传参刷新会无效，但是query会保存传递过来的值，刷新不变 </li><li>路由配置：<br>query: {path: ‘/home’, name: Home, component: Home}<br>params: {path: ‘/home/:site/:bu’, name: Home, component: Home}</li><li>获取路由参数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">created () &#123;</span><br><span class="line"><span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">self.getParams()</span><br><span class="line">&#125;,</span><br><span class="line">watch () &#123;</span><br><span class="line"><span class="string">'$route'</span>: <span class="string">'getParams'</span></span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  getParams () &#123;</span><br><span class="line">  <span class="keyword">let</span> site = <span class="keyword">this</span>.$route.query.site</span><br><span class="line">  <span class="keyword">let</span> bu = <span class="keyword">this</span>.$route.query.bu</span><br><span class="line">  <span class="comment">// 如果是params 传参，那就是this.$route.params.site</span></span><br><span class="line">  上面就可以获取到传递的参数了</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>说明</strong>: 路由传递参数和传统传递参数是一样的，命名路由类似表单提交而查询就是url传递.<br>**1. 命名路由搭配params，刷新页面参数会丢失</p><ol start="2"><li>传递参数搭配query，刷新页面数据不会丢失</li><li>接受参数使用this.$router后面就是搭配路由的名称就能获取到参数的值</li><li>$route为当前router跳转对象，携带数据。对象可以获取name、path、query、params等</li><li>$router为VueRouter实例，调用相关router方法来进行路由跳转**</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编写一个小的demo，对router基础的应用学习和理解。&lt;br&gt;&lt;strong&gt;效果图示：&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2019112016113079.png?x-oss-process=image
      
    
    </summary>
    
      <category term="vue" scheme="http://zhangligong.xyz/categories/vue/"/>
    
    
      <category term="vue" scheme="http://zhangligong.xyz/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue组件化编程应用2</title>
    <link href="http://zhangligong.xyz/2019/11/24/blog034/"/>
    <id>http://zhangligong.xyz/2019/11/24/blog034/</id>
    <published>2019-11-24T07:25:14.000Z</published>
    <updated>2019-11-24T07:42:42.918Z</updated>
    
    <content type="html"><![CDATA[<p>写几个小案例来理解vue的组件化编程思想,下面是一个demo.</p><p><strong>效果图示:</strong><br><img src="https://img-blog.csdnimg.cn/20191118025408438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>需求:</strong><br><strong>header</strong>部输入任务,进行<strong>添加</strong>,在list中显示;<br><strong>list</strong>中每个item项,<strong>鼠标移入</strong>时,<strong>背景变灰并显示delete按钮</strong>.点击按钮可<strong>删除</strong>该项;<strong>鼠标移出</strong>时,恢复原样;<br><strong>footer</strong>部: 1.根据列表勾选状态及数量显示<strong>已完成数和全部数</strong>; 2.当已完成数为0时,不显示<strong>清除已完成任务按钮</strong>; 3.当<strong>已完成数等于全部数量</strong>时,全选框勾选. 4.当<strong>list列表为空</strong>时,全选框不勾选; 5.当<strong>主动勾选全选</strong>时,所有项都勾选,去勾选时所有项去勾选.</p><p><strong>项目目录:</strong><br><img src="https://img-blog.csdnimg.cn/20191118232427910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>代码:</strong></p><h3 id="1-全局样式"><a href="#1-全局样式" class="headerlink" title="1.全局样式"></a>1.全局样式</h3><p>base.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*base*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(255, 255, 255, 0.2), <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.05);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-danger</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#da4f49</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#bd362f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-danger</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#bd362f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-storageUtil-js"><a href="#2-storageUtil-js" class="headerlink" title="2.storageUtil.js"></a>2.storageUtil.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用localStorage存储数据的工具模块</span></span><br><span class="line"><span class="comment"> * 1.函数</span></span><br><span class="line"><span class="comment"> * 2.模块</span></span><br><span class="line"><span class="comment"> * 需要向外暴露一个功能还是多个功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PROJECTS_KEY = <span class="string">'project_key'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  saveProjects(val) &#123;</span><br><span class="line">    <span class="built_in">window</span>.localStorage.setItem(PROJECTS_KEY, <span class="built_in">JSON</span>.stringify(val))</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  readProjects() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(PROJECTS_KEY) || <span class="string">'[]'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-index-html"><a href="#3-index-html" class="headerlink" title="3.index.html"></a>3.index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue_demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;link rel="stylesheet" href="./static/css/bootstrap.css"&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-main-js"><a href="#4-main-js" class="headerlink" title="4.main.js"></a>4.main.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./base.css'</span> <span class="comment">// 全局引入base.css文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-App-vue"><a href="#5-App-vue" class="headerlink" title="5.App.vue"></a>5.App.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"todo-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"todo-wrap"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 传递函数属性(传递性)和绑定事件监听(用于父子组件) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Header</span> @<span class="attr">addProject</span>=<span class="string">"addProject"</span>/&gt;</span>  <span class="comment">&lt;!-- 给标签对象绑定addProject事件监听 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">List</span> <span class="attr">:projects</span>=<span class="string">"projects"</span> <span class="attr">:deleteProject</span>=<span class="string">"deleteProject"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">todo-footer</span> <span class="attr">:projects</span>=<span class="string">"projects"</span> <span class="attr">:deleteAllComplete</span>=<span class="string">"deleteAllComplete"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:setSelect</span>=<span class="string">"setSelect"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./components/Header'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">'./components/List'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> TodoFooter <span class="keyword">from</span> <span class="string">'./components/Footer'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> storageUtil <span class="keyword">from</span> <span class="string">'./utils/storageUtil'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'App'</span>,</span></span><br><span class="line">    data () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;  <span class="comment">// 从localStorage中读取数据</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// projects: JSON.parse(window.localStorage.getItem('project_key') || '[]')</span></span></span><br><span class="line">        projects: storageUtil.readProjects()</span><br><span class="line">        /*[</span><br><span class="line">          &#123;</span><br><span class="line"><span class="javascript">            content: <span class="string">'吃饭'</span>,</span></span><br><span class="line"><span class="javascript">            complete: <span class="literal">false</span>,</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="javascript">            content: <span class="string">'睡觉'</span>,</span></span><br><span class="line"><span class="javascript">            complete: <span class="literal">true</span>,</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="javascript">            content: <span class="string">'coding'</span>,</span></span><br><span class="line"><span class="javascript">            complete: <span class="literal">false</span>,</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ],*/</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      addProject (project) &#123;  <span class="comment">//添加project</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.projects.push(project)</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      deleteProject (index) &#123; <span class="comment">//根据index删除project</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.projects.splice(index,<span class="number">1</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line"><span class="javascript">      deleteAllComplete () &#123;  <span class="comment">//删除所有完成的任务</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//将project中complete为true的过滤掉,留下false为一个新的数组,重新赋值</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.projects = <span class="keyword">this</span>.projects.filter(<span class="function"><span class="params">project</span> =&gt;</span> !project.complete)</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      setSelect (isAllCheck) &#123;  <span class="comment">//根据全选框值设置多选框是否勾选</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.projects.forEach(<span class="function"><span class="params">project</span> =&gt;</span> project.complete = isAllCheck)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    watch: &#123;  <span class="comment">// 监视</span></span></span><br><span class="line">      projects: &#123;</span><br><span class="line"><span class="javascript">        deep: <span class="literal">true</span>, <span class="comment">// 深度监视</span></span></span><br><span class="line">        /*handler: function (val) &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// 将projects最新的值的json数据保存到localStorage</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// window.localStorage.setItem('project_key', JSON.stringify(val))</span></span></span><br><span class="line">          storageUtil.saveProjects(val)</span><br><span class="line">        &#125;*/</span><br><span class="line">        handler: storageUtil.saveProjects</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123; Header, List, TodoFooter&#125;,</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="comment">/*app*/</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.todo-container</span> &#123;</span></span><br><span class="line">    width: 600px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.todo-container</span> <span class="selector-class">.todo-wrap</span> &#123;</span></span><br><span class="line">    padding: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ddd</span>;</span></span><br><span class="line">    border-radius: 5px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-Header-vue"><a href="#6-Header-vue" class="headerlink" title="6.Header.vue"></a>6.Header.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"todo-header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入你的任务名称，按回车键确认"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">keyup.enter</span>=<span class="string">"addItem"</span> <span class="attr">v-model</span>=<span class="string">"content"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">      props: &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// addProject: Function</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      data () &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          content: <span class="string">''</span>,</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        addItem () &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// 1.检查输入的合法性</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> content = <span class="keyword">this</span>.content.trim()</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (!content) &#123; <span class="comment">// content默认不为空字符串,可不写 === ''</span></span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"不能为空"</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span></span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          <span class="comment">// 2.根据输入生成一个project对象</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> project = &#123;</span></span><br><span class="line"><span class="javascript">            content: <span class="keyword">this</span>.content,</span></span><br><span class="line"><span class="javascript">            complete: <span class="literal">false</span></span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          <span class="comment">// 3.将对象添加到projects中</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// this.addProject(project)</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 触发自定义事件:addProject; 只能用在父子组件,不能跨代通信</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$emit(<span class="string">'addProject'</span>,project)</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 4.清空输入</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.content = <span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="comment">/*header*/</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.todo-header</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">    width: 560px;</span><br><span class="line">    height: 28px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    padding: 4px 7px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.todo-header</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line">    outline: none;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-color</span>: <span class="selector-tag">rgba</span>(82, 168, 236, 0<span class="selector-class">.8</span>);</span></span><br><span class="line"><span class="css">    <span class="selector-tag">box-shadow</span>: <span class="selector-tag">inset</span> 0 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.075</span>), 0 0 8<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(82, 168, 236, 0<span class="selector-class">.6</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-List-vue"><a href="#7-List-vue" class="headerlink" title="7.List.vue"></a>7.List.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"todo-main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Item</span> <span class="attr">v-for</span>=<span class="string">"(project,index) in projects"</span> <span class="attr">:key</span>=<span class="string">"index"</span> <span class="attr">:project</span>=<span class="string">"project"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:index</span>=<span class="string">"index"</span> <span class="attr">:deleteProject</span>=<span class="string">"deleteProject"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> Item <span class="keyword">from</span> <span class="string">"../components/Item"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">'List'</span>,</span></span><br><span class="line">      components: &#123;Item&#125;,</span><br><span class="line">      props: &#123;</span><br><span class="line"><span class="javascript">        projects: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        deleteProject: <span class="built_in">Function</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="comment">/*main*/</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.todo-main</span> &#123;</span></span><br><span class="line">    margin-left: 0px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ddd</span>;</span></span><br><span class="line">    border-radius: 2px;</span><br><span class="line">    padding: 0px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.todo-empty</span> &#123;</span></span><br><span class="line">    height: 40px;</span><br><span class="line">    line-height: 40px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ddd</span>;</span></span><br><span class="line">    border-radius: 2px;</span><br><span class="line">    padding-left: 5px;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-Item-vue"><a href="#8-Item-vue" class="headerlink" title="8.Item.vue"></a>8.Item.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- onmouseover="" onmouseout="" --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> @<span class="attr">mouseenter</span>=<span class="string">"handleEnter(true)"</span> @<span class="attr">mouseleave</span>=<span class="string">"handleEnter(false)"</span> <span class="attr">:style</span>=<span class="string">"&#123;background: bgColor&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"project.complete"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;project.content&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span> @<span class="attr">click</span>=<span class="string">"deleteItem"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">'Item'</span>,</span></span><br><span class="line">      props: &#123;</span><br><span class="line"><span class="javascript">        project: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">        index: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        deleteProject: <span class="built_in">Function</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      data () &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          bgColor: <span class="string">'white'</span>,</span></span><br><span class="line"><span class="javascript">          isShow: <span class="literal">false</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        handleEnter (isEnter) &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (isEnter) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.bgColor = <span class="string">'#aaaaaa'</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.isShow = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">          &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.bgColor = <span class="string">'white'</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.isShow = <span class="literal">false</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        deleteItem () &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> &#123;deleteProject, project, index&#125; = <span class="keyword">this</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="built_in">window</span>.confirm(<span class="string">`确认删除<span class="subst">$&#123;project.content&#125;</span>吗`</span>)) &#123;</span></span><br><span class="line">            deleteProject(index)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="comment">/*item*/</span></span></span><br><span class="line">  li &#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">    height: 36px;</span><br><span class="line">    line-height: 36px;</span><br><span class="line">    padding: 0 5px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ddd</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li label &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li label li input &#123;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    margin-right: 6px;</span><br><span class="line">    position: relative;</span><br><span class="line">    top: -1px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li button &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    display: none;</span><br><span class="line">    margin-top: 3px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-tag">li</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    content: initial;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line">    border-bottom: none;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-Footer-vue"><a href="#9-Footer-vue" class="headerlink" title="9.Footer.vue"></a>9.Footer.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"todo-footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"isAllCheck"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>已完成&#123;&#123;completeSize&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> / 全部&#123;&#123;projects.length&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span> <span class="attr">v-show</span>=<span class="string">"completeSize"</span> @<span class="attr">click</span>=<span class="string">"deleteAllComplete"</span>&gt;</span>清除已完成任务<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">'Footer'</span>,</span></span><br><span class="line">      props: &#123;</span><br><span class="line"><span class="javascript">        projects: <span class="built_in">Array</span>,  <span class="comment">//project数组</span></span></span><br><span class="line"><span class="javascript">        deleteAllComplete: <span class="built_in">Function</span>,  <span class="comment">//清除已完成任务</span></span></span><br><span class="line"><span class="javascript">        setSelect: <span class="built_in">Function</span> <span class="comment">//根据全选框来设置其他所有多选框</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line">        completeSize () &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// 遍历projects,初始化preTotal为0,若project.complete为true则加1,返回最终preTotal值</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="keyword">this</span>.projects.reduce(<span class="function">(<span class="params">preTotal,project</span>) =&gt;</span> preTotal+(project.complete?<span class="number">1</span>:<span class="number">0</span>), <span class="number">0</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        isAllCheck: &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">get</span>()&#123;  <span class="comment">//获取多选框的值,当已完成数等于全部数量且已完成数大于0时,勾选(默认&gt;0,可以不写)</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">this</span>.completeSize === <span class="keyword">this</span>.projects.length &amp;&amp; <span class="keyword">this</span>.completeSize</span></span><br><span class="line">          &#125;,</span><br><span class="line"><span class="javascript">          <span class="keyword">set</span>(value)&#123; <span class="comment">//监视多选框的值,value是当前多选框最新的值</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.setSelect(value)</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="comment">/*footer*/</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.todo-footer</span> &#123;</span></span><br><span class="line">    height: 40px;</span><br><span class="line">    line-height: 40px;</span><br><span class="line">    padding-left: 6px;</span><br><span class="line">    margin-top: 5px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.todo-footer</span> <span class="selector-tag">label</span> &#123;</span></span><br><span class="line">    display: inline-block;</span><br><span class="line">    margin-right: 20px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.todo-footer</span> <span class="selector-tag">label</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    top: -1px;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    margin-right: 5px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.todo-footer</span> <span class="selector-tag">button</span> &#123;</span></span><br><span class="line">    float: right;</span><br><span class="line">    margin-top: 5px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="扩展说明"><a href="#扩展说明" class="headerlink" title="扩展说明"></a>扩展说明</h3><ol><li>案例中多处使用<strong>箭头函数,模板字符串,函数默认参数,扩展运算符,对象初始化简写</strong>等ES6新特性写法,可阅读 <a href="https://blog.csdn.net/zhixingwu/article/details/103059994" target="_blank" rel="noopener">es6入门</a></li><li>关于vue的使用可参考vue官方教程和API: <a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/</a></li><li>若数字大于0(val&gt;0),大于0可不写,默认大于0; 字符串为空时( !str),默认不为空字符串</li><li>关于Footer.vue中使用的<code>reduce()</code>函数: <strong>实现数组的累加操作</strong><br><code>array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</code><br>reduce函数可接受一个function函数以及一个<strong>initialValue</strong>(传入的初始值)的初始值。<br>其中function函数接受四个参数分别为<strong>total（每次计算的返回值），currentValue（当前数组的元素值），currentIndex（当前数组元素的索引值），arr（当前数组元素）</strong></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写几个小案例来理解vue的组件化编程思想,下面是一个demo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;效果图示:&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191118025408438.png?x-oss-proces
      
    
    </summary>
    
      <category term="vue" scheme="http://zhangligong.xyz/categories/vue/"/>
    
    
      <category term="vue" scheme="http://zhangligong.xyz/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue组件化编程应用</title>
    <link href="http://zhangligong.xyz/2019/11/24/blog033/"/>
    <id>http://zhangligong.xyz/2019/11/24/blog033/</id>
    <published>2019-11-24T07:24:15.000Z</published>
    <updated>2019-11-24T07:42:33.494Z</updated>
    
    <content type="html"><![CDATA[<p>写几个小案例来理解vue的组件化编程思想,下面是一个demo.</p><p><strong>效果图示:</strong><br><img src="https://img-blog.csdnimg.cn/20191117230025328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>需求:</strong> Add组件用于<strong>添加用户评论</strong>,提交后右边评论回复会立马显示数据.Item组件点击删除可以<strong>删除当前用户评论</strong>.当List组件中用户评论为空时,会<strong>提示”暂无评论，点击左侧添加评论”.</strong></p><p><strong>项目目录:</strong><br><img src="https://img-blog.csdnimg.cn/20191117231542253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>代码:</strong></p><h3 id="1-index-html"><a href="#1-index-html" class="headerlink" title="1.index.html"></a>1.index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue_demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./static/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-main-js"><a href="#2-main-js" class="headerlink" title="2.main.js"></a>2.main.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-App-vue"><a href="#3-App-vue" class="headerlink" title="3.App.vue"></a>3.App.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"site-header jumbotron"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>请发表对Vue的评论<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Add</span> <span class="attr">:addComment</span>=<span class="string">"addComment"</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 组件通信:属性名最好与model中一致(绑定表达式) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">List</span> <span class="attr">:comments</span>=<span class="string">"comments"</span> <span class="attr">:deleteComment</span>=<span class="string">"deleteComment"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Add <span class="keyword">from</span> <span class="string">'./components/Add'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">'./components/List'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'App'</span>,</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        comments: [   <span class="comment">// 数据在哪个组件,更新数据的行为(方法)就应该定义在哪个组件</span></span></span><br><span class="line">          &#123;</span><br><span class="line"><span class="javascript">            name: <span class="string">'Jack'</span>,</span></span><br><span class="line"><span class="javascript">            content: <span class="string">'vue so easy'</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="javascript">            name: <span class="string">'Tom'</span>,</span></span><br><span class="line"><span class="javascript">            content: <span class="string">'vue so nice'</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="javascript">            name: <span class="string">'Cat'</span>,</span></span><br><span class="line"><span class="javascript">            content: <span class="string">'vue so cool'</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 添加评论</span></span></span><br><span class="line">      addComment (comment) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.comments.unshift(comment)</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="comment">// 删除指定下标的评论</span></span></span><br><span class="line">      deleteComment (index) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.comments.splice(index,<span class="number">1</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;Add ,List&#125;,</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-Add-vue"><a href="#4-Add-vue" class="headerlink" title="4.Add.vue"></a>4.Add.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>评论内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">rows</span>=<span class="string">"6"</span> <span class="attr">placeholder</span>=<span class="string">"评论内容"</span> <span class="attr">v-model</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-offset-2 col-sm-10"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default pull-right"</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">"Add"</span>,</span></span><br><span class="line"><span class="javascript">    props: &#123;  <span class="comment">// 声明接受属性</span></span></span><br><span class="line"><span class="javascript">      addComment: &#123;   <span class="comment">//指定属性名/属性值类型/必要性</span></span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="javascript">        required: <span class="literal">true</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">        content: <span class="string">''</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      add () &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// 1.检查输入的合法性</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> name = <span class="keyword">this</span>.name.trim()</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> content = <span class="keyword">this</span>.content.trim()</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!name || !content) &#123;</span></span><br><span class="line"><span class="javascript">          alert(<span class="string">'name和content不能为空'</span>)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">// 2.根据输入的数据,封装成一个comment对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> comment = &#123;</span></span><br><span class="line">          name,</span><br><span class="line">          content</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">// 3.添加到comments中</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.addComment(comment)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 4.清楚输入</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.name = <span class="string">''</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.content = <span class="string">''</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-List-vue"><a href="#5-List-vue" class="headerlink" title="5.List.vue"></a>5.List.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"reply"</span>&gt;</span>评论回复：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">"comments.length===0"</span>&gt;</span>暂无评论，点击左侧添加评论！！！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 使用Item标签: 遍历数组,数组通信 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Item</span> <span class="attr">v-for</span>=<span class="string">"(comment,index) in comments"</span> <span class="attr">:key</span>=<span class="string">"index"</span> <span class="attr">:comment</span>=<span class="string">"comment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:deleteComment</span>=<span class="string">"deleteComment"</span> <span class="attr">:index</span>=<span class="string">"index"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 引入Item组件</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Item <span class="keyword">from</span> <span class="string">'./Item'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">"List"</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 声明接受属性: 会成为组件对象的属性(类似与vm: data()&#123;return &#123;comments: []&#125;&#125;)</span></span></span><br><span class="line"><span class="javascript">    props: [<span class="string">'comments'</span>,<span class="string">'deleteComment'</span>],  <span class="comment">//只指定属性名</span></span></span><br><span class="line"><span class="javascript">    components: &#123; <span class="comment">// 组件映射标签</span></span></span><br><span class="line">      Item</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">  .reply &#123;</span><br><span class="line">    margin-top: 0px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-Item-vue"><a href="#6-Item-vue" class="headerlink" title="6.Item.vue"></a>6.Item.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"handle"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> @<span class="attr">click</span>=<span class="string">"deleteItem"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> &gt;</span>&#123;&#123;comment.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>说:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"centence"</span>&gt;</span>&#123;&#123;comment.content&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">"Item"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 声明接受属性</span></span></span><br><span class="line"><span class="javascript">      props: &#123;  <span class="comment">// 指定属性名和属性值的类型</span></span></span><br><span class="line"><span class="javascript">        comment: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">        deleteComment: <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="javascript">        index: <span class="built_in">Number</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        deleteItem () &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> &#123;comment,deleteComment,index&#125; = <span class="keyword">this</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="built_in">window</span>.confirm(<span class="string">`是否确定删除<span class="subst">$&#123;comment.name&#125;</span>的评论?`</span>)) &#123;</span></span><br><span class="line">            deleteComment(index)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">  li &#123;</span><br><span class="line">    transition: .5s;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .handle &#123;</span><br><span class="line">    width: 40px;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    background: #fff;</span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 10px;</span><br><span class="line">    top: 1px;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .handle a &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .list-group-item .centence &#123;</span><br><span class="line">    padding: 0px 50px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .user &#123;</span><br><span class="line">    font-size: 22px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写几个小案例来理解vue的组件化编程思想,下面是一个demo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;效果图示:&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191117230025328.png?x-oss-proces
      
    
    </summary>
    
      <category term="vue" scheme="http://zhangligong.xyz/categories/vue/"/>
    
    
      <category term="vue" scheme="http://zhangligong.xyz/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue组件化编程</title>
    <link href="http://zhangligong.xyz/2019/11/24/blog032/"/>
    <id>http://zhangligong.xyz/2019/11/24/blog032/</id>
    <published>2019-11-24T07:22:57.000Z</published>
    <updated>2019-11-24T07:42:13.498Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-vue项目目录"><a href="#一-vue项目目录" class="headerlink" title="一:vue项目目录"></a>一:vue项目目录</h3><p><img src="https://img-blog.csdnimg.cn/20191116230202313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>build :<br><img src="https://img-blog.csdnimg.cn/20191116225343611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>webpack.base.conf.js :<br><img src="https://img-blog.csdnimg.cn/2019111622552958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>config  –&gt; index.js<br><img src="https://img-blog.csdnimg.cn/20191116225133678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXhpbmd3dQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="二-组件化编程相关文件分析"><a href="#二-组件化编程相关文件分析" class="headerlink" title="二:组件化编程相关文件分析"></a>二:组件化编程相关文件分析</h3><h4 id="1-主页面"><a href="#1-主页面" class="headerlink" title="1.主页面"></a>1.主页面</h4><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue_demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:主页面只有id为app的div标签,主入口main.js文件(配置相关内容后)会被自动编译并挂载到div标签中,built files会自动注入.</strong></p><h4 id="2-主入口"><a href="#2-主入口" class="headerlink" title="2.主入口"></a>2.主入口</h4><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span><span class="comment">// 引入vue,创建vue实例</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span><span class="comment">// 引入根组件,使用App.vue文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化vue</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,<span class="comment">// 指向主页面id为app的div标签</span></span><br><span class="line">  components: &#123; App &#125;,<span class="comment">//App.vue组件映射为标签名为App的标签</span></span><br><span class="line">  <span class="comment">// 定义模板,使用App标签(App.vue)</span></span><br><span class="line">  <span class="comment">// 自动编译模板并挂载到指定id为app标签中(vue的生命周期)</span></span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>入口js: 创建vue实例,编译根组件并挂载到el指定的div中</strong></p><h4 id="3-根组件"><a href="#3-根组件" class="headerlink" title="3.根组件"></a>3.根组件</h4><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span> <span class="attr">alt</span>=<span class="string">"logo"</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.使用组件标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 1.引入HelloWorld组件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'./components/HelloWorld'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'App'</span>,<span class="comment">// 当前组件名称</span></span></span><br><span class="line"><span class="javascript">  components: &#123;<span class="comment">// 2.映射组件标签 &#123;HelloWorld: "HelloWorld"&#125;</span></span></span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 定义全局样式 --&gt;</span></span></span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: 'Avenir', Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.logo&#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>根组件: 引入页面所需的所有功能模块组件,组成一个完整的页面.</strong></p><h4 id="4-HelloWorld组件"><a href="#4-HelloWorld组件" class="headerlink" title="4.HelloWorld组件"></a>4.HelloWorld组件</h4><p>HelloWorld.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"msg"</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;<span class="comment">//配置对象(与vue一致),向外暴露</span></span></span><br><span class="line"><span class="javascript">  name: <span class="string">'HelloWorld'</span>,<span class="comment">//组件名称</span></span></span><br><span class="line"><span class="javascript">  data () &#123;<span class="comment">//定义数据模型.必须为函数,不能为对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      msg: <span class="string">'Welcome to Your Vue.js App'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">.msg &#123;</span><br><span class="line">  font-size: 30px;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>组件: 局部功能模块.该局部功能模块(组件)由所需的html, js, css组成,即对应vue文件的template, script, style标签所定义的内容.一个vue页面即是一个组件.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-vue项目目录&quot;&gt;&lt;a href=&quot;#一-vue项目目录&quot; class=&quot;headerlink&quot; title=&quot;一:vue项目目录&quot;&gt;&lt;/a&gt;一:vue项目目录&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2019
      
    
    </summary>
    
      <category term="vue" scheme="http://zhangligong.xyz/categories/vue/"/>
    
    
      <category term="vue" scheme="http://zhangligong.xyz/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>npm搭建vue全过程</title>
    <link href="http://zhangligong.xyz/2019/11/24/blog031/"/>
    <id>http://zhangligong.xyz/2019/11/24/blog031/</id>
    <published>2019-11-24T07:21:29.000Z</published>
    <updated>2019-11-24T07:39:34.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何在Window下安装node-cnpm，并安装vue-js，创建项目"><a href="#如何在Window下安装node-cnpm，并安装vue-js，创建项目" class="headerlink" title="如何在Window下安装node\cnpm，并安装vue.js，创建项目"></a>如何在Window下安装node\cnpm，并安装vue.js，创建项目</h2><p>参考链接：<a href="https://blog.csdn.net/Corey_mengxiaodong/article/details/81220305" target="_blank">https://blog.csdn.net/Corey_mengxiaodong/article/details/81220305</a></p><h3 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1.安装node.js"></a>1.安装node.js</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node.js的官方地址为：https:<span class="comment">//nodejs.org/en/download/。</span></span><br><span class="line">根据windows版本后，选择要下载的安装包，下载完毕，按照windows一般应用程序，一路next就可以安装成功，建议不要安装在系统盘</span><br></pre></td></tr></table></figure><h3 id="2-设置global和cache路径"><a href="#2-设置global和cache路径" class="headerlink" title="2.设置global和cache路径"></a>2.设置global和cache路径</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">设置路径能够把通过npm安装的模块集中在一起，便于管理。</span><br><span class="line">（<span class="number">1</span>）在nodejs的安装目录下，新建node_global和node_cache两个文件夹，如安装目录为“D:\nodejs\”</span><br><span class="line">（<span class="number">2</span>）用命令 npm config set prefix <span class="string">"D:\nodejs\node_global"</span> 和 npm config set cache <span class="string">"D:\nodejs\node_cache"</span> 设置global和cache，设置成功后，后续用命令npm install -g XXX安装模块，模块就在D:\nodejs\node_global\node_modules里。</span><br><span class="line">（<span class="number">3</span>）输入命令 npm config set registry=http:<span class="comment">//registry.npm.taobao.org     // 配置镜像站</span></span><br></pre></td></tr></table></figure><h3 id="3-设置环境变量"><a href="#3-设置环境变量" class="headerlink" title="3.设置环境变量"></a>3.设置环境变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">说明：设置环境变量可以使得住任意目录下都可以使用cnpm、vue等命令，而不需要输入全路径。</span><br><span class="line">（<span class="number">1</span>）修改用户变量PATH：把<span class="string">"D:\nodejs\node_global"</span>加到后面。</span><br><span class="line">（<span class="number">2</span>）新增系统变量NODE_PATH：设置成“D:\nodejs\node_global\node_modules”。</span><br></pre></td></tr></table></figure><h3 id="4-安装cnpm"><a href="#4-安装cnpm" class="headerlink" title="4.安装cnpm"></a>4.安装cnpm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">说明：由于许多npm包都在国外，用淘宝的镜像服务器，对依赖的<span class="keyword">module</span>进行安装。</span><br><span class="line">参考网址为：http:<span class="comment">//npm.taobao.org/</span></span><br><span class="line">安装命令为：npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><h3 id="5-安装vue"><a href="#5-安装vue" class="headerlink" title="5.安装vue"></a>5.安装vue</h3><p>安装命令为：cnpm install vue -g</p><h3 id="6-安装vue命令行工具"><a href="#6-安装vue命令行工具" class="headerlink" title="6.安装vue命令行工具"></a>6.安装vue命令行工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cmd命令行中：</span><br><span class="line">安装命令为：cnpm install vue-cli -g</span><br><span class="line">卸载命令为：npm uninstall vue-cli -g</span><br><span class="line">vue更新版本：</span><br><span class="line">cnpm install -g <span class="meta">@vue</span>/cli</span><br><span class="line">npm install <span class="meta">@vue</span>/cli-init -g</span><br></pre></td></tr></table></figure><h3 id="7-查看版本"><a href="#7-查看版本" class="headerlink" title="7.查看版本"></a>7.查看版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cmd命令行中：</span><br><span class="line">node -v<span class="comment">// node版本</span></span><br><span class="line">npm -v<span class="comment">// npm版本</span></span><br><span class="line">cnpm -v<span class="comment">// cnpm是否正常</span></span><br><span class="line">npm vue -v<span class="comment">// vue版本</span></span><br><span class="line">vue -V<span class="comment">// vue-cli版本</span></span><br></pre></td></tr></table></figure><h3 id="8-创建工程"><a href="#8-创建工程" class="headerlink" title="8.创建工程"></a>8.创建工程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cmd命令行中(切换到指定目录)：</span><br><span class="line">vue init webpack vue_demo  <span class="comment">// 创建一个基于webpack模板的新项目，工程名'vue_demo'</span></span><br><span class="line">cd vue_demo<span class="comment">// 切换到vue_demo目录下</span></span><br><span class="line">cnpm install<span class="comment">// 安装依赖的模块</span></span><br><span class="line">npm run dev<span class="comment">// 运行项目</span></span><br><span class="line">npm run build <span class="comment">// 打包，生成静态文件</span></span><br></pre></td></tr></table></figure><h3 id="9-项目结构"><a href="#9-项目结构" class="headerlink" title="9.项目结构"></a>9.项目结构</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvOTkzNzkxLzIwMTkwOC85OTM3OTEtMjAxOTA4MTMwMDU5NDk5OTQtMzcwMTEzMzY5LnBuZw?x-oss-process=image/format,png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">|-- build : webpack 相关的配置文件夹(基本不需要修改)</span><br><span class="line">|-- dev-server.js : 通过 express 启动后台服务器</span><br><span class="line">|-- config: webpack 相关的配置文件夹(基本不需要修改)</span><br><span class="line">|-- index.js: 指定的后台服务的端口号和静态资源文件夹</span><br><span class="line">|-- node_modules：存放该工程依赖的模块，而且根据<span class="keyword">package</span>.json的配置下载该项目的modules。</span><br><span class="line">|-- src : 源码文件夹</span><br><span class="line">|-- components: vue 组件及其相关资源文件夹</span><br><span class="line">|-- App.vue: 应用根主组件</span><br><span class="line">|-- main.js: 应用入口 js</span><br><span class="line">|-- <span class="keyword">static</span>: 静态资源文件夹</span><br><span class="line">|-- .babelrc: babel 的配置文件</span><br><span class="line">|-- .eslintignore: eslint 检查忽略的配置</span><br><span class="line">|-- .eslintrc.js: eslint 检查的配置</span><br><span class="line">|-- .gitignore: git 版本管制忽略的配置</span><br><span class="line">|-- index.html: 主页面文件</span><br><span class="line">|-- <span class="keyword">package</span>.json: 应用包配置文件</span><br><span class="line">|-- README.md: 应用描述说明的 readme 文件</span><br></pre></td></tr></table></figure><h3 id="10-常用node-modules安装"><a href="#10-常用node-modules安装" class="headerlink" title="10.常用node_modules安装"></a>10.常用node_modules安装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">cmd命令行中：</span><br><span class="line">安装npm：    <span class="comment">//node自带npm，但不一定是最新的npm</span></span><br><span class="line">npm install npm -g</span><br><span class="line">安装cnpm：</span><br><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line"></span><br><span class="line">安装webpack:</span><br><span class="line">npm install webpack -g</span><br><span class="line">npm install webpack-cli -g</span><br><span class="line">也可以同时：npm install webpack webpack-cli -g</span><br><span class="line">查看版本:</span><br><span class="line">webpack -v</span><br><span class="line"></span><br><span class="line">安装vue：</span><br><span class="line">npm install vue -g</span><br><span class="line">安装vue-cli:</span><br><span class="line">npm install vue-cli -g</span><br><span class="line">或者 npm install --global vue-cli</span><br><span class="line">查看vue-cli版本:</span><br><span class="line">vue -V</span><br><span class="line">安装vue-router：</span><br><span class="line">npm install vue-router -g</span><br><span class="line">    </span><br><span class="line">vue-cli2.x升级vue-cli3</span><br><span class="line">卸载：npm uninstall vue-cli -g 或 yarn global remove vue-cli</span><br><span class="line">安装：npm install -g <span class="meta">@vue</span>/cli 或 yarn global add <span class="meta">@vue</span>/cli</span><br><span class="line"></span><br><span class="line">初始化项目</span><br><span class="line">有三种方式：</span><br><span class="line"><span class="number">3</span>版本（新版本）</span><br><span class="line">vue create xxx</span><br><span class="line"><span class="number">3</span>版本（界面）</span><br><span class="line">vue ui</span><br><span class="line"><span class="number">2</span>版本（旧版本）</span><br><span class="line">先全局安装<span class="meta">@vue</span>/cli-init</span><br><span class="line">npm install <span class="meta">@vue</span>/cli-init -g</span><br><span class="line">如果不安装，会报错提示你需要安装。然后初始化新建项目</span><br><span class="line"></span><br><span class="line">安装serve：</span><br><span class="line">npm install -g serve</span><br><span class="line">serve dist</span><br><span class="line"></span><br><span class="line">安装express：</span><br><span class="line">npm install express -g</span><br><span class="line">node<span class="comment">//进入编辑模式</span></span><br><span class="line">require(<span class="string">'express'</span>)<span class="comment">//正常就表示NODE_PATH是否配置正确</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何在Window下安装node-cnpm，并安装vue-js，创建项目&quot;&gt;&lt;a href=&quot;#如何在Window下安装node-cnpm，并安装vue-js，创建项目&quot; class=&quot;headerlink&quot; title=&quot;如何在Window下安装node\cnp
      
    
    </summary>
    
      <category term="vue" scheme="http://zhangligong.xyz/categories/vue/"/>
    
    
      <category term="vue" scheme="http://zhangligong.xyz/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue生命周期</title>
    <link href="http://zhangligong.xyz/2019/11/24/blog030/"/>
    <id>http://zhangligong.xyz/2019/11/24/blog030/</id>
    <published>2019-11-24T07:17:04.000Z</published>
    <updated>2019-11-24T07:39:51.614Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生命周期图示"><a href="#生命周期图示" class="headerlink" title="生命周期图示"></a>生命周期图示</h3><p><img src="/2019/11/24/blog030/hexo01.jpg" alt></p><h3 id="钩子"><a href="#钩子" class="headerlink" title="钩子"></a>钩子</h3><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a is: '</span> + <span class="keyword">this</span>.a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt; "a is: 1"</span></span><br></pre></td></tr></table></figure><p>也有一些其它的钩子，在实例生命周期的不同阶段被调用，如 <span style="color:red;"><strong>mounted、updated 和 destroyed</strong></span>。生命周期钩子的<span style="color:red;"> <strong>this</strong> </span>上下文指向调用它的 Vue 实例。</p><p>不要在选项属性或回调上使用箭头函数，比如<span style="color:red;"> <strong>created: () =&gt; console.log(this.a)</strong></span> 或<span style="color:red;"> <strong>vm.$watch(‘a’, newValue =&gt; this.myMethod())</strong></span>。因为箭头函数并没有 <span style="color:red;"><strong>this</strong></span>，<span style="color:red;"><strong>this</strong></span> 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致 <span style="color:red;"><strong>Uncaught TypeError: Cannot read property of undefined</strong> </span>或 <span style="color:red;"><strong>Uncaught TypeError: this.myMethod is not a function</strong> </span>之类的错误。</p><p>待续。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;生命周期图示&quot;&gt;&lt;a href=&quot;#生命周期图示&quot; class=&quot;headerlink&quot; title=&quot;生命周期图示&quot;&gt;&lt;/a&gt;生命周期图示&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2019/11/24/blog030/hexo01.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h3
      
    
    </summary>
    
      <category term="vue" scheme="http://zhangligong.xyz/categories/vue/"/>
    
    
      <category term="vue" scheme="http://zhangligong.xyz/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue指令</title>
    <link href="http://zhangligong.xyz/2019/11/24/blog029/"/>
    <id>http://zhangligong.xyz/2019/11/24/blog029/</id>
    <published>2019-11-24T07:16:02.000Z</published>
    <updated>2019-11-24T07:36:47.986Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-常用内置指令"><a href="#1-常用内置指令" class="headerlink" title="1.常用内置指令"></a>1.常用内置指令</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">v-text : 更新元素的 textContent</span><br><span class="line">v-html : 更新元素的 innerHTML</span><br><span class="line">v-<span class="keyword">if</span> : 如果为<span class="keyword">true</span>, 当前标签才会输出到页面</span><br><span class="line">v-<span class="keyword">else</span>: 如果为<span class="keyword">false</span>, 当前标签才会输出到页面</span><br><span class="line">v-show : 通过控制display样式来控制显示/隐藏</span><br><span class="line">v-<span class="keyword">for</span> : 遍历数组/对象</span><br><span class="line">v-on : 绑定事件监听, 一般简写为@</span><br><span class="line">v-bind : 强制绑定解析表达式, 可以省略v-bind</span><br><span class="line">v-model : 双向数据绑定</span><br><span class="line">ref : 为某个元素注册一个唯一标识, vue对象通过$refs属性访问这个元素对象</span><br><span class="line">v-cloak : 使用它防止闪现表达式, 与css配合: [v-cloak] &#123; display: none &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">"content"</span>&gt;</span>abcdefg<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>    <span class="comment">&lt;!--p.textContent=msg--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>    <span class="comment">&lt;!--p.innerHtml=msg--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"hint"</span>&gt;</span>提示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="comment">&lt;!--解析msg之前有[v-cloak]，解析之后无[v-cloak]指令--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">  alert("------")   //解析msg数据之前弹窗</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: "#example",</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: "message",</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      hint () &#123;</span><br><span class="line">        alert(this.$refs.content.textContent)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-自定义指令"><a href="#2-自定义指令" class="headerlink" title="2.自定义指令"></a>2.自定义指令</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 注册全局指令</span><br><span class="line">  Vue.directive(<span class="string">'my-directive'</span>, function(el, binding)&#123;</span><br><span class="line">    el.innerHTML = binding.value.toupperCase()</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="number">2</span>. 注册局部指令</span><br><span class="line">  directives : &#123;</span><br><span class="line">    <span class="string">'my-directive'</span> : &#123;</span><br><span class="line">        bind (el, binding) &#123;</span><br><span class="line">          el.innerHTML = binding.value.toupperCase()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="number">3</span>. 使用指令</span><br><span class="line">  v-my-directive=<span class="string">'xxx'</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">需求: 自定义2个指令</span></span><br><span class="line"><span class="comment">  1. 功能类型于v-text, 但转换为全大写 v-upper-text</span></span><br><span class="line"><span class="comment">  2. 功能类型于v-text, 但转换为全小写 v-lower-text</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-upper-text</span>=<span class="string">"msg1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-lower-text</span>=<span class="string">"msg1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-upper-text</span>=<span class="string">"msg2"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-lower-text</span>=<span class="string">"msg2"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">  // 注册一个全局指令</span><br><span class="line">  // el: 指令所在的标签对象</span><br><span class="line">  // binding: 包含指令相关数据的容器对象</span><br><span class="line">  Vue.directive("upper-text",function (el,binding) &#123;</span><br><span class="line">    console.log(el,binding)</span><br><span class="line">    el.textContent = binding.value.toUpperCase()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: "#test1",</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg1: "NBA I Love This Game!"</span><br><span class="line">    &#125;,</span><br><span class="line">    directives: &#123; //注册局部指令：只在当前vm管理范围内有效</span><br><span class="line">      "lower-text"(el,binding)&#123;   //es6写法   原本写法："lower-text": function(el,binding)&#123;&#125;</span><br><span class="line">        el.textContent = binding.value.toLowerCase()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: "#test2",</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg2: "Just Do It!"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-常用内置指令&quot;&gt;&lt;a href=&quot;#1-常用内置指令&quot; class=&quot;headerlink&quot; title=&quot;1.常用内置指令&quot;&gt;&lt;/a&gt;1.常用内置指令&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="vue" scheme="http://zhangligong.xyz/categories/vue/"/>
    
    
      <category term="vue" scheme="http://zhangligong.xyz/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue基础</title>
    <link href="http://zhangligong.xyz/2019/11/24/blog028/"/>
    <id>http://zhangligong.xyz/2019/11/24/blog028/</id>
    <published>2019-11-24T07:09:10.000Z</published>
    <updated>2019-11-24T07:36:25.660Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-vue基本使用"><a href="#1-vue基本使用" class="headerlink" title="1.vue基本使用"></a>1.vue基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vm:el / data</span><br><span class="line">v:v-model / &#123;&#123;  &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 引入Vue.js</span><br><span class="line"><span class="number">2</span>. 创建Vue对象</span><br><span class="line">    el : 指定根element(选择器)</span><br><span class="line">    data : 初始化数据(页面可以访问)</span><br><span class="line"><span class="number">3</span>. 双向数据绑定 : v-model</span><br><span class="line"><span class="number">4</span>. 显示数据 : &#123;&#123;xxx&#125;&#125;</span><br><span class="line"><span class="number">5</span>. 理解vue的mvvm实现</span><br><span class="line">    &gt; view：模板页面</span><br><span class="line">    &gt;     自定义标签属性：指令</span><br><span class="line">    &gt;     大括号表达式：获取模型数据</span><br><span class="line">    &gt; viewModel：vue实体 </span><br><span class="line">    &gt; model：模型 （data）</span><br><span class="line">    &gt; element: 指定用vue来管理页面中的哪个标签区域</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="comment">&lt;!--指令--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span><span class="comment">&lt;!--指令--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!--大括号表达式--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span>&gt;</span></span><br><span class="line">  const vm = new Vue(&#123; // 配置对象 options</span><br><span class="line">    // 配置选项(option)</span><br><span class="line">    el: '#test',  // element: 指定用vue来管理页面中的哪个标签区域</span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: 'atguigu'</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-vue模板语法"><a href="#2-vue模板语法" class="headerlink" title="2.vue模板语法"></a>2.vue模板语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">vm:el  / data /  methods</span><br><span class="line">v:&#123;&#123;  &#125;&#125; / :href / <span class="meta">@click</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 模板的理解:</span><br><span class="line">  动态的html页面</span><br><span class="line">  包含了一些JS语法代码</span><br><span class="line">    大括号表达式</span><br><span class="line">    指令(以v-开头的自定义标签属性)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 双大括号表达式</span><br><span class="line">  语法: &#123;&#123;exp&#125;&#125; 或 &#123;&#123;&#123;exp&#125;&#125;&#125;</span><br><span class="line">  功能: 向页面输出数据</span><br><span class="line">  可以调用对象的方法</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 指令一: 强制数据绑定</span><br><span class="line">  功能: 指定变化的属性值</span><br><span class="line">  完整写法:</span><br><span class="line">    v-bind:xxx=<span class="string">'yyy'</span>  <span class="comment">//yyy会作为表达式解析执行</span></span><br><span class="line">  简洁写法:</span><br><span class="line">    :xxx=<span class="string">'yyy'</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. 指令二: 绑定事件监听</span><br><span class="line">  功能: 绑定指定事件名的回调函数</span><br><span class="line">  完整写法:</span><br><span class="line">    v-on:click=<span class="string">'xxx'</span></span><br><span class="line">  简洁写法:</span><br><span class="line">    <span class="meta">@click</span>=<span class="string">'xxx'</span></span><br><span class="line"></span><br><span class="line">  回调函数：<span class="number">1</span>.你定义的；<span class="number">2</span>.你没有调用；<span class="number">3</span>.但最终它执行了。</span><br><span class="line">  回调函数：什么时候调用？用来做什么？</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1. 双大括号表达式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;content.toUpperCase()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>2. 指令一: 强制数据绑定<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"url"</span>&gt;</span>访问指定站点<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>访问指定站点2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>访问指定站点2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>3. 指令二: 绑定事件监听<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"test"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"test"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span>&gt;</span></span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: '#app',</span><br><span class="line">    data: &#123;</span><br><span class="line">      content: 'NBA I Love This Game',</span><br><span class="line">      url: 'http://www.atguigu.com'</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      test () &#123;</span><br><span class="line">        alert('好啊!!!')</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-计算属性与监视"><a href="#3-计算属性与监视" class="headerlink" title="3.计算属性与监视"></a>3.计算属性与监视</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vm:el / data / computed / watch / vm.$watch</span><br><span class="line">v:v-model / &#123;&#123;  &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 计算属性</span><br><span class="line">  在computed属性对象中定义计算属性的方法</span><br><span class="line">  在页面中使用&#123;&#123;方法名&#125;&#125;来显示计算的结果</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 监视属性:</span><br><span class="line">  通过通过vm对象的$watch()或watch配置来监视指定的属性</span><br><span class="line">  当属性变化时, 回调函数自动调用, 在函数内部进行计算</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 计算属性高级:</span><br><span class="line">  通过getter/setter实现对属性数据的显示和监视</span><br><span class="line">  计算属性存在缓存, 多次读取只执行一次getter计算</span><br><span class="line">  getter：属性的get方法</span><br><span class="line">  setter：属性的set方法</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  姓: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"First Name"</span> <span class="attr">v-model</span>=<span class="string">"firstName"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Last Name"</span> <span class="attr">v-model</span>=<span class="string">"lastName"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--fullName1是根据fistName和lastName计算产生--&gt;</span></span><br><span class="line">  姓名1(单向): <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Full Name1"</span> <span class="attr">v-model</span>=<span class="string">"fullName1"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  姓名2(单向): <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Full Name2"</span> <span class="attr">v-model</span>=<span class="string">"fullName2"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  姓名3(双向): <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Full Name3"</span> <span class="attr">v-model</span>=<span class="string">"fullName3"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fullName1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fullName1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span>&gt;</span></span><br><span class="line">  const vm = new Vue(&#123;</span><br><span class="line">    el: '#demo',</span><br><span class="line">    data: &#123;</span><br><span class="line">      firstName: 'A',</span><br><span class="line">      lastName: 'B',</span><br><span class="line">       fullName2: 'A-B'</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 计算属性配置: 值为对象</span><br><span class="line">    computed: &#123;</span><br><span class="line">      fullName1 () &#123; // 属性的get()</span><br><span class="line">        console.log('fullName1()', this)</span><br><span class="line">        return this.firstName + '-' + this.lastName</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      fullName3: &#123;</span><br><span class="line">        // 当获取当前属性值时自动调用, 将返回值(根据相关的其它属性数据)作为属性值</span><br><span class="line">        get () &#123;</span><br><span class="line">          console.log('fullName3 get()')</span><br><span class="line">          return this.firstName + '-' + this.lastName</span><br><span class="line">        &#125;,</span><br><span class="line">        // 当属性值发生了改变时自动调用, 监视当前属性值变化, 同步更新相关的其它属性值</span><br><span class="line">        set (value) &#123;// fullName3的最新value值  A-B23</span><br><span class="line">          console.log('fullName3 set()', value)</span><br><span class="line">          // 更新firstName和lastName</span><br><span class="line">          const names = value.split('-')</span><br><span class="line">          this.firstName = names[0]</span><br><span class="line">          this.lastName = names[1]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    watch: &#123;</span><br><span class="line">      // 配置监视firstName</span><br><span class="line">      firstName: function (value) &#123; // 相当于属性的set</span><br><span class="line">        console.log('watch firstName', value)</span><br><span class="line">        // 更新fullName2</span><br><span class="line">        this.fullName2 = value + '-' + this.lastName</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 监视lastName</span><br><span class="line">  vm.$watch('lastName', function (value) &#123;</span><br><span class="line">    console.log('$watch lastName', value)</span><br><span class="line">    // 更新fullName2</span><br><span class="line">    this.fullName2 = this.firstName + '-' + value</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">scrip</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-强制绑定class和style"><a href="#4-强制绑定class和style" class="headerlink" title="4.强制绑定class和style"></a>4.强制绑定class和style</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vm:el  / data /  methods</span><br><span class="line">v::class / :style / @click</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 理解</span><br><span class="line">  在应用界面中, 某个(些)元素的样式是变化的</span><br><span class="line">  <span class="class"><span class="keyword">class</span>/<span class="title">style</span>绑定就是专门用来实现动态样式效果的技术</span></span><br><span class="line">2. class绑定: :class='xxx'</span><br><span class="line">  xxx是字符串</span><br><span class="line">  xxx是对象</span><br><span class="line">  xxx是数组</span><br><span class="line"><span class="number">3</span>. style绑定</span><br><span class="line">  :style=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span></span><br><span class="line">  其中activeColor/fontSize是data属性</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .classA &#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line">    .classB &#123;</span><br><span class="line">      background: blue;</span><br><span class="line">    &#125;</span><br><span class="line">    .classC &#123;</span><br><span class="line">      font-size: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1. class绑定: :class='xxx'<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"myClass"</span>&gt;</span>xxx是字符串<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123;classA: hasClassA, classB: hasClassB&#125;"</span>&gt;</span>xxx是对象<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"['classA', 'classB']"</span>&gt;</span>xxx是数组<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>2. style绑定<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"&#123;color:activeColor, fontSize&#125;"</span>&gt;</span>:style="&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"update"</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span>&gt;</span></span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: '#demo',</span><br><span class="line">    data: &#123;</span><br><span class="line">      myClass: 'classA',</span><br><span class="line">      hasClassA: true,</span><br><span class="line">      hasClassB: false,</span><br><span class="line">      activeColor: 'red',</span><br><span class="line">      fontSize: '20px'</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">      update () &#123;</span><br><span class="line">        this.myClass = 'classB'</span><br><span class="line">        this.hasClassA = !this.hasClassA</span><br><span class="line">        this.hasClassB = !this.hasClassB</span><br><span class="line">        this.activeColor = 'yellow'</span><br><span class="line">        this.fontSize = '30px'</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">scrip</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-条件渲染"><a href="#5-条件渲染" class="headerlink" title="5.条件渲染"></a>5.条件渲染</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 条件渲染指令</span><br><span class="line">  v-<span class="keyword">if</span></span><br><span class="line">  v-<span class="keyword">else</span></span><br><span class="line">  v-show</span><br><span class="line"><span class="number">2</span>. 比较v-<span class="keyword">if</span>与v-show</span><br><span class="line">  如果需要频繁切换 v-show 较好</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>表白成功<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>表白失败<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>求婚成功<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"!ok"</span>&gt;</span>求婚失败<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"ok=!ok"</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span>&gt;</span></span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: "#demo",</span><br><span class="line">    data: &#123;</span><br><span class="line">      ok: true,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">scrip</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-列表渲染"><a href="#6-列表渲染" class="headerlink" title="6.列表渲染"></a>6.列表渲染</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 列表显示</span><br><span class="line">  数组: v-<span class="keyword">for</span> / index</span><br><span class="line">  对象: v-<span class="keyword">for</span> / key</span><br><span class="line"><span class="number">2</span>. 列表的更新显示</span><br><span class="line">  删除item</span><br><span class="line">  替换item</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试: v-for 遍历数组<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(p, index) in persons"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">      &#123;&#123;index&#125;&#125;--&#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;</span><br><span class="line">      --<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"deleteP(index)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      --<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"updateP(index, &#123;name:'Cat', age: 16&#125;)"</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addP(&#123;name: 'xfzhang', age: 18&#125;)"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试: v-for 遍历对象<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, key) in persons[1]"</span> <span class="attr">:key</span>=<span class="string">"key"</span>&gt;</span>&#123;&#123;key&#125;&#125;=&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span>&gt;</span></span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: '#demo',</span><br><span class="line">    data: &#123;</span><br><span class="line">      persons: [</span><br><span class="line">        &#123;name: 'Tom', age:18&#125;,</span><br><span class="line">        &#123;name: 'Jack', age:17&#125;,</span><br><span class="line">        &#123;name: 'Bob', age:19&#125;,</span><br><span class="line">        &#123;name: 'Mary', age:16&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">      deleteP (index) &#123;</span><br><span class="line">        // splice(index,len,[item])</span><br><span class="line">        // index:数组开始下标</span><br><span class="line">        // len: 替换/删除的长度</span><br><span class="line">        // item:替换的值，删除操作的话 item为空</span><br><span class="line">        this.persons.splice(index, 1) // 调用了不是原生数组的splice(), 而是一个变异(重写)方法</span><br><span class="line">              // 1. 调用原生的数组的对应方法</span><br><span class="line">              // 2. 更新界面</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      updateP (index, newP) &#123;</span><br><span class="line">        console.log('updateP', index, newP)</span><br><span class="line">        // this.persons[index] = newP  // vue根本就不知道</span><br><span class="line">        this.persons.splice(index, 1, newP)</span><br><span class="line">        // this.persons = []</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      addP (newP) &#123;</span><br><span class="line">        this.persons.push(newP)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">scrip</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-列表过滤和排序"><a href="#7-列表过滤和排序" class="headerlink" title="7.列表过滤和排序"></a>7.列表过滤和排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 列表过滤</span><br><span class="line"><span class="number">2</span>. 列表排序</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"searchName"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(p,index) in filterPersons"</span>&gt;</span></span><br><span class="line">      &#123;&#123;index&#125;&#125;--&#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"setOrderType(1)"</span>&gt;</span>年龄升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"setOrderType(2)"</span>&gt;</span>年龄降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"setOrderType(0)"</span>&gt;</span>原本顺序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span>&gt;</span></span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: "#demo",</span><br><span class="line">    data: &#123;</span><br><span class="line">      searchName: "",</span><br><span class="line">      orderType: 0,</span><br><span class="line">      persons: [</span><br><span class="line">        &#123;name:"Tom",age:18&#125;,</span><br><span class="line">        &#123;name:"Jack",age:19&#125;,</span><br><span class="line">        &#123;name:"Bob",age:16&#125;,</span><br><span class="line">        &#123;name:"Mack",age:17&#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      filterPersons()&#123;</span><br><span class="line">        //取出相关的数据</span><br><span class="line">        const &#123;searchName,persons,orderType&#125;=this</span><br><span class="line">        //最终需要显示的数组</span><br><span class="line">        let fPersons;</span><br><span class="line">        //对persons进行过滤</span><br><span class="line">        fPersons = persons.filter(p =&gt; p.name.indexOf(searchName) !== -1)</span><br><span class="line"></span><br><span class="line">        //排序</span><br><span class="line">        if(orderType!==0)&#123;</span><br><span class="line">          fPersons.sort(function(p1,p2)&#123;  //返回正数，p2在前；返回负数，p1在前</span><br><span class="line">            if(orderType === 2)&#123;</span><br><span class="line">              return p2.age-p1.age</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">              return p1.age-p2.age</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return fPersons</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      setOrderType(orderType)&#123;</span><br><span class="line">        this.orderType = orderType</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">scrip</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-事件处理"><a href="#8-事件处理" class="headerlink" title="8.事件处理"></a>8.事件处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 绑定监听:</span><br><span class="line">  v-on:xxx=<span class="string">"fun"</span></span><br><span class="line">  <span class="meta">@xxx</span>=<span class="string">"fun"</span></span><br><span class="line">  <span class="meta">@xxx</span>=<span class="string">"fun(参数)"</span></span><br><span class="line">  默认事件形参: event</span><br><span class="line">  隐含属性对象: $event</span><br><span class="line"><span class="number">2</span>. 事件修饰符:</span><br><span class="line">  .prevent : 阻止事件的默认行为 event.preventDefault()</span><br><span class="line">  .stop : 停止事件冒泡 event.stopPropagation()</span><br><span class="line"><span class="number">3</span>. 按键修饰符</span><br><span class="line">  .keycode : 操作的是某个keycode值的健</span><br><span class="line">  .enter : 操作的是enter键</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1. 绑定监听<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"test1"</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"test2('abc')"</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"test3('abcd', $event)"</span>&gt;</span>test3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>2. 事件修饰符<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> @<span class="attr">click.prevent</span>=<span class="string">"test4"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 200px;height: 200px;background: red"</span> @<span class="attr">click</span>=<span class="string">"test5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background: blue"</span> @<span class="attr">click.stop</span>=<span class="string">"test6"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>3. 按键修饰符<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.13</span>=<span class="string">"test7"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.enter</span>=<span class="string">"test7"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span>&gt;</span></span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: '#example',</span><br><span class="line">    data: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      test1(event)&#123;</span><br><span class="line">        alert(event.target.innerHTML)</span><br><span class="line">      &#125;,</span><br><span class="line">      test2(msg)&#123;</span><br><span class="line">        alert(msg)</span><br><span class="line">      &#125;,</span><br><span class="line">      test3(msg,event)&#123;</span><br><span class="line">        alert(msg+"--"+event.target.innerHTML)</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      test4(event)&#123;</span><br><span class="line">        // event.preventDefault()   阻止事件默认行为</span><br><span class="line">        alert("百度一下");</span><br><span class="line">      &#125;,</span><br><span class="line">      test5()&#123;</span><br><span class="line">        alert("out")</span><br><span class="line">      &#125;,</span><br><span class="line">      test6(event)&#123;</span><br><span class="line">        // event.stopPropagation()  停止事件冒泡行为</span><br><span class="line">        alert("inner")</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      test7(event)&#123;</span><br><span class="line">        alert(event.target.value+' '+event.keyCode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">scrip</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-表单输入绑定"><a href="#9-表单输入绑定" class="headerlink" title="9.表单输入绑定"></a>9.表单输入绑定</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用v-model(双向数据绑定)自动收集数据</span><br><span class="line">  text/textarea</span><br><span class="line">  checkbox</span><br><span class="line">  radio</span><br><span class="line">  select</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/xxx"</span> @<span class="attr">submit.prevent</span>=<span class="string">"handleSubmit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">v-model</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>爱好: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"basket"</span> <span class="attr">value</span>=<span class="string">"basket"</span> <span class="attr">v-model</span>=<span class="string">"likes"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"basket"</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"foot"</span> <span class="attr">value</span>=<span class="string">"foot"</span> <span class="attr">v-model</span>=<span class="string">"likes"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"foot"</span>&gt;</span>足球<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"pingpang"</span> <span class="attr">value</span>=<span class="string">"pingpang"</span> <span class="attr">v-model</span>=<span class="string">"likes"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pingpang"</span>&gt;</span>乒乓<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>城市: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"cityId"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>未选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">:value</span>=<span class="string">"city.id"</span> <span class="attr">v-for</span>=<span class="string">"(city, index) in allCitys"</span> <span class="attr">:key</span>=<span class="string">"city.id"</span>&gt;</span>&#123;&#123;city.name&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>介绍: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">v-model</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span>&gt;</span></span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: '#demo',</span><br><span class="line">    data: &#123;</span><br><span class="line">      username: '',</span><br><span class="line">      pwd: '',</span><br><span class="line">      sex: '男',</span><br><span class="line">      likes: ['foot'],</span><br><span class="line">      allCitys: [&#123;id: 1, name: 'BJ'&#125;, &#123;id: 2, name: 'SS'&#125;, &#123;id: 3, name: 'SZ'&#125;],</span><br><span class="line">      cityId: '2',</span><br><span class="line">      info: ''</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleSubmit () &#123;</span><br><span class="line">        console.log(this.username, this.pwd, this.sex, this.likes, this.cityId, this.info)</span><br><span class="line">        alert('提交注册的ajax请求')</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">scrip</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-vue的生命周期"><a href="#10-vue的生命周期" class="headerlink" title="10.vue的生命周期"></a>10.vue的生命周期</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. vue对象的生命周期</span><br><span class="line">  <span class="number">1</span>). 初始化显示</span><br><span class="line">    * beforeCreate()</span><br><span class="line">    * created()</span><br><span class="line">    * beforeMount()</span><br><span class="line">    * mounted()</span><br><span class="line">  <span class="number">2</span>). 更新状态</span><br><span class="line">    * beforeUpdate()</span><br><span class="line">    * updated()</span><br><span class="line">  <span class="number">3</span>). 销毁vue实例: vm.$destory()</span><br><span class="line">    * beforeDestory()</span><br><span class="line">    * destoryed()</span><br><span class="line"><span class="number">2</span>. 常用的生命周期方法</span><br><span class="line">  created()/mounted(): 发送ajax请求, 启动定时器等异步任务</span><br><span class="line">  beforeDestory(): 做收尾工作, 如: 清除定时器</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"destroyVue"</span>&gt;</span>destory vue<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span>显示与隐藏<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span>&gt;</span></span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: "#test",</span><br><span class="line">    data: &#123;</span><br><span class="line">      isShow: true,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    //1. 初始化</span><br><span class="line">    beforeCreate()&#123;</span><br><span class="line">      console.log("beforeCreate()")</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">      console.log("created()")</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    beforeMount()&#123;</span><br><span class="line">      console.log("beforeMount()")</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted()&#123;  //初始化显示之后立即调用（1次）</span><br><span class="line">      console.log("mounted()")</span><br><span class="line">      this.intervalId = setInterval(() =&gt; &#123;</span><br><span class="line">        console.log("---------")</span><br><span class="line">        this.isShow = !this.isShow</span><br><span class="line">      &#125;,1000)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    //2.更新</span><br><span class="line">    beforeUpdate()&#123;</span><br><span class="line">      console.log("beforeUpdate()")</span><br><span class="line">    &#125;,</span><br><span class="line">    updated()&#123;</span><br><span class="line">      console.log("updated()")</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    //3.销毁</span><br><span class="line">    beforeDestroy()&#123;  //死亡之前调用（1次）</span><br><span class="line">      console.log("beforeDestroy()")</span><br><span class="line">      //清楚定时器</span><br><span class="line">      clearInterval(this.intervalId)</span><br><span class="line">    &#125;,</span><br><span class="line">    destroyed()&#123;</span><br><span class="line">      console.log("destroyed()")</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">      destroyVue()&#123;</span><br><span class="line">        //干掉vm</span><br><span class="line">        this.$destroy()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">scrip</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-过渡与动画"><a href="#11-过渡与动画" class="headerlink" title="11.过渡与动画"></a>11.过渡与动画</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. vue动画的理解</span><br><span class="line">  操作css的transition或animation</span><br><span class="line">  vue会给目标元素添加/移除特定的<span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class">2. 基本过渡动画的编码</span></span><br><span class="line"><span class="class">  1). 在目标元素外包裹&lt;<span class="title">transition</span> <span class="title">name</span></span>=<span class="string">"xxx"</span>&gt;</span><br><span class="line">  <span class="number">2</span>). 定义<span class="class"><span class="keyword">class</span>样式</span></span><br><span class="line">    1&gt;. 指定过渡样式: transition</span><br><span class="line">    <span class="number">2</span>&gt;. 指定隐藏时的样式: opacity/其它</span><br><span class="line"><span class="number">3</span>. 过渡的类名</span><br><span class="line">  xxx-enter-active: 指定显示的transition</span><br><span class="line">  xxx-leave-active: 指定隐藏的transition</span><br><span class="line">  xxx-enter、xxx-leave-to: 指定隐藏时的样式</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    /*指定过渡样式*/</span><br><span class="line">    .xxx-enter-active, .xxx-leave-active &#123;</span><br><span class="line">      transition: opacity 1s</span><br><span class="line">    &#125;</span><br><span class="line">    /*指定隐藏时的样式*/</span><br><span class="line">    .xxx-enter, .xxx-leave-to &#123;</span><br><span class="line">      opacity: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*指定过渡样式*/</span><br><span class="line">    .move-enter-active &#123;</span><br><span class="line">      transition: all 1s</span><br><span class="line">    &#125;</span><br><span class="line">    .move-leave-active &#123;</span><br><span class="line">      transition: all 3s</span><br><span class="line">    &#125;</span><br><span class="line">    /*指定隐藏时的样式*/</span><br><span class="line">    .move-enter, .move-leave-to &#123;</span><br><span class="line">      opacity: 0;</span><br><span class="line">      transform: translateX(20px)</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"show = !show"</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"xxx"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"show"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"show = !show"</span>&gt;</span>Toggle2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"move"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"show"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span>&gt;</span></span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: '#demo',</span><br><span class="line">    data: &#123;</span><br><span class="line">      show: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: '#demo2',</span><br><span class="line">    data: &#123;</span><br><span class="line">      show: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">scrip</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12-过滤器"><a href="#12-过滤器" class="headerlink" title="12.过滤器"></a>12.过滤器</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 理解过滤器</span><br><span class="line">  功能: 对要显示的数据进行特定格式化后再显示</span><br><span class="line">  注意: 并没有改变原本的数据, 可是产生新的对应的数据</span><br><span class="line"><span class="number">2</span>. 编码</span><br><span class="line">  <span class="number">1</span>). 定义过滤器</span><br><span class="line">    Vue.filter(filterName, function(value[,arg1,arg2,...])&#123;</span><br><span class="line">      <span class="comment">// 进行一定的数据处理</span></span><br><span class="line">      <span class="keyword">return</span> newValue</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="number">2</span>). 使用过滤器</span><br><span class="line">    &lt;div&gt;&#123;&#123;myData | filterName&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;myData | filterName(arg)&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--需求: 对当前时间进行指定格式显示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>显示格式化的日期时间<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;date&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>完整版：&#123;&#123;date | dateString&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>年月日：&#123;&#123;date | dateString('YYYY-MM-DD')&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>时分秒：&#123;&#123;date | dateString('HH:mm:ss')&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用cdn引入moment.js库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/moment.js/2.24.0/moment.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scrip</span>&gt;</span></span><br><span class="line">  //在创建 Vue 实例之前全局定义过滤器</span><br><span class="line">  //format="YYYY-MM-DD HH:mm:ss" 形参默认值，format有值时为当前值，没值时为右边默认值</span><br><span class="line">  Vue.filter("dateString",function (value,format="YYYY-MM-DD HH:mm:ss") &#123;</span><br><span class="line">    return moment(value).format(format)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  //创建 Vue 实例</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: "#test",</span><br><span class="line">    data: &#123;</span><br><span class="line">      date: new Date()</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted: function () &#123;  //初始化显示之后立即调用（1次）</span><br><span class="line">      //启动定时器</span><br><span class="line">      setInterval(() =&gt;&#123;</span><br><span class="line">        this.date = new Date()</span><br><span class="line">      &#125;,1000)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">scrip</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-vue基本使用&quot;&gt;&lt;a href=&quot;#1-vue基本使用&quot; class=&quot;headerlink&quot; title=&quot;1.vue基本使用&quot;&gt;&lt;/a&gt;1.vue基本使用&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="vue" scheme="http://zhangligong.xyz/categories/vue/"/>
    
    
      <category term="vue" scheme="http://zhangligong.xyz/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>VSCode工具插件推荐</title>
    <link href="http://zhangligong.xyz/2019/11/13/blog027/"/>
    <id>http://zhangligong.xyz/2019/11/13/blog027/</id>
    <published>2019-11-13T15:07:38.000Z</published>
    <updated>2019-11-13T15:58:20.550Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-VSCode简介"><a href="#一-VSCode简介" class="headerlink" title="一:VSCode简介"></a>一:VSCode简介</h3><p>VSCode（ Visual Studio Code）是微软出的一款轻量级代码编辑器 ，重要的是它在Windows, OS X 和Linux操作系统的桌面上均可运行。Visual Studio Code内置了对JavaScript, TypeScript和Node.js语言的支持，并且为其他语言如C++, C#, Python, PHP等提供了丰富的扩展库和运行时。</p><h3 id="二-VSCode安装"><a href="#二-VSCode安装" class="headerlink" title="二:VSCode安装"></a>二:VSCode安装</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><p>官网下载: <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a></p><h4 id="2-推荐插件安装"><a href="#2-推荐插件安装" class="headerlink" title="2.推荐插件安装"></a>2.推荐插件安装</h4><ol><li>HTML Snippets : H5代码片段以及提示</li><li>HTML CSS Support : 让 html 标签上写class 智能提示当前项目所支持的样式 新版已经支持scss文件检索</li><li>Debugger for Chrome : 让 vscode 映射 chrome 的 debug功能，静态页面都可以用 vscode 来打断点调试</li><li>vetur : vue框架所需的插件 语法高亮、智能感知、Emmet等</li><li>VueHelper : snippet代码片段</li><li>Auto Close Tag : 自动补全关闭标签</li><li>Auto Rename Tag : 自动重命名标签</li><li>Beautify : HTML、CSS、JS、JSON SASS语法高亮,格式化代码的工具,ctrl+shift+p输入beautify就有提示。</li><li>Better Comments : 不同的注释显示不同的颜色, *, ?, ! 注释颜色是不同的</li><li>Bracket Pair Colorizer : 对应括号显示同样的颜色.</li><li>Code Runner : 运行js文件工具, ctrl+alt+n 就可以运行文件,系统自动调用node运行文件</li><li>Document This : ctrl+alt+D,两次.文档注释(/** tab)</li><li>JavaScript(ES6) code snippets : es6代码自动补全</li><li>jQuery Code Snippets : jquery代码自动补全,如 jqAjax生成ajax代码</li><li>Node.js Modules IntelliSense : 提供JavaScript 和 TypeScript导入声明时自动补全</li><li>Path Autocomplete :路径补全工具</li><li>Project Manager : 项目管理工具</li><li>vscode-icons : 文件图标主题</li><li>vue-beautify : vue文件格式化</li><li>markdown使用 : 新建md文件,ctrl+shift+v可边写边预览    </li></ol><h4 id="3-配置菜单"><a href="#3-配置菜单" class="headerlink" title="3.配置菜单"></a>3.配置菜单</h4><p>点击菜单: 文件–勾选自动保存</p><p>窗口字体缩放: ctrl + -, ctrl + +</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-VSCode简介&quot;&gt;&lt;a href=&quot;#一-VSCode简介&quot; class=&quot;headerlink&quot; title=&quot;一:VSCode简介&quot;&gt;&lt;/a&gt;一:VSCode简介&lt;/h3&gt;&lt;p&gt;VSCode（ Visual Studio Code）是微软出的一款轻量级代
      
    
    </summary>
    
      <category term="前端" scheme="http://zhangligong.xyz/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://zhangligong.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>线程的生命周期,同步,和通信</title>
    <link href="http://zhangligong.xyz/2019/10/27/blog026/"/>
    <id>http://zhangligong.xyz/2019/10/27/blog026/</id>
    <published>2019-10-27T11:56:29.000Z</published>
    <updated>2019-10-29T15:40:05.067Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-线程的生命周期"><a href="#一-线程的生命周期" class="headerlink" title="一:线程的生命周期"></a>一:线程的生命周期</h3><h4 id="1-Thread-State类"><a href="#1-Thread-State类" class="headerlink" title="1.Thread.State类"></a>1.Thread.State类</h4><p>Thread.State类定义了线程的几种状态,在一个完整的生命周期中通常要经历五种状态:</p><ol><li><strong>新建</strong>: 当一个Thread类或其子类的对象被声明并创建时</li><li><strong>就绪</strong>: start()方法后,将进入线程队列等待CPU时间片</li><li><strong>运行</strong>: 当就绪的线程被调度并获得CPU资源时,便进入运行状态</li><li><strong>阻塞</strong>: 被人为挂起或执行输入输出操作时,让出CPU并临时终止自己的执行,进入阻塞状态</li><li><strong>死亡</strong>: 线程完成全部工作或被提前强制性终止或出现异常导致结束</li></ol><h4 id="2-线程状态转换图"><a href="#2-线程状态转换图" class="headerlink" title="2.线程状态转换图"></a>2.线程状态转换图</h4><p><img src="/2019/10/27/blog026/hexo01.png" alt="线程状态图"></p><h3 id="二-线程的同步"><a href="#二-线程的同步" class="headerlink" title="二:线程的同步"></a>二:线程的同步</h3><h4 id="1-多线程的安全问题"><a href="#1-多线程的安全问题" class="headerlink" title="1.多线程的安全问题"></a>1.多线程的安全问题</h4><ol><li>问题原有: 当多条语句在操作同一个线程共享数据时,一个线程对多条语句只执行了一部分,另一个线程就参与进来执行,导致共享数据的错误.</li><li>解决办法: 对多条操作共享数据的语句,只能让一个线程都执行完,在执行过程中,其他线程不可以参与执行.</li></ol><h4 id="2-三种解决方法"><a href="#2-三种解决方法" class="headerlink" title="2.三种解决方法"></a>2.三种解决方法</h4><h5 id="2-1-同步代码块"><a href="#2-1-同步代码块" class="headerlink" title="2.1.同步代码块"></a>2.1.同步代码块</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象)&#123;</span><br><span class="line">  <span class="comment">// 需要被同步的代码;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">说明：1.操作共享数据的代码，即为需要被同步的代码。  --&gt;不能包含代码多了，也不能包含代码少了。</span></span><br><span class="line"><span class="comment">      2.共享数据：多个线程共同操作的变量。比如：ticket就是共享数据。</span></span><br><span class="line"><span class="comment">      3.同步监视器，俗称：锁。任何一个类的对象，都可以充当锁。</span></span><br><span class="line"><span class="comment">         要求：多个线程必须要共用同一把锁。</span></span><br><span class="line"><span class="comment">补充：在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器。</span></span><br><span class="line"><span class="comment"> 在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="2-2-同步方法"><a href="#2-2-同步方法" class="headerlink" title="2.2.同步方法"></a>2.2.同步方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">(String id)</span></span>&#123;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。</span></span><br><span class="line"><span class="comment">      1. 同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。</span></span><br><span class="line"><span class="comment">      2. 非静态的同步方法，同步监视器是：this</span></span><br><span class="line"><span class="comment">         静态的同步方法，同步监视器是：当前类本身</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>同步的方式，解决了线程的安全问题。—好处<br>操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。 —局限性</p><h5 id="2-3-示例"><a href="#2-3-示例" class="headerlink" title="2.3.示例"></a>2.3.示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 示例:创建三个窗口卖票，总票数为100张.采用继承方式</span></span><br><span class="line"><span class="comment"> * 1.问题：卖票过程中，出现了重票、错票 --&gt;出现了线程的安全问题</span></span><br><span class="line"><span class="comment"> * 2.问题出现的原因：当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票。</span></span><br><span class="line"><span class="comment"> * 3.如何解决：当一个线程a在操作ticket的时候，其他线程不能参与进来。直到线程a操作完ticket时，其他</span></span><br><span class="line"><span class="comment"> *            线程才可以开始操作ticket。这种情况即使线程a出现了阻塞，也不能被改变。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//方式一:采用继承类的方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">// 共享资源需要加上static</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//同步方法</span></span><br><span class="line"><span class="comment">//            handleTicket();</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 同步代码块</span></span><br><span class="line">            <span class="comment">// 不能使用this,this代表w1,w2,w3</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Window1.class) &#123;   <span class="comment">//Class clazz = Window1.class,Window1.class只会加载一次</span></span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(getName()+<span class="string">":"</span>+ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方式一</span></span><br><span class="line">    <span class="comment">/*private void handleTicket() &#123;</span></span><br><span class="line"><span class="comment">        // 同步代码块</span></span><br><span class="line"><span class="comment">        synchronized (Window.class) &#123;   //Class clazz = Window.class</span></span><br><span class="line"><span class="comment">            if (ticket &gt; 0)&#123;</span></span><br><span class="line"><span class="comment">                System.out.println(getName()+":"+ticket);</span></span><br><span class="line"><span class="comment">                ticket--;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">// 方式二</span></span><br><span class="line">    <span class="comment">// 同步方法: 需要加上static,保证是同一个对象锁</span></span><br><span class="line">    <span class="comment">// 方法不加static时,同步监视器：w1,w2,w3</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">handleTicket</span><span class="params">()</span> </span>&#123;   <span class="comment">// 同步监视器：Window.class</span></span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//sleep()方法属于静态方法,与对象无关</span></span><br><span class="line">                sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// static方法内容不能使用this,super关键字</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window1 w1 = <span class="keyword">new</span> Window1();</span><br><span class="line">        Window1 w2 = <span class="keyword">new</span> Window1();</span><br><span class="line">        Window1 w3 = <span class="keyword">new</span> Window1();</span><br><span class="line"></span><br><span class="line">        w1.setName(<span class="string">"窗口一"</span>);</span><br><span class="line">        w2.setName(<span class="string">"窗口二"</span>);</span><br><span class="line">        w3.setName(<span class="string">"窗口三"</span>);</span><br><span class="line"></span><br><span class="line">        w1.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二:采用实现接口的方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">// 不需要加static</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//同步方法</span></span><br><span class="line"><span class="comment">//            handleTicket();</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//同步代码块</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;   <span class="comment">//此时的this:唯一的Window2的对象</span></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// getName()属于Thread的方法</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式一</span></span><br><span class="line">    <span class="comment">/*private void handleTicket() &#123;</span></span><br><span class="line"><span class="comment">        // 同步代码块</span></span><br><span class="line"><span class="comment">        synchronized (this) &#123;   //同步监视器：this</span></span><br><span class="line"><span class="comment">            if(ticket &gt; 0)&#123;</span></span><br><span class="line"><span class="comment">                System.out.println(Thread.currentThread().getName()+":"+ticket);</span></span><br><span class="line"><span class="comment">                ticket--;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">//方式二</span></span><br><span class="line">    <span class="comment">//同步方法: 不需要加static</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">handleTicket</span><span class="params">()</span> </span>&#123;  <span class="comment">//同步监视器：this</span></span><br><span class="line">        <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplementTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window2 w1 = <span class="keyword">new</span> Window2();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w1);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w1);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"窗口一"</span>);</span><br><span class="line">        t2.setName(<span class="string">"窗口二"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口三"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-4-lock"><a href="#2-4-lock" class="headerlink" title="2.4.lock"></a>2.4.lock</h5><ol><li><p>synchronized 与 Lock的异同？</p><p>相同：二者都可以解决线程安全问题<br>不同：synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器<br>Lock需要手动的启动同步（lock()），同时结束同步也需要手动的实现（unlock()）</p></li><li><p>优先使用顺序：</p><p> Lock &gt; 同步代码块（已经进入了方法体，分配了相应资源）&gt; 同步方法（在方法体之外）</p></li><li><p>代码:</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//1.实例化ReentrantLock</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//2.调用锁定方法lock()</span></span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"：售票，票号为："</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//3.调用解锁方法：unlock()</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window w = <span class="keyword">new</span> Window();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-线程的通信"><a href="#三-线程的通信" class="headerlink" title="三:线程的通信"></a>三:线程的通信</h3><h4 id="1-涉及到的三个方法"><a href="#1-涉及到的三个方法" class="headerlink" title="1.涉及到的三个方法"></a>1.涉及到的三个方法</h4><ol><li>wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。</li><li>notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。</li><li>notifyAll():一旦执行此方法，就会唤醒所有被wait的线程。</li></ol><h4 id="2-说明"><a href="#2-说明" class="headerlink" title="2.说明"></a>2.说明</h4><ol><li>wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。</li><li>wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。否则，会出现IllegalMonitorStateException异常.</li><li>wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。</li></ol><h4 id="3-sleep-和-wait-的异同？"><a href="#3-sleep-和-wait-的异同？" class="headerlink" title="3.sleep() 和 wait()的异同？"></a>3.sleep() 和 wait()的异同？</h4><ol><li>相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</li><li>不同点：<ol><li>两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</li><li>调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中</li><li>关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁</li></ol></li></ol><h4 id="4-示例"><a href="#4-示例" class="headerlink" title="4.示例"></a>4.示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                obj.notify();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(number &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//使得调用如下wait()方法的线程进入阻塞状态</span></span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommunicationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Number number = <span class="keyword">new</span> Number();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(number);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(number);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-线程的生命周期&quot;&gt;&lt;a href=&quot;#一-线程的生命周期&quot; class=&quot;headerlink&quot; title=&quot;一:线程的生命周期&quot;&gt;&lt;/a&gt;一:线程的生命周期&lt;/h3&gt;&lt;h4 id=&quot;1-Thread-State类&quot;&gt;&lt;a href=&quot;#1-Thread-S
      
    
    </summary>
    
      <category term="并发" scheme="http://zhangligong.xyz/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://zhangligong.xyz/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>线程的概念和使用(创建)</title>
    <link href="http://zhangligong.xyz/2019/10/22/blog025/"/>
    <id>http://zhangligong.xyz/2019/10/22/blog025/</id>
    <published>2019-10-22T15:59:31.000Z</published>
    <updated>2019-10-28T16:03:22.318Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-基本概念"><a href="#一-基本概念" class="headerlink" title="一:基本概念"></a>一:基本概念</h3><h4 id="1-程序-进程-线程的理解"><a href="#1-程序-进程-线程的理解" class="headerlink" title="1.程序,进程,线程的理解"></a>1.程序,进程,线程的理解</h4><ol><li><strong>程序(program)是为完成指定任务,用某种语言编写的一组指令集合.指一段静态的代码.</strong></li><li><strong>进程(process)是正在运行的一个程序.是一个动态的过程.</strong></li><li><strong>线程(thread)是一个程序内部的一条执行路径.</strong></li></ol><h4 id="2-单核CPU-多核CPU的理解"><a href="#2-单核CPU-多核CPU的理解" class="headerlink" title="2.单核CPU,多核CPU的理解"></a>2.单核CPU,多核CPU的理解</h4><ol><li>单核CPU,实质是一种假的多线程,在一个时间单元内,也只能执行一个线程的任务.</li><li>多核CPU是多线程,每个核单独执行一个线程的任务.</li><li>一个java应用程序java.exe,至少有三个线程:<strong>main()主线程,gc()垃圾回收线程,异常处理线程.</strong></li></ol><h4 id="3-并行与并发"><a href="#3-并行与并发" class="headerlink" title="3.并行与并发"></a>3.并行与并发</h4><ol><li><strong>并行:多个CPU同时执行多个任务.(多个人同时做不同的事)</strong></li><li><strong>并发:一个CPU(采用时间片)同时执行多个任务.(多个人做同一件事)</strong></li></ol><h4 id="4-多线程优点"><a href="#4-多线程优点" class="headerlink" title="4.多线程优点"></a>4.多线程优点</h4><ol><li>提高应用程序的响应.</li><li>提高CPU的利用率</li><li>改善程序结构</li></ol><h4 id="5-何时需要多线程"><a href="#5-何时需要多线程" class="headerlink" title="5.何时需要多线程"></a>5.何时需要多线程</h4><ol><li>程序需要同时执行两个或多个任务.</li><li>程序需要实现一些需要等待的任务.</li><li>需要一些后台运行的程序时.</li></ol><h3 id="二-线程的创建和使用"><a href="#二-线程的创建和使用" class="headerlink" title="二:线程的创建和使用"></a>二:线程的创建和使用</h3><p>JVM允许程序运行多个线程,通过<strong>java.lang.Thread</strong>类体现.JDK1.5之前有两种方式创建线程: <strong>继承Thread类 和 实现Runnable接口</strong>.</p><h4 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1.继承Thread类"></a>1.继承Thread类</h4><ol><li><p>Thread类特性</p><ol><li><strong>每个线程都是通过某个特定Thread对象的run()方法完成操作的</strong>,常把run()方法的主体称为<strong>线程体</strong>.</li><li><strong>通过Thread对象的start()方法启动线程</strong>,不是直接调用run()方法</li></ol></li><li><p>Thread类构造器</p><ol><li><strong>Thread(): 创建Thread对象</strong></li><li>Thread(String threadname): 创建线程并指定线程实例名</li><li><strong>Thread(Runnable target): 创出线程的目标对象,它实现了Runnable接口的run()</strong></li><li>Thread(Runnable target, String name): 创建新的Thread对象</li></ol></li><li><p>流程</p><ol><li><strong>继承Thread</strong></li><li><strong>重写Thread中的run()</strong></li><li><strong>创建线程对象</strong></li><li><strong>调用对象的start(): 启动线程,调用run()</strong></li></ol></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123; <span class="keyword">super</span>(name); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 重写Thread类的run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">/*public Thread() &#123;</span></span><br><span class="line"><span class="comment">                    init(null, null, "Thread-" + nextThreadNum(), 0);</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建Thread类的子类的对象</span></span><br><span class="line"><span class="comment">//        MyThread t1 = new MyThread();</span></span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread(<span class="string">"分线程"</span>);</span><br><span class="line">        <span class="comment">//设置线程名称</span></span><br><span class="line"><span class="comment">//        t1.setName("线程一");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.通过此对象调用start():①启动当前线程 ② 调用当前线程的run()</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//问题一：我们不能通过直接调用run()的方式启动线程。</span></span><br><span class="line"><span class="comment">//        t1.run();</span></span><br><span class="line">        <span class="comment">//问题二：再启动一个线程，遍历100以内的偶数。不可以还让已经start()的线程去执行。</span></span><br><span class="line">        <span class="comment">/*if (threadStatus != 0)</span></span><br><span class="line"><span class="comment">            throw new IllegalThreadStateException();*/</span></span><br><span class="line"><span class="comment">//        t1.start();       // java.lang.IllegalThreadStateException</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//我们需要重新创建一个线程的对象</span></span><br><span class="line">        MyThread t2 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t2.start();</span><br><span class="line">        Thread.currentThread().setName(<span class="string">"主线程"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如下操作仍然是在main线程中执行的。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意点</p><ol><li><strong>对象调用run()方法,没有启动多线程模式</strong>,</li><li>run()方法由JVM掉用,什么时候,执行过程都由CPU调度决定.</li><li><strong>启动多线程,必须调用start()方法</strong>.</li><li><strong>一个线程对象不能重复调用start()方法,否则发生 “线程状态不符” 异常</strong></li></ol></li></ol><h4 id="2-实现Runnable接口"><a href="#2-实现Runnable接口" class="headerlink" title="2.实现Runnable接口"></a>2.实现Runnable接口</h4><ol><li><p>流程</p><ol><li><strong>实现Runnable接口.</strong></li><li><strong>重写Runnable接口中的run()方法.</strong></li><li><strong>通过Thread(Runnable target)构造器创建线程对象.</strong></li><li><strong>调用start()方法: 开启线程,调用Runnable子类接口的run()方法.</strong></li></ol></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建一个实现了Runnable接口的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//2. 实现类去实现Runnable中的抽象方法：run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建实现类的对象</span></span><br><span class="line">        MyThread2 r1 = <span class="keyword">new</span> MyThread2();</span><br><span class="line">        <span class="comment">//4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(r1);</span><br><span class="line">        t1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        <span class="comment">//5. 通过Thread类的对象调用start():① 启动线程 ②调用当前线程的run()</span></span><br><span class="line">        <span class="comment">// --&gt;调用了Runnable类型的target的run()</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再启动一个线程，遍历100以内的偶数</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(r1);</span><br><span class="line">        t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-两种方式的联系与区别"><a href="#3-两种方式的联系与区别" class="headerlink" title="3.两种方式的联系与区别"></a>3.两种方式的联系与区别</h4><p><code>public class Thread extends Object implements Runnable</code></p><ol><li>联系: <strong>都需要重写run()方法,将线程要执行的逻辑都声明在run()中</strong></li><li>实现Runnable接口方式的好处<ol><li><strong>避免了单继承的局限性</strong></li><li><strong>多个线程可以共享同一个接口实现类的对象,适合处理多个线程有共享数据的情况</strong></li></ol></li></ol><h3 id="三-Thread类的相关方法"><a href="#三-Thread类的相关方法" class="headerlink" title="三:Thread类的相关方法"></a>三:Thread类的相关方法</h3><ol><li><strong>void start(): 启动当前线程,并执行当前线程的run()方法</strong></li><li><strong>run(): 被CPU调度时执行的操作,将创建的线程要执行的操作声明在此方法中</strong></li><li><strong>String getName(): 返回线程的名称</strong></li><li><strong>void setName(String name): 设置线程的名称</strong></li><li><strong>static Thread currentThread(): 返回执行当前代码的线程. 在Thread子类中指this, 通常用于主线程和Runnable实现类.</strong></li><li><strong>static void yield(): 释放当前cpu的执行权</strong></li><li><strong>join(): 在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态</strong></li><li><strong>static void sleep(long millitime): 让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态</strong></li><li><strong>boolean isAlive(): 判断当前线程是否存活</strong></li></ol><h3 id="四-线程的优先级及分类"><a href="#四-线程的优先级及分类" class="headerlink" title="四:线程的优先级及分类"></a>四:线程的优先级及分类</h3><ol><li>调用策略: <strong>时间片</strong>(单元时间内做任务切换) 或 <strong>抢占式</strong>(高优先级的线程抢占CPU)</li><li>调度方法: 同优先级线程组成先进先出队列(先到先服务),使用时间片策略; 对高优先级,使用抢占式策略</li><li>线程优先级<ol><li><strong>MAX_PRIORITY: 10;  MIN_PRIORITY: 1;  NORM_PRIORITY: 5;(默认优先级)</strong></li><li><strong>getPriority(): 返回线程等级值;  setPriority(int newPriority): 设置线程等级值</strong></li><li><strong>说明: 线程创建时继承父线程的优先级; 低优先级只是获得调度的概率低,并不一定在高优先级线程之后才被调用</strong></li></ol></li><li>线程分类<ol><li>分为<strong>守护线程 和 用户线程</strong>.</li><li>守护线程是用来服务用户线程的,在<strong>start()方法前调用thread.setDaemon(true)可以把一个用户线程变为一个守护线程.</strong></li><li>java垃圾回收就是一个守护线程.<strong>若JVM中都是守护线程,当前JVM将退出</strong>.</li></ol></li></ol><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    sleep(10);</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + Thread.currentThread().getPriority() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            if(i % 20 == 0)&#123;</span></span><br><span class="line"><span class="comment">//                yield();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HelloThread h1 = <span class="keyword">new</span> HelloThread(<span class="string">"Thread：1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        h1.setName("线程一");</span></span><br><span class="line">        <span class="comment">//设置分线程的优先级</span></span><br><span class="line">        h1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        h1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给主线程命名</span></span><br><span class="line">        Thread.currentThread().setName(<span class="string">"主线程"</span>);</span><br><span class="line">        Thread.currentThread().setPriority(Thread.MIN_PRIORITY);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + Thread.currentThread().getPriority() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            if(i == 20)&#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    h1.join();</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(h1.isAlive());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-示例"><a href="#五-示例" class="headerlink" title="五:示例"></a>五:示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 示例：创建两个分线程，其中一个线程遍历100以内的偶数，另一个线程遍历100以内的奇数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-10-25 1:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        MyThread1 m1 = new MyThread1();</span></span><br><span class="line"><span class="comment">//        MyThread3 m2 = new MyThread3();</span></span><br><span class="line"><span class="comment">//        m1.start();</span></span><br><span class="line"><span class="comment">//        m3.start();</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 方式二:采用匿名内部类</span></span><br><span class="line">        <span class="comment">//创建Thread类的匿名子类的方式:遍历偶数</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Thread类的匿名子类的方式:遍历奇数</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式一:采用两个类分别执行不同任务</span></span><br><span class="line"><span class="comment">// 遍历100以内偶数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历100以内奇数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread3</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-基本概念&quot;&gt;&lt;a href=&quot;#一-基本概念&quot; class=&quot;headerlink&quot; title=&quot;一:基本概念&quot;&gt;&lt;/a&gt;一:基本概念&lt;/h3&gt;&lt;h4 id=&quot;1-程序-进程-线程的理解&quot;&gt;&lt;a href=&quot;#1-程序-进程-线程的理解&quot; class=&quot;he
      
    
    </summary>
    
      <category term="并发" scheme="http://zhangligong.xyz/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://zhangligong.xyz/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>网络编程</title>
    <link href="http://zhangligong.xyz/2019/10/20/blog024/"/>
    <id>http://zhangligong.xyz/2019/10/20/blog024/</id>
    <published>2019-10-20T14:49:43.000Z</published>
    <updated>2019-10-20T17:12:05.321Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-TCP网络编程"><a href="#一-TCP网络编程" class="headerlink" title="一:TCP网络编程"></a>一:TCP网络编程</h3><h4 id="1-Socket的TCP编程"><a href="#1-Socket的TCP编程" class="headerlink" title="1.Socket的TCP编程"></a>1.Socket的TCP编程</h4><p>Java语言的基于套接字编程分为服务端编程和客户端编程，其通信模型如图所示：</p><p><img src="/2019/10/20/blog024/hexo01.png" alt="基于Socket的TCP编程"></p><h4 id="2-客服端Socket的工作过程"><a href="#2-客服端Socket的工作过程" class="headerlink" title="2.客服端Socket的工作过程"></a>2.客服端Socket的工作过程</h4><ol><li>创建 Socket ：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。<strong>创建的同时会自动向服务器方发起连接,若服务器端响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。</strong></li><li>打开连接到 Socket  的输入/ 出流： 使用 <strong>getInputStream()</strong>方法获得输入流，使用<strong>getOutputStream()</strong>方法获得输出流，进行数据传输.</li><li>按照一定的协议对 Socket 进行读/ 写操作：通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息），通过输出流将信息写入线程。</li><li>关闭 Socket：断开客户端到服务器的连接，释放线路</li></ol><h4 id="3-服务器程序的工作过程"><a href="#3-服务器程序的工作过程" class="headerlink" title="3.服务器程序的工作过程"></a>3.服务器程序的工作过程</h4><ol><li>调用 ServerSocket(int port) ：创建一个服务器端套接字，并绑定到指定端口上。用于监听客户端的请求。<strong>服务器必须事先建立一个等待客户请求建立套接字的 连接的ServerSocket 对象</strong>。</li><li>调用 accept()：<strong>监听连接请求，如果客户端请求连接，则接受连接，返回Socket通信套接字对象。</strong></li><li>调用该Socket 类对象的 getOutputStream() 和 和 getInputStream ()：获取输出流和输入流，开始网络数据的发送和接收。</li><li>关闭ServerSocket 和Socket 对象：客户端访问结束，关闭通信套接字。</li></ol><h4 id="4-示例"><a href="#4-示例" class="headerlink" title="4.示例"></a>4.示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现TCP的网络编程</span></span><br><span class="line"><span class="comment"> * 示例：从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给客户端。</span></span><br><span class="line"><span class="comment"> * 并关闭相应的连接。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-10-20 15:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clientTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建Socket对象，指明服务器端的ip和端口号</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">"127.0.0.1"</span>), <span class="number">8989</span>);</span><br><span class="line">        <span class="comment">//2.获取一个输出流，用于输出数据</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//3.创建缓冲流,用于读取文件</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"beauty.jpg"</span>));</span><br><span class="line">        <span class="comment">//4.写出数据的操作,发送文件</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( (len = bis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭数据的输出(IO流是阻塞的)</span></span><br><span class="line">        <span class="comment">//会在流末尾写入一个标记,对方才能读到-1,否则对方的读取方法会一致阻塞</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.接收来自于服务器端的数据，并显示到控制台上</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">30</span>];</span><br><span class="line">        <span class="keyword">int</span> len2;</span><br><span class="line">        <span class="keyword">while</span> ( (len2 = is.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            baos.write(buf,<span class="number">0</span>,len2);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.资源的关闭</span></span><br><span class="line">        baos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        <span class="comment">//关闭socket, is,os意味着也关闭了</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serverTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建服务器端的ServerSocket，指明自己的端口号</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8989</span>);</span><br><span class="line">        <span class="comment">//2.调用accept()表示接收来自于客户端的socket</span></span><br><span class="line">        <span class="comment">//监听一个客服端的连接,该方法是个阻塞方法,若没有连接,会一直等待</span></span><br><span class="line">        Socket socket = ss.accept();</span><br><span class="line">        <span class="comment">//3.获取输入流</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        <span class="comment">//4.创建输出流,用于保存文件</span></span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"beauty_dest.jpg"</span>));</span><br><span class="line">        <span class="comment">//5.读取数据,保存文件到本地</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( (len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"照片已保存!"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.服务器端给予客户端反馈</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        os.write(<span class="string">"你好,美美,你发的照片已收到!"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.关闭资源</span></span><br><span class="line">        bos.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        <span class="comment">//不再接受任何客服端通信</span></span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-UDP网络编程"><a href="#二-UDP网络编程" class="headerlink" title="二:UDP网络编程"></a>二:UDP网络编程</h3><h4 id="1-UDP网络通信"><a href="#1-UDP网络通信" class="headerlink" title="1.UDP网络通信"></a>1.UDP网络通信</h4><ol><li>类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序。</li><li>UDP数据报通过数据报套接字 DatagramSocket 发送和接收，<strong>系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</strong></li><li>DatagramPacket 对象封装了UDP数据报，在数据报中包含了<strong>发送端的IP地址和端口号以及接收端的IP地址和端口号。</strong></li><li>UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接。如同发快递包裹一样。</li></ol><h4 id="2-DatagramSocket类"><a href="#2-DatagramSocket类" class="headerlink" title="2.DatagramSocket类"></a>2.DatagramSocket类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常用方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DatagramSocket</span><span class="params">(<span class="keyword">int</span> port)</span>创建数据报套接字并将其绑定到本地主机上的指定端口。套接字将被</span></span><br><span class="line"><span class="function">绑定到通配符地址，IP 地址由内核来选择。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DatagramSocket</span><span class="params">(<span class="keyword">int</span> port,InetAddress laddr)</span>创建数据报套接字，将其绑定到指定的本地地址。本地端口必须在 0 到 65535 之间（包括两者）。如果 IP 地址为 0.0.0.0，套接字将被绑定到通配符地址，IP 地址由内核选择。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>关闭此数据报套接字。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(DatagramPacket p)</span>从此套接字发送数据报包。DatagramPacket 包含的信息指示：将要发送的数据、其长度、远程主机的IP 地址和远程主机的端口号。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(DatagramPacket p)</span>从此套接字接收数据报包。当此方法返回时，DatagramPacket的缓冲区填充了接收的数据。数据报包也包含发送方的 IP 地址和发送方机器上的端口号。 此方法在接收到数据报前一直阻塞。数据报包对象的 length 字段包含所接收信息的长度。如果信息比包的长度长，该信息将被截短。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InetAddress <span class="title">getLocalAddress</span><span class="params">()</span>获取套接字绑定的本地地址。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLocalPort</span><span class="params">()</span>返回此套接字绑定的本地主机上的端口号。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InetAddress <span class="title">getInetAddress</span><span class="params">()</span>返回此套接字连接的地址。如果套接字未连接，则返回<span class="keyword">null</span>。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span>返回此套接字的端口。如果套接字未连接，则返回-1。</span></span><br></pre></td></tr></table></figure><h4 id="3-DatagramPacket类"><a href="#3-DatagramPacket类" class="headerlink" title="3.DatagramPacket类"></a>3.DatagramPacket类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常用方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DatagramPacket</span><span class="params">(<span class="keyword">byte</span>[] buf,<span class="keyword">int</span> length)</span>构造 DatagramPacket，用来接收长度为 length 的数据包。 length 参数必须小于等于 buf.length。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DatagramPacket</span><span class="params">(<span class="keyword">byte</span>[] buf,<span class="keyword">int</span> length,InetAddress address,<span class="keyword">int</span> port)</span>构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。length参数必须小于等于buf.length。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InetAddress <span class="title">getAddress</span><span class="params">()</span>返回某台机器的 IP 地址，此数据报将要发往该机器或者是从该机器接收到的。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span>返回某台远程主机的端口号，此数据报将要发往该主机或者是从该主机接收到的。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">byte</span>[] <span class="title">getData</span><span class="params">()</span>返回数据缓冲区。接收到的或将要发送的数据从缓冲区中的偏移量 offset 处开始，持续 length 长度。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span>返回将要发送或接收到的数据的长度。</span></span><br></pre></td></tr></table></figure><h4 id="4-流程"><a href="#4-流程" class="headerlink" title="4.流程"></a>4.流程</h4><ol><li>DatagramSocket 与 DatagramPacket</li><li>建立发送端,接受端</li><li>建立数据包</li><li>调用Socket的发送,接受方法</li><li>关闭Socket</li></ol><p><strong>发送端与接收端是两个独立的运行程序.</strong></p><h4 id="5-示例"><a href="#5-示例" class="headerlink" title="5.示例"></a>5.示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现UDP协议的网络编程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-10-20 17:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">senderTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建DatagramSocket对象</span></span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.创建数据包,存储数据</span></span><br><span class="line">            <span class="keyword">byte</span>[] data = <span class="string">"你好,我使用UDP传输数据给你了"</span>.getBytes();</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data, data.length, InetAddress.getLocalHost(), <span class="number">8989</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.发送数据包</span></span><br><span class="line">            socket.send(packet);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiverTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建DatagramSocket对象</span></span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket(<span class="number">8989</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.创建数据包,接受发送过来的数据,发送多少,存储多少</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer,<span class="number">0</span>, buffer.length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.接受数据,保存在packet中</span></span><br><span class="line">            socket.receive(packet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.打印输出接受到的数据</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(packet.getData(), <span class="number">0</span>, packet.getLength()));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-URL网络编程"><a href="#三-URL网络编程" class="headerlink" title="三:URL网络编程"></a>三:URL网络编程</h3><h4 id="1-URL类"><a href="#1-URL类" class="headerlink" title="1.URL类"></a>1.URL类</h4><ol><li><p><strong>URL(Uniform Resource Locator)：统一资源定位符，它表示 Internet 上 某一资源的地址。</strong></p></li><li><p>通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www，ftp站点。浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。</p></li><li><p>URL的基本结构由5部分组成：</p><ol><li><strong>&lt; 传输协议&gt;://&lt; 主机名&gt;:&lt; 端口号&gt;/&lt; 文件名&gt;# 片段名?参数列表</strong></li><li>片段名：即锚点，例如看小说，直接定位到章节</li><li>参数列表格式：参数名=参数值&amp;参数名=参数值….</li></ol></li><li><p>URL类构造器:</p><ol><li>public URL (String spec)：通过一个表示URL地址的字符串可以构造一个URL对象。例<br>如：URL url = new URL (“<a href="http://www.zhangligong.xyz/&quot;" target="_blank" rel="noopener">http://www.zhangligong.xyz/&quot;</a>);</li><li>public URL(URL context, String spec)：通过基 URL 和相对 URL 构造一个 URL 对象。<br>例如：URL downloadUrl = new URL(url, “download.html”)</li><li>public URL(String protocol, String host, String file); 例如：new URL(“http”,<br>“<a href="http://www.zhangligong.xyz&quot;" target="_blank" rel="noopener">www.zhangligong.xyz&quot;</a>, “download. html”);</li><li>public URL(String protocol, String host, int port, String file); 例如: URL gamelan = new<br>URL(“http”, “<a href="http://www.zhangligong.xyz&quot;" target="_blank" rel="noopener">www.zhangligong.xyz&quot;</a>, 80, “download.html”);</li></ol><p>URL类的构造器都声明抛出非运行时异常，必须要对这一异常进行处理，通常是用 try-catch 语句进行捕获。</p></li><li><p>URL类常用方法</p><ol><li><code>public String getProtocol( )</code> 获取该URL的协议名</li><li><code>public String getHost( )</code> 获取该URL的主机名</li><li><code>public String getPort( )</code> 获取该URL的端口号</li><li><code>public String getPath( )</code> <strong>获取该URL的文件路径</strong></li><li><code>public String getFile( )</code> 获取该URL的文件名</li><li><code>public String getQuery( )</code> <strong>获取该URL的查询名</strong></li></ol></li></ol><h4 id="2-URL类示例"><a href="#2-URL类示例" class="headerlink" title="2.URL类示例"></a>2.URL类示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="comment">// 获取URL对象的相关属性信息</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">"http://localhost:8080/helloworld/index.html?username=jack"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//          1.获取该URL的协议名</span></span><br><span class="line">            System.out.println(url.getProtocol());  <span class="comment">// http</span></span><br><span class="line"><span class="comment">//          2.获取该URL的主机名</span></span><br><span class="line">            System.out.println(url.getHost());    <span class="comment">// localhost</span></span><br><span class="line"><span class="comment">//          3.获取该URL的端口号</span></span><br><span class="line">            System.out.println(url.getPort());    <span class="comment">// 8080</span></span><br><span class="line"><span class="comment">//          4.获取该URL的文件路径</span></span><br><span class="line">            System.out.println(url.getPath());    <span class="comment">// /helloworld/index.html</span></span><br><span class="line"><span class="comment">//          5.获取该URL的文件名</span></span><br><span class="line">            System.out.println(url.getFile());    <span class="comment">// /helloworld/index.html?username=jack</span></span><br><span class="line"><span class="comment">//          6.获取该URL的查询名</span></span><br><span class="line">            System.out.println(url.getQuery());   <span class="comment">// username=jack</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="3-URLConnection类"><a href="#3-URLConnection类" class="headerlink" title="3.URLConnection类"></a>3.URLConnection类</h4><ol><li><strong>URL的方法 openStream()：能从网络上读取数据</strong></li><li>若希望输出数据，例如向服务器端的 CGI （公共网关接口-Common GatewayInterface-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一些数据，则必须先与URL建立连接，然后才能对其进行读写，此时需要使用URLConnection 。</li><li>URLConnection：<strong>表示到URL所引用的远程对象的连接。当与一个URL建立连接时，首先要在一个 URL 对象上通过方法 openConnection() 生成对应的 URLConnection对象。</strong>如果连接过程失败，将产生IOException.</li><li>通过URLConnection对象获取的<strong>输入流和输出流</strong>，即可以与现有的CGI程序进行交互。</li></ol><h4 id="4-URLConnection类示例"><a href="#4-URLConnection类示例" class="headerlink" title="4.URLConnection类示例"></a>4.URLConnection类示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取url定位的资源,保存到本地</span></span><br><span class="line"><span class="comment">//1.创建url对象</span></span><br><span class="line">       URL url = <span class="keyword">new</span> URL(<span class="string">"http://localhost:8080/helloworld/index.html?username=jack"</span>);</span><br><span class="line">       <span class="comment">//2.创建Http协议的rulConnection对象</span></span><br><span class="line">       HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line">       <span class="comment">//3.进行连接</span></span><br><span class="line">       urlConnection.connect();</span><br><span class="line">       <span class="comment">//4.获取输入流</span></span><br><span class="line">       InputStream is = urlConnection.getInputStream();</span><br><span class="line">       <span class="comment">//5.创建输出流</span></span><br><span class="line">       BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"index_dest.html"</span>));</span><br><span class="line">       <span class="comment">//6.数据处理,将数据保存到本地</span></span><br><span class="line">       <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="keyword">int</span> len;</span><br><span class="line">       <span class="keyword">while</span> ( (len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">           bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">"资源下载完成!"</span>);</span><br><span class="line">       <span class="comment">//7.关闭资源</span></span><br><span class="line">       bos.close();</span><br><span class="line">       is.close();</span><br><span class="line">       urlConnection.disconnect();</span><br></pre></td></tr></table></figure><h4 id="5-URI-URL-URN区别"><a href="#5-URI-URL-URN区别" class="headerlink" title="5.URI,URL,URN区别"></a>5.URI,URL,URN区别</h4><p><strong>URI，是uniform resource identifier，统一资源标识符</strong>，用来唯一的标识一个资源。而<strong>URL是uniform resource locator，统一资源定位符</strong>，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。而<strong>URN，uniform resource name，统一资源命名</strong>，是通过名字来标识资源，比如mailto:<a href="mailto:java-net@java.sun.com" target="_blank" rel="noopener">java-net@java.sun.com</a>。也就是说，<strong>URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。</strong></p><p>在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而<strong>URL类</strong>则不仅符合语义，还包含了定位该资源的信息，因此它<strong>不能是相对的</strong>。</p><h3 id="四-小结"><a href="#四-小结" class="headerlink" title="四:小结"></a>四:小结</h3><ol><li>计算机具有唯一的<strong>IP地址</strong>，这样不同的主机可以互相区分</li><li><strong>端口号</strong>是对一个服务的访问场所，它用于区分同一物理计算机上的多个服务。</li><li><strong>套接字</strong>用于连接客户端和服务器，客户端和服务器之间的每个通信会话使用一个不同的套接字。TCP协议用于实现面向连接的会话。</li><li>Java 用 <strong>InetAddress 对象</strong>表示 IP地址，该对象里有两个字段：主机名(String) 和 IP 地址(int)。</li><li><strong>类 Socket 和 ServerSocket</strong> 实现了基于TCP协议的客户端－服务器程序。Socket是客户端和服务器之间的一个连接，连接创建的细节被隐藏了。这个连接提供了一个<strong>安全的数据传输通道</strong>，这是因为 TCP 协议可以解决数据在传送过程中的丢失、损坏、重复、乱序以及网络拥挤等问题，它保证数据可靠的传送。</li><li><strong>类 URL 和 URLConnection</strong> 提供了最高级网络应用。URL 的网络资源的位置来同一表示Internet 上各种网络资源。通过URL对象可以创建当前应用程序和 URL 表示的网络资源之间的连接，这样当前程序就可以<strong>读取网络资源数据</strong>，或者把自己的数据传送到网络上去。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-TCP网络编程&quot;&gt;&lt;a href=&quot;#一-TCP网络编程&quot; class=&quot;headerlink&quot; title=&quot;一:TCP网络编程&quot;&gt;&lt;/a&gt;一:TCP网络编程&lt;/h3&gt;&lt;h4 id=&quot;1-Socket的TCP编程&quot;&gt;&lt;a href=&quot;#1-Socket的TC
      
    
    </summary>
    
      <category term="网络" scheme="http://zhangligong.xyz/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://zhangligong.xyz/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>网络通信要素</title>
    <link href="http://zhangligong.xyz/2019/10/20/blog023/"/>
    <id>http://zhangligong.xyz/2019/10/20/blog023/</id>
    <published>2019-10-20T10:04:24.000Z</published>
    <updated>2019-10-20T15:01:14.544Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-网络编程概述"><a href="#一-网络编程概述" class="headerlink" title="一:网络编程概述"></a>一:网络编程概述</h3><ol><li>Java提供的网络类库，可以实现无痛的网络连接，联网的底层细节被隐藏在 Java 的本机安装系统里，由 JVM 进行控制。并且 Java 实现了一个跨平台的网络库， <strong>程序员面对的是一个统一的网络编程环境。</strong></li><li>计算机网络: 把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、共享硬件、软件、数据信息等资源.</li><li>网络编程的目的: <strong>直接或间接地通过网络协议与其它计算机实现数据交换，进行通讯。</strong></li><li>主要问题: <ol><li><strong>如何准确地定位网络上一台或多台主机；定位主机上特定的应用.</strong></li><li><strong>找到主机后如何可靠高效地进行数据传输.</strong></li></ol></li></ol><h3 id="二-通信要素概述"><a href="#二-通信要素概述" class="headerlink" title="二:通信要素概述"></a>二:通信要素概述</h3><h4 id="1-如何实现网络中的主机互相通信"><a href="#1-如何实现网络中的主机互相通信" class="headerlink" title="1.如何实现网络中的主机互相通信"></a>1.如何实现网络中的主机互相通信</h4><ol><li><strong>通信双方地址: IP 和 端口号</strong></li><li><strong>网络通信协议: OSI参考模型 和 TCP/IP参考模型(协议)</strong></li></ol><h4 id="2-网络通信协议"><a href="#2-网络通信协议" class="headerlink" title="2.网络通信协议"></a>2.网络通信协议</h4><p><img src="/2019/10/20/blog023/hexo01.png" alt="网络通信协议"></p><h4 id="3-数据传输"><a href="#3-数据传输" class="headerlink" title="3.数据传输"></a>3.数据传输</h4><p><img src="/2019/10/20/blog023/hexo02.png" alt="数据传输"></p><h3 id="三-IP和端口号"><a href="#三-IP和端口号" class="headerlink" title="三:IP和端口号"></a>三:IP和端口号</h3><h4 id="1-IP地址-InetAddress"><a href="#1-IP地址-InetAddress" class="headerlink" title="1.IP地址: InetAddress"></a>1.IP地址: InetAddress</h4><ol><li>唯一的标识 Internet 上的计算机（通信实体）</li><li>本地回环地址(hostAddress)：127.0.0.1 主机名(hostName)：localhost</li><li>IP地址分类方式1：<strong>IPV4 和 IPV6</strong><ol><li>IPV4: 4个字节组成,4个0-255. 2011年初已经用尽.以点分十进制表示,如192.168.0.1</li><li>IPV6: 16个字节组成, 128位,写成8个无符号整数, 每个整数用四个十六进制位表示,数之间用冒号(:)分开,如3ffe:3201:1401:1280:c8ff:fe4d:db39:1984</li></ol></li><li>IP地址分类方式2： <strong>公网地址( 万维网使用)和 私有地址( 局域网使用)。192.168.开头的就是私有址址，范围即为192.168.0.0–192.168.255.255，专门为组织机构内部使用</strong></li></ol><h4 id="2-端口号"><a href="#2-端口号" class="headerlink" title="2.端口号"></a>2.端口号</h4><ol><li>标识正在计算机上运行的进程（程序）,不同的进程有不同的端口号</li><li>被规定为一个 16 位的整数 0~65535</li><li>端口分类:<ol><li><strong>公认端口：0~1023</strong>。被预先定义的服务通信占用（如：HTTP占用端口80，FTP占用端口21，Telnet占用端口23）</li><li><strong>注册端口：1024~49151</strong>。分配给用户进程或应用程序。（如：Tomcat占用端口8080，MySQL占用端口3306，Oracle占用端口1521等）</li><li><strong>动态/ 私有端口：49152~65535</strong>.</li></ol></li></ol><p><strong>IP地址与端口号的组合得出一个网络套接字：Socket。</strong></p><h4 id="3-InetAddress类"><a href="#3-InetAddress类" class="headerlink" title="3.InetAddress类"></a>3.InetAddress类</h4><ol><li><p>Internet上的主机有两种方式表示地址：</p><p><strong>域名(hostName)</strong>：<a href="http://www.zhangligong.xyz" target="_blank" rel="noopener">www.zhangligong.xyz</a><br><strong>IP 地址(hostAddress)</strong>：220.250.64.225</p></li><li><p>InetAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address。</p></li><li><p>域名容易记忆，当在连接网络时输入一个主机的域名后，<strong>域名服务器(DNS)负责将域名转化成IP地址</strong>，这样才能和主机建立连接。(先找本机hosts，是否有输入的域名地址，没有的话，再通过DNS服务器，找主机。) ——- <strong>域名解析</strong></p></li><li><p>InetAddress 类没有提供公共的构造器，而是提供了如下几个静态方法来获取InetAddress 实例</p><p><code>public static InetAddress getLocalHost()</code><br><code>public static InetAddress getByName(String host)</code></p></li><li><p>InetAddress 提供了如下几个常用的方法</p><p><strong>public String getHostAddress()</strong> ：返回 IP 地址字符串（以文本表现形式）。<br><strong>public String getHostName()</strong> ：获取此 IP 地址的主机名<br><strong>public boolean isReachable(int timeout)</strong>： ：测试是否可以达到该地址</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一、网络编程中有两个主要的问题：</span></span><br><span class="line"><span class="comment"> * 1.如何准确地定位网络上一台或多台主机；定位主机上的特定的应用</span></span><br><span class="line"><span class="comment"> * 2.找到主机后如何可靠高效地进行数据传输</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 二、网络编程中的两个要素：</span></span><br><span class="line"><span class="comment"> * 1.对应问题一：IP和端口号</span></span><br><span class="line"><span class="comment"> * 2.对应问题二：提供网络通信协议：TCP/IP参考模型（应用层、传输层、网络层、物理+数据链路层）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 三、通信要素一：IP和端口号</span></span><br><span class="line"><span class="comment"> * 1. IP:唯一的标识 Internet 上的计算机（通信实体）</span></span><br><span class="line"><span class="comment"> * 2. 在Java中使用InetAddress类代表IP</span></span><br><span class="line"><span class="comment"> * 3. IP分类：IPv4 和 IPv6 ; 万维网 和 局域网</span></span><br><span class="line"><span class="comment"> * 4. 域名:   www.baidu.com   www.mi.com  www.sina.com  www.jd.com</span></span><br><span class="line"><span class="comment"> *            www.vip.com</span></span><br><span class="line"><span class="comment"> * 5. 本地回路地址：127.0.0.1 对应着：localhost</span></span><br><span class="line"><span class="comment"> * 6. 如何实例化InetAddress:两个方法：getByName(String host) 、 getLocalHost()</span></span><br><span class="line"><span class="comment"> *        两个常用方法：getHostName() / getHostAddress()</span></span><br><span class="line"><span class="comment"> * 7. 端口号：正在计算机上运行的进程。</span></span><br><span class="line"><span class="comment"> * 要求：不同的进程有不同的端口号</span></span><br><span class="line"><span class="comment"> * 范围：被规定为一个 16 位的整数 0~65535。</span></span><br><span class="line"><span class="comment"> * 8. 端口号与IP地址的组合得出一个网络套接字：Socket</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-10-16 1:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAdressTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ipTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//根据域名返回InetAddress对象</span></span><br><span class="line">            InetAddress inet = InetAddress.getByName(<span class="string">"zhangligong.com"</span>);</span><br><span class="line">            System.out.println(inet);   <span class="comment">// zhangligong.com/220.250.64.225</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取本地ip</span></span><br><span class="line">            InetAddress lh = InetAddress.getByName(<span class="string">"localhost"</span>);</span><br><span class="line">            System.out.println(lh);  <span class="comment">// localhost/127.0.0.1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取本地ip</span></span><br><span class="line">            InetAddress localHost = InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(localHost);  <span class="comment">// IT-Xiaobai/169.254.34.219</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取IP名</span></span><br><span class="line">            String hostName = localHost.getHostName();</span><br><span class="line">            System.out.println(hostName);   <span class="comment">// IT-Xiaobai</span></span><br><span class="line">            <span class="comment">//获取IP地址</span></span><br><span class="line">            String hostAddress = localHost.getHostAddress();</span><br><span class="line">            System.out.println(hostAddress);    <span class="comment">// 169.254.34.219</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="四-通信协议"><a href="#四-通信协议" class="headerlink" title="四:通信协议"></a>四:通信协议</h3><p><strong>计算机网络中实现通信必须有一些约定，即通信协议，对速率、传输代码、代码结构、传输控制步骤、出错控制等制定标准。</strong></p><h4 id="1-TCP-IP协议簇"><a href="#1-TCP-IP协议簇" class="headerlink" title="1.TCP/IP协议簇"></a>1.TCP/IP协议簇</h4><ol><li>传输层协议中有两个非常重要的协议：<strong>传输控制协议TCP(Transmission Control Protocol) 和 用户数据报协议UDP(User Datagram Protocol)</strong>。</li><li><strong>TCP/IP  以其两个主要协议：传输控制协议(TCP) 和网络互联协议(IP)</strong>而得名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。</li><li>IP(Internet Protocol)协议是<strong>网络层</strong>的主要协议，支持网间互连的数据通信。</li><li>TCP/IP协议模型从更实用的角度出发，形成了高效的四层体系结构，即 <strong>物理链路层、IP 层、传输层和应用层。</strong></li></ol><h4 id="2-TCP协议"><a href="#2-TCP协议" class="headerlink" title="2.TCP协议"></a>2.TCP协议</h4><ol><li>使用TCP协议前，须先<strong>建立TCP连接，形成传输数据通道</strong></li><li>传输前，采用“ <strong>三次握手</strong>”方式，<strong>点对点通信，是可靠的</strong></li><li>TCP协议进行通信的两个应用进程：<strong>客户端、服务端</strong></li><li>在连接中可<strong>进行大数据量的传输</strong></li><li>传输完毕，需<strong>释放已建立的连接，效率低</strong></li></ol><h4 id="3-UDP协议"><a href="#3-UDP协议" class="headerlink" title="3.UDP协议"></a>3.UDP协议</h4><ol><li>将数据、源、目的封装成数据包，<strong>不需要建立连接</strong></li><li>每个数据报的大小<strong>限制在64K内</strong></li><li>发送不管对方是否准备好，接收方收到也不确认，故是<strong>不可靠的</strong></li><li>可以广播发送</li><li>发送数据结束时<strong>无需释放资源，开销小，速度快</strong></li></ol><h4 id="4-TCP三次握手"><a href="#4-TCP三次握手" class="headerlink" title="4.TCP三次握手"></a>4.TCP三次握手</h4><p><img src="/2019/10/20/blog023/hexo03.png" alt="TCP三次握手"></p><h4 id="5-TCP四次挥手"><a href="#5-TCP四次挥手" class="headerlink" title="5.TCP四次挥手"></a>5.TCP四次挥手</h4><p><img src="/2019/10/20/blog023/hexo04.png" alt="TCP四次挥手"></p><h4 id="6-Socket套接字"><a href="#6-Socket套接字" class="headerlink" title="6.Socket套接字"></a>6.Socket套接字</h4><ol><li><p><strong>网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符套接字。</strong></p></li><li><p>通信的两端都要有Socket，是两台机器间通信的端点。网络通信其实就是Socket间的通信。</p></li><li><p>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。</p></li><li><p>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端。</p></li><li><p>Socket分类：</p><ol><li><strong>流套接字（stream socket）：使用TCP提供可依赖的字节流服务</strong></li><li><strong>数据报套接字（datagram socket）：使用UDP提供“尽力而为”的数据报服务</strong></li></ol></li><li><p>常用API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Socket 类的常用构造器 ：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Socket</span><span class="params">(InetAddress address,<span class="keyword">int</span> port)</span>创建一个流套接字并将其连接到指定IP地址的指定端口号。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Socket</span><span class="params">(String host,<span class="keyword">int</span> port)</span>创建一个流套接字并将其连接到指定主机上的指定端口号。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// Socket 类的常用方法：</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">()</span>返回此套接字的输入流。可以用于接收网络消息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OutputStream <span class="title">getOutputStream</span><span class="params">()</span>返回此套接字的输出流。可以用于发送网络消息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InetAddress <span class="title">getInetAddress</span><span class="params">()</span>此套接字连接到的远程 IP 地址；如果套接字是未连接的，则返回 <span class="keyword">null</span>。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InetAddress <span class="title">getLocalAddress</span><span class="params">()</span>获取套接字绑定的本地地址。 即本端的IP地址</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span>此套接字连接到的远程端口号；如果尚未连接套接字，则返回0。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLocalPort</span><span class="params">()</span>返回此套接字绑定到的本地端口。 如果尚未绑定套接字，则返回-1。即本端的端口号。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>关闭此套接字。套接字被关闭后，便不可在以后的网络连接中使用（即无法重新连接或重新绑定）。需要创建新的套接字对象。 关闭此套接字也将会关闭该套接字的InputStream 和OutputStream。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdownInput</span><span class="params">()</span>如果在套接字上调用 <span class="title">shutdownInput</span><span class="params">()</span> 后从套接字输入流读取内容，则流将返回 EOF（文件结束符）。即不能在从此套接字的输入流中接收任何数据。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdownOutput</span><span class="params">()</span>禁用此套接字的输出流。对于 TCP 套接字，任何以前写入的数据都将被发送，并且后跟 TCP 的正常连接终止序列。 如果在套接字上调用 <span class="title">shutdownOutput</span><span class="params">()</span> 后写入套接字输出流，则该流将抛出 IOException。 即不能通过此套接字的输出流发送任何数据。</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-网络编程概述&quot;&gt;&lt;a href=&quot;#一-网络编程概述&quot; class=&quot;headerlink&quot; title=&quot;一:网络编程概述&quot;&gt;&lt;/a&gt;一:网络编程概述&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Java提供的网络类库，可以实现无痛的网络连接，联网的底层细节被隐藏在 Java
      
    
    </summary>
    
      <category term="网络" scheme="http://zhangligong.xyz/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://zhangligong.xyz/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>NIO.2概念及相关类的使用</title>
    <link href="http://zhangligong.xyz/2019/10/19/blog022/"/>
    <id>http://zhangligong.xyz/2019/10/19/blog022/</id>
    <published>2019-10-19T09:57:55.000Z</published>
    <updated>2019-10-19T17:02:56.930Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NIO概述"><a href="#NIO概述" class="headerlink" title="NIO概述"></a>NIO概述</h3><ol><li>Java NIO (New IO，Non-Blocking IO)是从Java 1.4版本开始引入的一套新的IO API，可以替代标准的Java IO API。NIO与原来的IO有同样的作用和目的，但是使用的方式完全不同，<strong>NIO支持面向缓冲区的(IO是面向流的)、基于通道的IO操作。</strong>NIO将以更加高效的方式进行文件的读写操作。</li><li>Java API中提供了两套NIO，<strong>一套是针对标准输入输出NIO，另一套就是网络编程NIO。</strong><ol><li><code>java.nio.channels.Channel</code><ol><li>FileChannel: 处理本地文件  (标准输入输出NIO)</li><li>SocketChannel: TCP网络编程的客户端的Channel</li><li>ServerSocketChannel: TCP网络编程的服务器端的Channel</li><li>DatagramChannel：UDP网络编程中发送端和接收端的Channel</li></ol></li></ol></li><li>随着 <strong>JDK 7 的发布</strong>，Java对NIO进行了极大的扩展，增强了对文件处理和文件系统特性的支持，以至于我们称他们为 NIO.2。</li></ol><h3 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h3><ol><li>早期java只提供了File类访问文件系统,File类功能有限,提供的性能也不高,并且<strong>大多数方法在出错时仅返回失败，并不会提供异常信息</strong>.</li><li>NIO.2为了弥补不足,引入了<strong>Path接口</strong>,代表一个平台无关的平台路径,扫描了目录结构中文件的置.<strong>Path可以看成是File类的升级版本，实际引用的资源也可以不存在。</strong></li><li>NIO.2在java.nio.file包下还提供了<strong>Files、Paths工具类</strong>，<strong>Files包含了大量静态的工具方法来操作文件；Paths则包含了两个返回Path的静态工厂方法。</strong></li><li>Paths 类提供的静态 get() 方法用来获取 Path 对象：<ol><li><code>static Path get(String first, String … more)</code> : 用于将多个字符串串连成路径</li><li><code>static Path get(URI uri)</code>: 返回指定uri对应的Path路径</li></ol></li><li>示例:<ol><li><code>import java.io.File;</code><br><code>File file = new File(&quot;index.html&quot;);</code></li><li><code>import java.nio.file.Path;</code><br><code>import java.nio.file.Paths;</code><br><code>Path path = Paths.get(&quot;index.html&quot;);</code></li></ol></li></ol><h3 id="Path接口"><a href="#Path接口" class="headerlink" title="Path接口"></a>Path接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Path常用方法</span></span><br><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span> ： 返回调用 Path 对象的字符串表示形式</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String path)</span> : 判断是否以 path 路径开始</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String path)</span> : 判断是否以 path 路径结束</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAbsolute</span><span class="params">()</span> : 判断是否是绝对路径</span></span><br><span class="line"><span class="function">Path <span class="title">getParent</span><span class="params">()</span> ：返回Path对象包含整个路径，不包含 Path 对象指定的文件路径</span></span><br><span class="line"><span class="function">Path <span class="title">getRoot</span><span class="params">()</span> ：返回调用 Path 对象的根路径</span></span><br><span class="line"><span class="function">Path <span class="title">getFileName</span><span class="params">()</span> : 返回与调用 Path 对象关联的文件名</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNameCount</span><span class="params">()</span> : 返回Path 根目录后面元素的数量</span></span><br><span class="line"><span class="function">Path <span class="title">getName</span><span class="params">(<span class="keyword">int</span> idx)</span> : 返回指定索引位置 idx 的路径名称</span></span><br><span class="line"><span class="function">Path <span class="title">toAbsolutePath</span><span class="params">()</span> : 作为绝对路径返回调用 Path 对象<span class="params">(***)</span></span></span><br><span class="line"><span class="function">Path <span class="title">resolve</span><span class="params">(Path p)</span> :合并两个路径，返回合并后的路径对应的Path对象</span></span><br><span class="line"><span class="function">File <span class="title">toFile</span><span class="params">()</span>: 将Path转化为File类的对象<span class="params">(***)</span></span></span><br></pre></td></tr></table></figure><h3 id="Files类"><a href="#Files类" class="headerlink" title="Files类"></a>Files类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.nio.file.Files  用于操作文件或目录的工具类。</span></span><br><span class="line"><span class="comment">// Files 常用方法：</span></span><br><span class="line"><span class="function">Path <span class="title">copy</span><span class="params">(Path src, Path dest, CopyOption … how)</span> : 文件的复制</span></span><br><span class="line"><span class="function">Path <span class="title">createDirectory</span><span class="params">(Path path, FileAttribute&lt;?&gt; … attr)</span> : 创建一个目录<span class="params">(***)</span></span></span><br><span class="line"><span class="function">Path <span class="title">createFile</span><span class="params">(Path path, FileAttribute&lt;?&gt; … arr)</span> : 创建一个文件<span class="params">(***)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Path path)</span> : 删除一个文件/目录，如果不存在，执行报错</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteIfExists</span><span class="params">(Path path)</span> : Path对应的文件/目录如果存在，执行删除<span class="params">(***)</span></span></span><br><span class="line"><span class="function">Path <span class="title">move</span><span class="params">(Path src, Path dest, CopyOption…how)</span> : 将 src 移动到 dest 位置</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">size</span><span class="params">(Path path)</span> : 返回 path 指定文件的大小<span class="params">(***)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// Files 常用方法：用于判断</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(Path path, LinkOption … opts)</span> : 判断文件是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">(Path path, LinkOption … opts)</span> : 判断是否是目录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isRegularFile</span><span class="params">(Path path, LinkOption … opts)</span> : 判断是否是文件</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isHidden</span><span class="params">(Path path)</span> : 判断是否是隐藏文件</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isReadable</span><span class="params">(Path path)</span> : 判断文件是否可读</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isWritable</span><span class="params">(Path path)</span> : 判断文件是否可写</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">notExists</span><span class="params">(Path path, LinkOption … opts)</span> : 判断文件是否不存在</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// Files 常用方法：用于操作内容</span></span></span><br><span class="line"><span class="function">SeekableByteChannel <span class="title">newByteChannel</span><span class="params">(Path path, OpenOption…how)</span> : 获取与指定文件的连接，how 指定打开方式。</span></span><br><span class="line"><span class="function">DirectoryStream&lt;Path&gt; <span class="title">newDirectoryStream</span><span class="params">(Path path)</span> : 打开 path 指定的目录</span></span><br><span class="line"><span class="function">InputStream <span class="title">newInputStream</span><span class="params">(Path path, OpenOption…how)</span>:获取 InputStream 对象</span></span><br><span class="line"><span class="function">OutputStream <span class="title">newOutputStream</span><span class="params">(Path path, OpenOption…how)</span> : 获取 OutputStream 对象</span></span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="Path接口示例"><a href="#Path接口示例" class="headerlink" title="Path接口示例"></a>Path接口示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.jdk 7.0 时，引入了 Path、Paths、Files三个类。</span></span><br><span class="line"><span class="comment"> * 2.此三个类声明在：java.nio.file包下。</span></span><br><span class="line"><span class="comment"> * 3.Path可以看做是java.io.File类的升级版本。也可以表示文件或文件目录，与平台无关</span></span><br><span class="line"><span class="comment"> * 4.如何实例化Path:使用Paths.</span></span><br><span class="line"><span class="comment"> * static Path get(String first, String … more) : 用于将多个字符串串连成路径</span></span><br><span class="line"><span class="comment"> * static Path get(URI uri): 返回指定uri对应的Path路径</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 下午 2:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如何使用Paths实例化Path</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Path path1 = Paths.get(<span class="string">"d:\\nio\\hello.txt"</span>);<span class="comment">//new File(String filepath)</span></span><br><span class="line"></span><br><span class="line">        Path path2 = Paths.get(<span class="string">"d:\\"</span>, <span class="string">"nio\\hello.txt"</span>);<span class="comment">//new File(String parent,String filename);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(path1);</span><br><span class="line">        System.out.println(path2);</span><br><span class="line"></span><br><span class="line">        Path path3 = Paths.get(<span class="string">"d:\\"</span>, <span class="string">"nio"</span>);</span><br><span class="line">        System.out.println(path3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Path中的常用方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Path path1 = Paths.get(<span class="string">"d:\\"</span>, <span class="string">"nio\\nio1\\nio2\\hello.txt"</span>);</span><br><span class="line">        Path path2 = Paths.get(<span class="string">"hello.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//String toString() ： 返回调用 Path 对象的字符串表示形式</span></span><br><span class="line">        System.out.println(path1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean startsWith(String path) : 判断是否以 path 路径开始</span></span><br><span class="line">        System.out.println(path1.startsWith(<span class="string">"d:\\nio"</span>));</span><br><span class="line"><span class="comment">//boolean endsWith(String path) : 判断是否以 path 路径结束</span></span><br><span class="line">        System.out.println(path1.endsWith(<span class="string">"hello.txt"</span>));</span><br><span class="line"><span class="comment">//boolean isAbsolute() : 判断是否是绝对路径</span></span><br><span class="line">        System.out.println(path1.isAbsolute() + <span class="string">"~"</span>);</span><br><span class="line">        System.out.println(path2.isAbsolute() + <span class="string">"~"</span>);</span><br><span class="line"><span class="comment">//Path getParent() ：返回Path对象包含整个路径，不包含 Path 对象指定的文件路径</span></span><br><span class="line">        System.out.println(path1.getParent());</span><br><span class="line">        System.out.println(path2.getParent());</span><br><span class="line"><span class="comment">//Path getRoot() ：返回调用 Path 对象的根路径</span></span><br><span class="line">        System.out.println(path1.getRoot());</span><br><span class="line">        System.out.println(path2.getRoot());</span><br><span class="line"><span class="comment">//Path getFileName() : 返回与调用 Path 对象关联的文件名</span></span><br><span class="line">        System.out.println(path1.getFileName() + <span class="string">"~"</span>);</span><br><span class="line">        System.out.println(path2.getFileName() + <span class="string">"~"</span>);</span><br><span class="line"><span class="comment">//int getNameCount() : 返回Path 根目录后面元素的数量</span></span><br><span class="line"><span class="comment">//Path getName(int idx) : 返回指定索引位置 idx 的路径名称</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; path1.getNameCount(); i++) &#123;</span><br><span class="line">            System.out.println(path1.getName(i) + <span class="string">"*****"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Path toAbsolutePath() : 作为绝对路径返回调用 Path 对象</span></span><br><span class="line">        System.out.println(path1.toAbsolutePath());</span><br><span class="line">        System.out.println(path2.toAbsolutePath());</span><br><span class="line"><span class="comment">//Path resolve(Path p) :合并两个路径，返回合并后的路径对应的Path对象</span></span><br><span class="line">        Path path3 = Paths.get(<span class="string">"d:\\"</span>, <span class="string">"nio"</span>);</span><br><span class="line">        Path path4 = Paths.get(<span class="string">"nioo\\hi.txt"</span>);</span><br><span class="line">        path3 = path3.resolve(path4);</span><br><span class="line">        System.out.println(path3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//File toFile(): 将Path转化为File类的对象</span></span><br><span class="line">        File file = path1.toFile();<span class="comment">//Path---&gt;File的转换</span></span><br><span class="line"></span><br><span class="line">        Path newPath = file.toPath();<span class="comment">//File---&gt;Path的转换</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Files类示例"><a href="#Files类示例" class="headerlink" title="Files类示例"></a>Files类示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SeekableByteChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Files工具类的使用：操作文件或目录的工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 下午 2:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilesTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">Path path1 = Paths.get(<span class="string">"d:\\nio"</span>, <span class="string">"hello.txt"</span>);</span><br><span class="line">Path path2 = Paths.get(<span class="string">"atguigu.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Path copy(Path src, Path dest, CopyOption … how) : 文件的复制</span></span><br><span class="line"><span class="comment">//要想复制成功，要求path1对应的物理上的文件存在。path1对应的文件没有要求。</span></span><br><span class="line"><span class="comment">//Files.copy(path1, path2, StandardCopyOption.REPLACE_EXISTING);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Path createDirectory(Path path, FileAttribute&lt;?&gt; … attr) : 创建一个目录</span></span><br><span class="line"><span class="comment">//要想执行成功，要求path对应的物理上的文件目录不存在。一旦存在，抛出异常。</span></span><br><span class="line">Path path3 = Paths.get(<span class="string">"d:\\nio\\nio1"</span>);</span><br><span class="line"><span class="comment">//Files.createDirectory(path3);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Path createFile(Path path, FileAttribute&lt;?&gt; … arr) : 创建一个文件</span></span><br><span class="line"><span class="comment">//要想执行成功，要求path对应的物理上的文件不存在。一旦存在，抛出异常。</span></span><br><span class="line">Path path4 = Paths.get(<span class="string">"d:\\nio\\hi.txt"</span>);</span><br><span class="line"><span class="comment">//Files.createFile(path4);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void delete(Path path) : 删除一个文件/目录，如果不存在，执行报错</span></span><br><span class="line"><span class="comment">//Files.delete(path4);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void deleteIfExists(Path path) : Path对应的文件/目录如果存在，执行删除.如果不存在，正常执行结束</span></span><br><span class="line">Files.deleteIfExists(path3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Path move(Path src, Path dest, CopyOption…how) : 将 src 移动到 dest 位置</span></span><br><span class="line"><span class="comment">//要想执行成功，src对应的物理上的文件需要存在，dest对应的文件没有要求。</span></span><br><span class="line"><span class="comment">//Files.move(path1, path2, StandardCopyOption.ATOMIC_MOVE);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//long size(Path path) : 返回 path 指定文件的大小</span></span><br><span class="line"><span class="keyword">long</span> size = Files.size(path2);</span><br><span class="line">System.out.println(size);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">Path path1 = Paths.get(<span class="string">"d:\\nio"</span>, <span class="string">"hello.txt"</span>);</span><br><span class="line">Path path2 = Paths.get(<span class="string">"atguigu.txt"</span>);</span><br><span class="line"><span class="comment">//boolean exists(Path path, LinkOption … opts) : 判断文件是否存在</span></span><br><span class="line">System.out.println(Files.exists(path2, LinkOption.NOFOLLOW_LINKS));</span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean isDirectory(Path path, LinkOption … opts) : 判断是否是目录</span></span><br><span class="line"><span class="comment">//不要求此path对应的物理文件存在。</span></span><br><span class="line">System.out.println(Files.isDirectory(path1, LinkOption.NOFOLLOW_LINKS));</span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean isRegularFile(Path path, LinkOption … opts) : 判断是否是文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean isHidden(Path path) : 判断是否是隐藏文件</span></span><br><span class="line"><span class="comment">//要求此path对应的物理上的文件需要存在。才可判断是否隐藏。否则，抛异常。</span></span><br><span class="line"><span class="comment">//System.out.println(Files.isHidden(path1));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean isReadable(Path path) : 判断文件是否可读</span></span><br><span class="line">System.out.println(Files.isReadable(path1));</span><br><span class="line"><span class="comment">//boolean isWritable(Path path) : 判断文件是否可写</span></span><br><span class="line">System.out.println(Files.isWritable(path1));</span><br><span class="line"><span class="comment">//boolean notExists(Path path, LinkOption … opts) : 判断文件是否不存在</span></span><br><span class="line">System.out.println(Files.notExists(path1, LinkOption.NOFOLLOW_LINKS));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * StandardOpenOption.READ:表示对应的Channel是可读的。</span></span><br><span class="line"><span class="comment"> * StandardOpenOption.WRITE：表示对应的Channel是可写的。</span></span><br><span class="line"><span class="comment"> * StandardOpenOption.CREATE：如果要写出的文件不存在，则创建。如果存在，忽略</span></span><br><span class="line"><span class="comment"> * StandardOpenOption.CREATE_NEW：如果要写出的文件不存在，则创建。如果存在，抛异常</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart 邮箱：shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">Path path1 = Paths.get(<span class="string">"d:\\nio"</span>, <span class="string">"hello.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//InputStream newInputStream(Path path, OpenOption…how):获取 InputStream 对象</span></span><br><span class="line">InputStream inputStream = Files.newInputStream(path1, StandardOpenOption.READ);</span><br><span class="line"></span><br><span class="line"><span class="comment">//OutputStream newOutputStream(Path path, OpenOption…how) : 获取 OutputStream 对象</span></span><br><span class="line">OutputStream outputStream = Files.newOutputStream(path1, StandardOpenOption.WRITE,StandardOpenOption.CREATE);</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"><span class="comment">//SeekableByteChannel newByteChannel(Path path, OpenOption…how) : 获取与指定文件的连接，how 指定打开方式。</span></span><br><span class="line">SeekableByteChannel channel = Files.newByteChannel(path1, StandardOpenOption.READ,StandardOpenOption.WRITE,StandardOpenOption.CREATE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//DirectoryStream&lt;Path&gt;  newDirectoryStream(Path path) : 打开 path 指定的目录</span></span><br><span class="line">Path path2 = Paths.get(<span class="string">"e:\\teach"</span>);</span><br><span class="line">DirectoryStream&lt;Path&gt; directoryStream = Files.newDirectoryStream(path2);</span><br><span class="line">Iterator&lt;Path&gt; iterator = directoryStream.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用jar包"><a href="#使用jar包" class="headerlink" title="使用jar包"></a>使用jar包</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用commons-io.jar包中的工具类FileUtils类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 上午 11:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtilsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用FailUtils类实现非文本的复制</span></span><br><span class="line">        File srcFile = <span class="keyword">new</span> File(<span class="string">"day10\\爱情与友情.jpg"</span>);</span><br><span class="line">        File destFile = <span class="keyword">new</span> File(<span class="string">"day10\\爱情与友情2.jpg"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyFile(srcFile,destFile);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;NIO概述&quot;&gt;&lt;a href=&quot;#NIO概述&quot; class=&quot;headerlink&quot; title=&quot;NIO概述&quot;&gt;&lt;/a&gt;NIO概述&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Java NIO (New IO，Non-Blocking IO)是从Java 1.4版本开始引入的一套
      
    
    </summary>
    
      <category term="IO流" scheme="http://zhangligong.xyz/categories/IO%E6%B5%81/"/>
    
    
      <category term="IO流" scheme="http://zhangligong.xyz/tags/IO%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>随机存取文件流</title>
    <link href="http://zhangligong.xyz/2019/10/19/blog021/"/>
    <id>http://zhangligong.xyz/2019/10/19/blog021/</id>
    <published>2019-10-19T09:57:22.000Z</published>
    <updated>2019-10-19T14:20:56.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li>RandomAccessFile声明在<code>java.io</code>包下，但直接继承<strong>Object类</strong>。并实现了<code>DataInput，DataOutput</code>这两个接口，意味着该类既可以读也可以写。</li><li>RandomAccessFile类支持”<strong>随机访问</strong>“的方式，程序可直接跳到文件的任意位置来读，写文件。<ol><li>支持只访问文件的部分内容</li><li>可以向已存在的文件后追加内容</li></ol></li><li>RandomAccessFile对象包含一个记录指针，用以标示当前读写的位置。RandomAccessFile类对象可以自由移动记录指针：<ol><li><code>long getFilePointer()</code>：获取文件记录指针的<strong>当前位置</strong></li><li><code>void seek(long pos)</code>：将文件记录指针<strong>定位</strong>到pos位置</li></ol></li></ol><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><ol><li>构造器<ol><li><code>public RandomAccessFile(File file, String mode)</code></li><li><code>public RandomAccessFile(String name, String mode)</code></li></ol></li><li>创建 RandomAccessFile 类实例需要指定一个 mode 参数，该参数指定 RandomAccessFile 的访问模式：<ol><li>r:  以<strong>只读方式</strong>打开</li><li>rw ：打开以<strong>读取和写入</strong></li><li>rwd: 打开以读取和 写入；同步文件内容的更新</li><li>rws: 打开以便读取和 写入； 同步文件内容和元数据的更新</li></ol></li><li>如果模式为<strong>只读r</strong>。则不会创建文件，而是会去读取一个已经存在的文件，如果读取的文件不存在则会出现异常。 如果模式为<strong>rw读写</strong>。如果文件不存在则会去创建文件，如果存在则不会创建。</li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="实现对图片的复制操作"><a href="#实现对图片的复制操作" class="headerlink" title="实现对图片的复制操作"></a>实现对图片的复制操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile raf = <span class="keyword">null</span>;</span><br><span class="line">      RandomAccessFile raf2 = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          raf = <span class="keyword">new</span> RandomAccessFile(<span class="string">"爱情与友情.jpg"</span>, <span class="string">"r"</span>);</span><br><span class="line">          raf2 = <span class="keyword">new</span> RandomAccessFile(<span class="string">"爱情与友情raf.jpg"</span>, <span class="string">"rw"</span>);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">          <span class="keyword">int</span> len;</span><br><span class="line">          <span class="keyword">while</span> ( (len = raf.read(buffer)) !=-<span class="number">1</span>)&#123;</span><br><span class="line">              raf2.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (raf != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  raf.close();</span><br><span class="line">              &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (raf2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  raf2.close();</span><br><span class="line">              &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h4 id="在原有内容某处进行数据插入操作"><a href="#在原有内容某处进行数据插入操作" class="headerlink" title="在原有内容某处进行数据插入操作"></a>在原有内容某处进行数据插入操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile raf = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            raf = <span class="keyword">new</span> RandomAccessFile(<span class="string">"hello.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">            <span class="comment">// 将从4个字符开始后的内容复制</span></span><br><span class="line">            raf.seek(<span class="number">3</span>);</span><br><span class="line">            <span class="comment">// 方式一</span></span><br><span class="line"><span class="comment">//            保存指针3后面的所有数据到StringBuilder中</span></span><br><span class="line">            <span class="comment">/*StringBuilder sb = new StringBuilder((int)new File("hello.txt").length());</span></span><br><span class="line"><span class="comment">            byte[] buffer = new byte[1024];</span></span><br><span class="line"><span class="comment">            int len;</span></span><br><span class="line"><span class="comment">            while ( (len = raf.read(buffer)) != -1)&#123;</span></span><br><span class="line"><span class="comment">                sb.append(new String(buffer,0,len));</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            <span class="comment">// 方式二</span></span><br><span class="line">            baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = raf.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//再次将指针调到角标为3的位置</span></span><br><span class="line">            raf.seek(<span class="number">3</span>);</span><br><span class="line">            <span class="comment">//在原有内容上进行覆盖操作，并不会覆盖原文件的所有内容</span></span><br><span class="line">            raf.write(<span class="string">"xyz"</span>.getBytes());</span><br><span class="line">            <span class="comment">//写入复制的内容</span></span><br><span class="line">            <span class="comment">// 方式一</span></span><br><span class="line">            <span class="comment">//将StringBuilder中的数据写入到文件中</span></span><br><span class="line"><span class="comment">//            raf.write(sb.toString().getBytes());</span></span><br><span class="line">            <span class="comment">// 方式二</span></span><br><span class="line">            raf.write(baos.toString().getBytes());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (baos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (raf != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    raf.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;RandomAccessFile声明在&lt;code&gt;java.io&lt;/code&gt;包下，但直接继承&lt;strong&gt;Object类&lt;/
      
    
    </summary>
    
      <category term="IO流" scheme="http://zhangligong.xyz/categories/IO%E6%B5%81/"/>
    
    
      <category term="IO流" scheme="http://zhangligong.xyz/tags/IO%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>对象流(处理流)</title>
    <link href="http://zhangligong.xyz/2019/10/14/blog020/"/>
    <id>http://zhangligong.xyz/2019/10/14/blog020/</id>
    <published>2019-10-13T16:47:03.000Z</published>
    <updated>2019-10-13T17:24:20.663Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li><p><code>ObjectInputStream</code>和<code>OjbectOutputSteam</code></p><p>用于存储和读取 <strong>基本数据类型</strong>数据或 <strong>对象</strong>的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</p></li><li><p><strong>序列化</strong>：用<code>ObjectOutputStream</code>类 <strong>保存</strong>基本类型数据或对象的机制 (<strong>数据转为二进制流</strong>)</p></li><li><p><strong>反序列化</strong>：用<code>ObjectInputStream</code>类 <strong>读取</strong>基本类型数据或对象的机制 (<strong>二进制流还原为数据</strong>)</p></li><li><p><code>ObjectOutputStream</code>和<code>ObjectInputStream</code>不能序列化<strong><code>static</code></strong>和<strong><code>transient</code></strong>修饰的成员变量</p></li></ol><h3 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h3><ol><li><p>对象序列化机制允许把内存中的<strong>Java对象</strong>转换成平台无关的<strong>二进制流</strong>，从而允许把这种二进制流持久地<strong>保存在磁盘</strong>上，或通过网络将这种二进制流<strong>传输到另一个网络节点</strong>。(反序列化)当其它程序获取了这种二进制流，就可以恢复成原来的Java对象</p></li><li><p>序列化的好处在于可将任何实现了<code>Serializable</code>接口的<strong>对象转化为 字节数据</strong>，使其在<strong>保存和传输</strong>时可被还原</p></li><li><p>序列化是 RMI（Remote Method Invoke – 远程方法调用）过程的参数和返回值都必须实现的机制，而 RMI 是 JavaEE 的基础。因此序列化机制是JavaEE 平台的基础</p></li><li><p>如果需要让某个对象支持序列化机制，则必须让对象所属的<strong>类及其属性</strong>是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一。否则，会抛出<strong><code>NotSerializableException</code></strong>异常</p><p><strong><code>Serializable</code></strong><br><code>Externalizable</code></p></li><li><p>实现了<code>Serializable</code> 接口的对象，可将它们转换成<strong>一系列字节</strong>，并可在以后完全恢复回原来的样子。 <strong>这一过程亦可通过网络进行。这意味着序列化机制能自动补偿操作系统间的差异。</strong>在 换句话说，可以先在Windows 机器上创台 建一个对象，对其序列化，然后通过网络发给一台Unix 机器，然后在那里准确无误地重新“装配”。不必关心数据在不同机器上如何表示，也不必关心字节的顺序或者其他任何细节。(序列化接口的理解)</p></li><li><p>由于大部分作为参数的类如<code>String</code> 、<code>Integer</code> 等都实现了<code>java.io.Serializable</code> 的接口，也可以利用多态的性质，作为参数使接口更灵活。(序列化接口是空方法接口)</p></li></ol><h3 id="序列化版本标识符"><a href="#序列化版本标识符" class="headerlink" title="序列化版本标识符"></a>序列化版本标识符</h3><ol><li><p>凡是实现Serializable接口的类都有一个表示<strong>序列化版本标识符的静态变量</strong>：</p><p><code>private static final long serialVersionUID</code>;<br><code>serialVersionUID</code>用来表明类的不同版本间的兼容性。 简言之，其目的是以序列化对象进行版本控制，有关各版本反序列化时是否兼容。<br>如果类没有显示定义这个静态常量，它的值是Java运行时环境根据<strong>类的内部细节自动生成</strong>的。若类的<strong>实例变量做了修改</strong>，<code>serialVersionUID</code> 可能发生变化。故建议，<strong>显式声明</strong>。</p></li><li><p>简单来说，Java的序列化机制是通过在运行时判断类的<code>serialVersionUID</code>来验证<strong>版本一致性</strong>的。在进行反序列化时，JVM会把传来的<strong>字节流</strong>中的<code>serialVersionUID</code>与<strong>本地相应实体</strong><code>serialVersionUID</code>进行比较，如果相同就认为是一致的，可以进行<strong>反序列化</strong>，否则就会出现序列化版本不一致的异常。(<code>InvalidCastException</code>)</p></li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ol><li><p>若某个类实现了 <code>Serializable</code> 接口，该类的对象就是可序列化的：</p><p>创建一个 <code>ObjectOutputStream</code><br>调用 <code>ObjectOutputStream</code>  对象的 <code>writeObject</code>( 对象)  方法输出可 序列化对象<br>注意写出一次，操作<code>flush()</code> 一次</p></li><li><p>反序列化</p><p>创建一个 <code>ObjectInputStream</code><br>调用 <code>readObject()</code>  方法读取流中的对象</p></li><li><p>强调：如果某个类的属性不是基本数据类型或 String 类型，而是另一个引用类型，那么这个引用类型必须是<strong>可序列化</strong>的，否则拥有该类型的<code>Field</code> 的类也不能序列化</p></li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象流的使用</span></span><br><span class="line"><span class="comment"> * 1.ObjectInputStream 和 ObjectOutputStream</span></span><br><span class="line"><span class="comment"> * 2.作用：用于存储和读取基本数据类型数据或对象的处理流。</span></span><br><span class="line"><span class="comment"> * 它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.要想一个java对象是可序列化的，需要满足相应的要求。见Person.java</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 4.序列化机制：</span></span><br><span class="line"><span class="comment"> * 对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种</span></span><br><span class="line"><span class="comment"> * 二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。</span></span><br><span class="line"><span class="comment"> * 当其它程序获取了这种二进制流，就可以恢复成原来的Java对象。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-10-13 23:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化过程：将内存中的java对象保存到磁盘中或通过网络传输出去</span></span><br><span class="line"><span class="comment">     * 使用ObjectOutputStream实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">objectOutputStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"person.dat"</span>));</span><br><span class="line"></span><br><span class="line">            oos.writeObject( <span class="keyword">new</span> Person(<span class="string">"jack"</span>,<span class="number">18</span>,<span class="keyword">new</span> Card(<span class="number">1278234L</span>)));</span><br><span class="line">            oos.flush();    <span class="comment">//刷新操作</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (oos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化：将磁盘文件中的对象或网络中传输的二进制流还原为内存中的一个java对象</span></span><br><span class="line"><span class="comment">     * 使用ObjectInputStream来实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">objectInputStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"person.dat"</span>));</span><br><span class="line"></span><br><span class="line">            Person person = (Person) ois.readObject();</span><br><span class="line">            System.out.println(person);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ois != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ois.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Person类"><a href="#Person类" class="headerlink" title="Person类"></a>Person类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Person需要满足如下的要求，方可序列化</span></span><br><span class="line"><span class="comment"> * 1.需要实现接口：Serializable</span></span><br><span class="line"><span class="comment"> * 2.当前类提供一个全局常量：serialVersionUID</span></span><br><span class="line"><span class="comment"> * 3.除了当前Person类需要实现Serializable接口之外，还必须保证其内部所有属性</span></span><br><span class="line"><span class="comment"> *   也必须是可序列化的。（默认情况下，基本数据类型及包装类，String都已实现序列化）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意：ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量</span></span><br><span class="line"><span class="comment"> * static不是类所私有的，transient是修饰不用序列化的成员变量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-10-14 0:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"><span class="comment">//序列化的类需要显式声明序列化版本标识符</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">12421351542L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Card card;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Card <span class="title">getCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCard</span><span class="params">(Card card)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String username, Integer age, Card card)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", card="</span> + card +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String username, Integer age)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Card类"><a href="#Card类" class="headerlink" title="Card类"></a>Card类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Card</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"><span class="comment">//序列化的类需要显式声明序列化版本标识符</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">54635742L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long ID;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Card&#123;"</span> +</span><br><span class="line">                <span class="string">"ID="</span> + ID +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setID</span><span class="params">(Long ID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ID = ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Card</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Card</span><span class="params">(Long ID)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.ID = ID;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ObjectInputStream&lt;/code&gt;和&lt;code&gt;OjbectOutputSteam&lt;/code&gt;
      
    
    </summary>
    
      <category term="IO流" scheme="http://zhangligong.xyz/categories/IO%E6%B5%81/"/>
    
    
      <category term="IO流" scheme="http://zhangligong.xyz/tags/IO%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>其他流(处理流)</title>
    <link href="http://zhangligong.xyz/2019/10/13/blog019/"/>
    <id>http://zhangligong.xyz/2019/10/13/blog019/</id>
    <published>2019-10-13T11:35:00.000Z</published>
    <updated>2019-10-13T17:26:34.598Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标准输入、输出流"><a href="#标准输入、输出流" class="headerlink" title="标准输入、输出流"></a>标准输入、输出流</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ol><li><p><strong>System.in</strong>和<strong>System.out</strong>分别代表了系统标准的输入和输出设备</p></li><li><p>默认输入设备是：键盘，输出设备是：显示器</p></li><li><p>System.in的类型是<strong>InputStream</strong></p></li><li><p>System.out的类型是<strong>PrintStream</strong>，其是OutputStream的子类FilterOutputStream 的子类</p></li><li><p>重定向：通过System类的<strong>setIn</strong>，<strong>setOut</strong>方法对默认设备进行改变。</p><p><code>public static void setIn(InputStream in)</code><br><code>public static void setOut(PrintStream out)</code></p></li></ol><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.标准的输入，输出流</span></span><br><span class="line"><span class="comment">     * System.in:标准的输入流，默认从键盘输入     返回 InputStream</span></span><br><span class="line"><span class="comment">       System.out:标准的输出流，默认从控制台输出   返回 PrintStream</span></span><br><span class="line"><span class="comment">       System类的setIn(InputStream is) / setOut(PrintStream ps)方式重新指定输入和输出的流。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 从键盘输入字符串，要求将读取到的整行字符串转成大写输出。然后继续进行输入操作，</span></span><br><span class="line"><span class="comment">        直至当输入“e”或者“exit”时，退出程序。</span></span><br><span class="line"><span class="comment">     方法一：使用Scanner实现，调用next()返回一个字符串</span></span><br><span class="line"><span class="comment">     Scanner s = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">s.nextInt();</span></span><br><span class="line"><span class="comment">s.next();</span></span><br><span class="line"><span class="comment">     方法二：使用System.in实现。System.in  ---&gt;  转换流 ---&gt; BufferedReader的readLine()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 把"标准"输入流(键盘输入)这个字节流包装成字符流,再包装成缓冲流</span></span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"请输入字符串："</span>);</span><br><span class="line">                String data = br.readLine();   <span class="comment">// 读取用户输入的一行数据 --&gt; 阻塞程序</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"e"</span>.equalsIgnoreCase(data) || <span class="string">"exit"</span>.equalsIgnoreCase(data)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"程序结束"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">   <span class="comment">// 将读取到的整行字符串转成大写输出</span></span><br><span class="line">                String str = data.toUpperCase();</span><br><span class="line">                System.out.println(str);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (br != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();<span class="comment">// 关闭过滤流时,会自动关闭它包装的底层节点流</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ol><li><p>实现将 <strong>基本数据类型</strong>的数据格式转化为 <strong>字符串</strong>输出</p></li><li><p>打印流：<strong><code>PrintStream</code></strong>和<strong><code>PrintWriter</code></strong>，都是输出流</p><p>提供了一系列重载的print()和println()方法，用于多种<strong>数据类型的输出</strong><br><code>PrintStream</code>和<code>PrintWriter</code>的输出<strong>不会抛出IOException异常</strong><br><code>PrintStream</code>和<code>PrintWriter</code>有<strong>自动flush功能</strong><br><code>PrintStream</code> 打印的所有字符都使用平台的默认字符编码转换为<strong>字节</strong>。<br>在需要写入<strong>字符</strong>而不是写入字节的情况下，应该使用 <code>PrintWriter</code> 类。<br>System.out返回的是<strong>PrintStream的实例</strong></p></li></ol><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印流：PrintStream 和PrintWriter ：都是输出流</span></span><br><span class="line"><span class="comment">       提供了一系列重载的print() 和 println()</span></span><br><span class="line"><span class="comment">     * 练习：使用打印输出流将ASCII码写入到文本中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建打印输出流,设置为自动刷新模式(写入换行符或字节 '\n' 时都会刷新输出缓冲区)</span></span><br><span class="line">            ps = <span class="keyword">new</span> PrintStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"text.txt"</span>),<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//重新指定打印流</span></span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;   <span class="comment">// 把标准输出流(控制台输出)改成文件</span></span><br><span class="line">                System.setOut(ps);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//循环写入ASCII</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)i);</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">50</span> == <span class="number">0</span>) &#123;  <span class="comment">//每50个数据一行</span></span><br><span class="line">                    System.out.println();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><ol><li><p>为了方便地操作Java语言的<strong>基本数据类型</strong>和<strong>String</strong>的数据，可以使用数据流。</p></li><li><p>数据流有两个类：(用于读取和写出基本数据类型、String类的数据）</p><p><code>**DataInputStream**</code> 和 <strong><code>DataOutputStream</code></strong><br>在 分别“套接”在 <code>InputStream</code> 和 和 <code>OutputStream</code>  子类的流 上</p></li><li><p>DataInputStream 中的方法</p><p><code>boolean readBoolean()</code>         <code>byte readByte()</code><br><code>char readChar()</code>             <code>float readFloat()</code><br><code>double readDouble()</code>         <code>short readShort()</code><br><code>long readLong()</code>             <code>int readInt()</code><br><code>String readUTF()</code>             <code>void readFully(byte[] b)</code></p></li><li><p>DataOutputStream 中的方法</p><p>将上述的方法的read改为相应的write即可。</p></li></ol><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据流</span></span><br><span class="line"><span class="comment">     3.1 DataInputStream 和 DataOutputStream</span></span><br><span class="line"><span class="comment">     3.2 作用：用于读取或写出基本数据类型的变量或字符串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     练习：将内存中的字符串、基本数据类型的变量写出到文件中。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataOutputStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DataOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 创建连接到指定文件的数据输出流对象</span></span><br><span class="line">            dos = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"data.txt"</span>));</span><br><span class="line"><span class="comment">// 写UTF字符串</span></span><br><span class="line">            dos.writeUTF(<span class="string">"小明"</span>);</span><br><span class="line">            dos.flush();    <span class="comment">//刷新操作，将内存中的数据写入文件</span></span><br><span class="line">            dos.writeInt(<span class="number">18</span>);</span><br><span class="line">            dos.flush();</span><br><span class="line">            dos.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">            dos.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (dos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据流</span></span><br><span class="line"><span class="comment">      将文件中存储的基本数据类型变量和字符串读取到内存中，保存在变量中。</span></span><br><span class="line"><span class="comment">      注意点：读取不同类型的数据的顺序要与当初写入文件时，保存的数据的顺序一致！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataInputStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DataInputStream dis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"data.txt"</span>));</span><br><span class="line"></span><br><span class="line">            String name = dis.readUTF();</span><br><span class="line">            <span class="keyword">int</span> age = dis.readInt();</span><br><span class="line">            <span class="keyword">boolean</span> isMale = dis.readBoolean();</span><br><span class="line">            System.out.println(<span class="string">"name="</span> + name + <span class="string">", age="</span> + age + <span class="string">", isMale="</span> + isMale);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;标准输入、输出流&quot;&gt;&lt;a href=&quot;#标准输入、输出流&quot; class=&quot;headerlink&quot; title=&quot;标准输入、输出流&quot;&gt;&lt;/a&gt;标准输入、输出流&lt;/h3&gt;&lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="IO流" scheme="http://zhangligong.xyz/categories/IO%E6%B5%81/"/>
    
    
      <category term="IO流" scheme="http://zhangligong.xyz/tags/IO%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>字符编码</title>
    <link href="http://zhangligong.xyz/2019/10/13/blog018/"/>
    <id>http://zhangligong.xyz/2019/10/13/blog018/</id>
    <published>2019-10-13T11:34:50.000Z</published>
    <updated>2019-10-13T14:19:14.247Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编码表由来"><a href="#编码表由来" class="headerlink" title="编码表由来"></a>编码表由来</h3><p>计算机只能识别二进制数据，早期由来是电信号。为了方便应用计算机，让它可以识别各个国家的文字。就将各个国家的文字用数字来表示，并一一对应，形成一张表。这就是编码表。</p><h3 id="常见编码表"><a href="#常见编码表" class="headerlink" title="常见编码表"></a>常见编码表</h3><p><strong>ASCII</strong>：美国标准信息交换码。用一个字节的7位可以表示。<br><strong>ISO8859-1</strong>：拉丁码表。欧洲码表。用一个字节的8位表示。<br><strong>GB2312</strong>：中国的中文编码表。最多两个字节编码所有字符<br><strong>GBK</strong>：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码<br><strong>Unicode</strong>：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。<br><strong>UTF-8</strong>：变长的编码方式，可用1-4个字节来表示一个字符。</p><h3 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h3><p><img src="/2019/10/13/blog018/hexo01.png" alt="图例"></p><p>ANSI与Unicode</p><p><img src="/2019/10/13/blog018/hexo03.png" alt></p><h3 id="Unicode问题"><a href="#Unicode问题" class="headerlink" title="Unicode问题"></a>Unicode问题</h3><ol><li>Unicode不完美，这里就有三个问题，一个是，我们已经知道，英文字母只用一个字节表示就够了，第二个问题是如何才能区别Unicode和ASCII？计算机怎么知道两个字节表示一个符号，而不是分别表示两个符号呢？第三个，如果和GBK等双字节编码方式一样，用最高位是1或0表示两个字节和一个字节，就少了很多值无法用于表示字符，不够表示所有字符。Unicode在很长一段时间内无法推广，直到互联网的出现。</li><li>面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。</li><li>Unicode只是定义了一个庞大的、全球通用的字符集，并为每个字符规定了唯一确定的编号，具体存储成什么样的字节流，取决于字符编码方案。推荐的Unicode编码是UTF-8和UTF-16</li></ol><p><img src="/2019/10/13/blog018/hexo02.png" alt="原理"></p><h3 id="编码与解码"><a href="#编码与解码" class="headerlink" title="编码与解码"></a>编码与解码</h3><p>编码：字符数组、<strong>字符串</strong> —&gt; 字节、<strong>字节数组</strong>      <strong>OutputStreamWriter</strong>(写入)</p><p>解码：字节、<strong>字节数组</strong>  —&gt;字符数组、<strong>字符串</strong>      <strong>InputStreamReader</strong>(读取)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;编码表由来&quot;&gt;&lt;a href=&quot;#编码表由来&quot; class=&quot;headerlink&quot; title=&quot;编码表由来&quot;&gt;&lt;/a&gt;编码表由来&lt;/h3&gt;&lt;p&gt;计算机只能识别二进制数据，早期由来是电信号。为了方便应用计算机，让它可以识别各个国家的文字。就将各个国家的文字用数字
      
    
    </summary>
    
      <category term="IO流" scheme="http://zhangligong.xyz/categories/IO%E6%B5%81/"/>
    
    
      <category term="IO流" scheme="http://zhangligong.xyz/tags/IO%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>转换流(处理流)</title>
    <link href="http://zhangligong.xyz/2019/10/13/blog017/"/>
    <id>http://zhangligong.xyz/2019/10/13/blog017/</id>
    <published>2019-10-13T11:34:26.000Z</published>
    <updated>2019-10-13T17:27:53.021Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li><p>转换流提供了在<strong>字节流和字符流</strong>之间的转换</p></li><li><p>javaAPI提供了两个转换流：</p><p><strong><code>InputStreamReader</code></strong>：将InputStream转换为Reader</p><p><strong><code>OutPutStreamWriter</code></strong>：将Writer转换为OutputStream</p></li><li><p>字节流中的数据都是字符时，转成字符流操作更高效</p></li><li><p>可以使用转换流来处理<strong>文件乱码</strong>问题。实现编码和解码功能</p></li></ol><h3 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h3><ol><li><p><code>InputStreamReader</code></p><p>实现将<strong>字节</strong>的输入流按指定<strong>字符集</strong>转换为<strong>字符</strong>的输入流</p><p>需要和 <strong>InputStream</strong> “套接”</p><p>构造器：</p><p>​    <code>public InputStreamReader(InputStream in)</code></p><p>​    <code>public InputStreamReader(InputStream in, String charsetName)</code></p><p>如：<code>Reader isr = new InputStreamReader(System.in, &quot;gbk&quot;);</code></p></li><li><p><code>OutputStreamWriter</code></p><p>实现将<strong>字符</strong>的输出流按指定<strong>字符集</strong>转换为<strong>字节</strong>的输出流</p><p>需要和 <strong>OutputStream</strong> “套接”</p><p>构造器：</p><p>​    <code>public OutputStreamWriter(OutputStream out)</code></p><p>​    <code>public OutputStreamWriter(OutputStream out, String charsetName)</code></p></li></ol><h3 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h3><p><img src="/2019/10/13/blog017/hexo01.png" alt="示例图"></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理流之二：转换流的使用</span></span><br><span class="line"><span class="comment"> * 1.转换流：属于字符流</span></span><br><span class="line"><span class="comment"> *   InputStreamReader：将一个字节的输入流转换为字符的输入流</span></span><br><span class="line"><span class="comment"> *   OutputStreamWriter：将一个字符的输出流转换为字节的输出流</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.作用：提供字节流与字符流之间的转换</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3. 解码：字节、字节数组  ---&gt;字符数组、字符串      InputStreamReader(读取)</span></span><br><span class="line"><span class="comment"> *    编码：字符数组、字符串 ---&gt; 字节、字节数组      OutputStreamWriter(写入)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zlg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-10-10 23:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将utf-8编码的dbcp.txt文件复制转为gbk编码的dbcp_gbk.txt文件</span></span><br><span class="line"><span class="comment">     * 系统(idea)默认字符集是utf-8</span></span><br><span class="line"><span class="comment">     * 参数2指明了字符集，具体使用哪个字符集，取决于文件dbcp.txt保存时使用的字符集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transformStreamTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InputStreamReader isr = <span class="keyword">null</span>;</span><br><span class="line">        OutputStreamWriter osr = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//stream实例化</span></span><br><span class="line">            isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"dbcp.txt"</span>),<span class="string">"utf-8"</span>);</span><br><span class="line">            osr = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"dbcp_gbk.txt"</span>),<span class="string">"gbk"</span>);</span><br><span class="line">            <span class="comment">//数据处理</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ( (len = isr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                osr.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭流</span></span><br><span class="line">            <span class="keyword">if</span>( osr != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    osr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( isr != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    isr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;转换流提供了在&lt;strong&gt;字节流和字符流&lt;/strong&gt;之间的转换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;javaAPI
      
    
    </summary>
    
      <category term="IO流" scheme="http://zhangligong.xyz/categories/IO%E6%B5%81/"/>
    
    
      <category term="IO流" scheme="http://zhangligong.xyz/tags/IO%E6%B5%81/"/>
    
  </entry>
  
</feed>
